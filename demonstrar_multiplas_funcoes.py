#!/usr/bin/env python
"""
Script para demonstrar o sistema de m√∫ltiplas fun√ß√µes
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import UsuarioFuncao, CargoFuncao
from datetime import date

def demonstrar_multiplas_funcoes():
    """Demonstra como o sistema funciona com m√∫ltiplas fun√ß√µes"""
    
    print("=== SISTEMA DE M√öLTIPLAS FUN√á√ïES ===")
    print("=" * 50)
    
    # 1. Verificar todos os usu√°rios com m√∫ltiplas fun√ß√µes
    print("üë• USU√ÅRIOS COM M√öLTIPLAS FUN√á√ïES:")
    usuarios_multiplas_funcoes = []
    
    for user in User.objects.filter(is_active=True):
        funcoes = UsuarioFuncao.objects.filter(usuario=user, status='ATIVO')
        if funcoes.count() > 1:
            usuarios_multiplas_funcoes.append({
                'usuario': user,
                'funcoes': funcoes
            })
    
    if usuarios_multiplas_funcoes:
        for item in usuarios_multiplas_funcoes:
            user = item['usuario']
            funcoes = item['funcoes']
            print(f"\nüìã {user.get_full_name()} ({user.username}):")
            for funcao in funcoes:
                print(f"   - {funcao.cargo_funcao.nome} ({funcao.get_tipo_funcao_display()})")
    else:
        print("   Nenhum usu√°rio com m√∫ltiplas fun√ß√µes encontrado")
    
    # 2. Verificar usu√°rios com fun√ß√£o √∫nica
    print(f"\nüë§ USU√ÅRIOS COM FUN√á√ÉO √öNICA:")
    usuarios_funcao_unica = []
    
    for user in User.objects.filter(is_active=True):
        funcoes = UsuarioFuncao.objects.filter(usuario=user, status='ATIVO')
        if funcoes.count() == 1:
            usuarios_funcao_unica.append({
                'usuario': user,
                'funcao': funcoes.first()
            })
    
    for item in usuarios_funcao_unica:
        user = item['usuario']
        funcao = item['funcao']
        print(f"   - {user.get_full_name()} ({user.username}): {funcao.cargo_funcao.nome}")
    
    # 3. Verificar usu√°rios sem fun√ß√µes
    print(f"\n‚ùå USU√ÅRIOS SEM FUN√á√ïES:")
    usuarios_sem_funcoes = []
    
    for user in User.objects.filter(is_active=True):
        funcoes = UsuarioFuncao.objects.filter(usuario=user, status='ATIVO')
        if funcoes.count() == 0:
            usuarios_sem_funcoes.append(user)
    
    for user in usuarios_sem_funcoes:
        print(f"   - {user.get_full_name()} ({user.username})")
    
    # 4. Estat√≠sticas gerais
    print(f"\nüìä ESTAT√çSTICAS GERAIS:")
    total_usuarios = User.objects.filter(is_active=True).count()
    total_funcoes = UsuarioFuncao.objects.filter(status='ATIVO').count()
    
    print(f"   - Total de usu√°rios ativos: {total_usuarios}")
    print(f"   - Total de fun√ß√µes ativas: {total_funcoes}")
    print(f"   - Usu√°rios com m√∫ltiplas fun√ß√µes: {len(usuarios_multiplas_funcoes)}")
    print(f"   - Usu√°rios com fun√ß√£o √∫nica: {len(usuarios_funcao_unica)}")
    print(f"   - Usu√°rios sem fun√ß√µes: {len(usuarios_sem_funcoes)}")
    
    # 5. Demonstrar fluxo de login
    print(f"\nüîÑ FLUXO DE LOGIN:")
    print("   1. Usu√°rio faz login com credenciais")
    print("   2. Sistema verifica fun√ß√µes ativas do usu√°rio")
    print("   3. Se apenas uma fun√ß√£o: sele√ß√£o autom√°tica")
    print("   4. Se m√∫ltiplas fun√ß√µes: redireciona para sele√ß√£o")
    print("   5. Se nenhuma fun√ß√£o: erro e logout")
    print("   6. Ap√≥s sele√ß√£o: acesso ao sistema com fun√ß√£o ativa")
    
    # 6. Demonstrar troca de fun√ß√£o
    print(f"\nüîÑ TROCA DE FUN√á√ÉO:")
    print("   - Usu√°rio pode trocar de fun√ß√£o durante a sess√£o")
    print("   - Fun√ß√µes ficam dispon√≠veis na sess√£o")
    print("   - Middleware verifica fun√ß√£o ativa em cada requisi√ß√£o")
    print("   - Se fun√ß√£o n√£o existe mais: troca autom√°tica ou logout")
    
    # 7. Demonstrar controle de acesso
    print(f"\nüîí CONTROLE DE ACESSO:")
    print("   - Baseado na fun√ß√£o ativa do usu√°rio")
    print("   - Fun√ß√µes especiais t√™m acesso total")
    print("   - Fun√ß√µes de comiss√£o t√™m acesso limitado")
    print("   - Middleware aplica restri√ß√µes automaticamente")

if __name__ == '__main__':
    demonstrar_multiplas_funcoes() 