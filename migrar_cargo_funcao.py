#!/usr/bin/env python
"""
Script para migrar dados existentes de nome_funcao para o novo modelo CargoFuncao
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from militares.models import UsuarioFuncao, CargoFuncao
from django.db import connection

def migrar_cargo_funcao():
    """Migra os dados existentes de nome_funcao para CargoFuncao"""
    print("üîÑ INICIANDO MIGRA√á√ÉO DE CARGO_FUNCAO")
    print("=" * 60)
    
    # 1. Criar um cargo padr√£o para fun√ß√µes existentes
    cargo_padrao, created = CargoFuncao.objects.get_or_create(
        nome="Fun√ß√£o Padr√£o",
        defaults={
            'descricao': 'Cargo criado automaticamente durante migra√ß√£o',
            'ativo': True,
            'ordem': 0
        }
    )
    
    if created:
        print(f"‚úÖ Cargo padr√£o criado: {cargo_padrao.nome}")
    else:
        print(f"‚úÖ Cargo padr√£o j√° existe: {cargo_padrao.nome}")
    
    # 2. Atualizar todas as fun√ß√µes existentes para usar o cargo padr√£o
    funcoes_sem_cargo = UsuarioFuncao.objects.filter(cargo_funcao__isnull=True)
    count = funcoes_sem_cargo.count()
    
    if count > 0:
        print(f"üìã Encontradas {count} fun√ß√µes sem cargo_funcao")
        
        # Atualizar em lote
        funcoes_sem_cargo.update(cargo_funcao=cargo_padrao)
        print(f"‚úÖ {count} fun√ß√µes atualizadas com cargo padr√£o")
        
        # Mostrar algumas fun√ß√µes atualizadas
        print("\nüìã Exemplos de fun√ß√µes atualizadas:")
        for funcao in UsuarioFuncao.objects.filter(cargo_funcao=cargo_padrao)[:5]:
            print(f"   - {funcao.usuario.username}: {funcao.cargo_funcao.nome}")
    else:
        print("‚úÖ Todas as fun√ß√µes j√° possuem cargo_funcao")
    
    # 3. Verificar se a migra√ß√£o foi bem-sucedida
    total_funcoes = UsuarioFuncao.objects.count()
    funcoes_com_cargo = UsuarioFuncao.objects.filter(cargo_funcao__isnull=False).count()
    
    print(f"\nüìä RESUMO DA MIGRA√á√ÉO:")
    print(f"   - Total de fun√ß√µes: {total_funcoes}")
    print(f"   - Fun√ß√µes com cargo: {funcoes_com_cargo}")
    print(f"   - Fun√ß√µes sem cargo: {total_funcoes - funcoes_com_cargo}")
    
    if funcoes_com_cargo == total_funcoes:
        print("‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
        return True
    else:
        print("‚ùå Erro na migra√ß√£o - algumas fun√ß√µes ainda n√£o t√™m cargo")
        return False

if __name__ == "__main__":
    try:
        success = migrar_cargo_funcao()
        if success:
            print("\nüéâ Migra√ß√£o conclu√≠da! Agora voc√™ pode executar:")
            print("   python manage.py makemigrations militares")
            print("   python manage.py migrate militares")
        else:
            print("\n‚ùå Erro na migra√ß√£o. Verifique os dados e tente novamente.")
    except Exception as e:
        print(f"‚ùå Erro durante a migra√ß√£o: {e}")
        import traceback
        traceback.print_exc() 