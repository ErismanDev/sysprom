#!/usr/bin/env python
"""
Script final para verificar se todos os documentos que cont√™m assinaturas t√™m o autenticador de veracidade implementado.
"""

import os
import sys
import django
from pathlib import Path

# Configurar Django
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

def verificar_autenticador_completo():
    """
    Verifica se todos os documentos que cont√™m assinaturas t√™m o autenticador implementado
    """
    print("üîç VERIFICA√á√ÉO COMPLETA DO AUTENTICADOR DE VERACIDADE\n")
    
    # Lista de documentos que cont√™m assinaturas
    documentos_com_assinatura = [
        {
            'nome': 'Quadro de Acesso',
            'modelo': 'QuadroAcesso',
            'view_pdf': 'quadro_acesso_pdf',
            'tipo_documento': 'quadro'
        },
        {
            'nome': 'Ata de Sess√£o',
            'modelo': 'AtaSessao',
            'view_pdf': 'ata_gerar_pdf',
            'tipo_documento': 'ata'
        },
        {
            'nome': 'Voto de Delibera√ß√£o',
            'modelo': 'VotoDeliberacao',
            'view_pdf': 'voto_deliberacao_pdf',
            'tipo_documento': 'voto'
        },
        {
            'nome': 'Quadro de Fixa√ß√£o de Vagas',
            'modelo': 'QuadroFixacaoVagas',
            'view_pdf': 'quadro_fixacao_vagas_pdf',
            'tipo_documento': 'quadro_fixacao'
        }
    ]
    
    # Verificar arquivo principal de views
    views_file = 'militares/views.py'
    
    if not os.path.exists(views_file):
        print("‚ùå Arquivo de views n√£o encontrado")
        return False
    
    with open(views_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    print("üìã DOCUMENTOS COM ASSINATURAS:\n")
    
    total_documentos = len(documentos_com_assinatura)
    documentos_ok = 0
    
    for doc in documentos_com_assinatura:
        print(f"üìÑ {doc['nome']}:")
        
        # Verificar se a view existe
        if doc['view_pdf'] in content:
            print(f"  ‚úÖ View {doc['view_pdf']}: Encontrada")
            
            # Verificar se usa a fun√ß√£o utilit√°ria
            if f'gerar_autenticador_veracidade' in content and doc['view_pdf'] in content:
                print(f"  ‚úÖ Autenticador: Usa fun√ß√£o utilit√°ria")
                print(f"  ‚úÖ Tipo documento: {doc['tipo_documento']}")
                documentos_ok += 1
            elif f'qr = qrcode.make' in content and doc['view_pdf'] in content:
                print(f"  ‚ö†Ô∏è  Autenticador: Implementa√ß√£o manual (precisa padronizar)")
            else:
                print(f"  ‚ùå Autenticador: N√£o implementado")
        else:
            print(f"  ‚ùå View {doc['view_pdf']}: N√£o encontrada")
        
        print()
    
    print("=== RESUMO FINAL ===\n")
    print(f"üìä Total de documentos com assinaturas: {total_documentos}")
    print(f"‚úÖ Documentos com autenticador padronizado: {documentos_ok}")
    print(f"‚ùå Documentos sem autenticador: {total_documentos - documentos_ok}")
    
    if documentos_ok == total_documentos:
        print("\nüéâ SUCESSO! Todos os documentos que cont√™m assinaturas t√™m o autenticador de veracidade implementado!")
        print("\nüìã DOCUMENTOS COBERTOS:")
        for doc in documentos_com_assinatura:
            print(f"  ‚Ä¢ {doc['nome']} - {doc['tipo_documento']}")
        
        print("\nüîí BENEF√çCIOS IMPLEMENTADOS:")
        print("  ‚Ä¢ QR Code para verifica√ß√£o de autenticidade")
        print("  ‚Ä¢ C√≥digo verificador √∫nico para cada documento")
        print("  ‚Ä¢ C√≥digo CRC para valida√ß√£o de integridade")
        print("  ‚Ä¢ URL personalizada para cada tipo de documento")
        print("  ‚Ä¢ Padroniza√ß√£o em todas as views")
        
        return True
    else:
        print(f"\n‚ö†Ô∏è  ATEN√á√ÉO: {total_documentos - documentos_ok} documento(s) ainda n√£o t√™m o autenticador implementado.")
        return False

def verificar_funcao_utilitaria():
    """
    Verifica se a fun√ß√£o utilit√°ria est√° implementada corretamente
    """
    print("\nüîß VERIFICA√á√ÉO DA FUN√á√ÉO UTILIT√ÅRIA\n")
    
    utils_file = 'militares/utils.py'
    
    if not os.path.exists(utils_file):
        print("‚ùå Arquivo utils.py n√£o encontrado")
        return False
    
    with open(utils_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verificar se a fun√ß√£o existe
    if 'def gerar_autenticador_veracidade' in content:
        print("‚úÖ Fun√ß√£o gerar_autenticador_veracidade: Encontrada")
        
        # Verificar se tem todos os par√¢metros necess√°rios
        if 'objeto, request=None, url_personalizada=None, tipo_documento=None' in content:
            print("‚úÖ Par√¢metros: Completos")
        else:
            print("‚ö†Ô∏è  Par√¢metros: Incompletos")
        
        # Verificar se gera QR code
        if 'qrcode.make' in content:
            print("‚úÖ Gera√ß√£o de QR Code: Implementada")
        else:
            print("‚ùå Gera√ß√£o de QR Code: N√£o implementada")
        
        # Verificar se gera c√≥digos de verifica√ß√£o
        if 'codigo_verificador' in content and 'codigo_crc' in content:
            print("‚úÖ C√≥digos de verifica√ß√£o: Implementados")
        else:
            print("‚ùå C√≥digos de verifica√ß√£o: N√£o implementados")
        
        return True
    else:
        print("‚ùå Fun√ß√£o gerar_autenticador_veracidade: N√£o encontrada")
        return False

def main():
    """
    Fun√ß√£o principal
    """
    print("üöÄ VERIFICA√á√ÉO COMPLETA DO AUTENTICADOR DE VERACIDADE\n")
    
    # Verificar fun√ß√£o utilit√°ria
    utils_ok = verificar_funcao_utilitaria()
    
    # Verificar documentos
    docs_ok = verificar_autenticador_completo()
    
    print("\n" + "="*60)
    print("üéØ RESULTADO FINAL")
    print("="*60)
    
    if utils_ok and docs_ok:
        print("üéâ IMPLEMENTA√á√ÉO COMPLETA!")
        print("‚úÖ Todos os documentos que cont√™m assinaturas t√™m o autenticador de veracidade")
        print("‚úÖ Fun√ß√£o utilit√°ria implementada e funcionando")
        print("‚úÖ Padroniza√ß√£o em todas as views")
        print("\nüîí O sistema est√° seguro e todos os documentos s√£o autentic√°veis!")
    else:
        print("‚ö†Ô∏è  IMPLEMENTA√á√ÉO INCOMPLETA")
        if not utils_ok:
            print("‚ùå Fun√ß√£o utilit√°ria n√£o est√° implementada corretamente")
        if not docs_ok:
            print("‚ùå Alguns documentos n√£o t√™m o autenticador implementado")
        print("\nüîß Ainda h√° trabalho a ser feito para completar a implementa√ß√£o.")

if __name__ == '__main__':
    main() 