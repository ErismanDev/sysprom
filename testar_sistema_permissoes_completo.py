#!/usr/bin/env python
"""
Script para testar o sistema de permiss√µes completo
"""

import os
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import CargoFuncao, UsuarioFuncao, PermissaoFuncao
from militares.permissoes_sistema import (
    tem_permissao, tem_permissao_modulo, obter_permissoes_usuario,
    pode_executar_acao
)

def testar_sistema_permissoes_completo():
    """Testa o sistema completo de permiss√µes"""
    
    print("üß™ TESTANDO SISTEMA DE PERMISS√ïES COMPLETO")
    print("=" * 60)
    
    # Criar usu√°rio de teste
    print("üë§ Criando usu√°rio de teste...")
    user, created = User.objects.get_or_create(
        username='teste_permissoes',
        defaults={
            'email': 'teste@teste.com',
            'first_name': 'Usu√°rio',
            'last_name': 'Teste'
        }
    )
    
    if created:
        user.set_password('123456')
        user.save()
        print("‚úÖ Usu√°rio de teste criado")
    else:
        print("‚úÖ Usu√°rio de teste j√° existe")
    
    # Criar cargo de teste
    print("\nüéØ Criando cargo de teste...")
    cargo, created = CargoFuncao.objects.get_or_create(
        nome='Teste Permiss√µes',
        defaults={
            'descricao': 'Cargo para testar sistema de permiss√µes',
            'ativo': True
        }
    )
    
    if created:
        print("‚úÖ Cargo de teste criado")
    else:
        print("‚úÖ Cargo de teste j√° existe")
    
    # Associar usu√°rio ao cargo
    print("\nüîó Associando usu√°rio ao cargo...")
    usuario_funcao, created = UsuarioFuncao.objects.get_or_create(
        usuario=user,
        cargo_funcao=cargo,
        defaults={
            'status': 'ATIVO',
            'data_inicio': '2024-01-01'
        }
    )
    
    if created:
        print("‚úÖ Usu√°rio associado ao cargo")
    else:
        print("‚úÖ Usu√°rio j√° estava associado ao cargo")
    
    # Testar permiss√µes antes de adicionar
    print("\nüîç Testando permiss√µes ANTES de adicionar...")
    print(f"Tem permiss√£o MILITARES/VISUALIZAR: {tem_permissao(user, 'MILITARES', 'VISUALIZAR')}")
    print(f"Tem permiss√£o FICHAS_CONCEITO/EDITAR: {tem_permissao(user, 'FICHAS_CONCEITO', 'EDITAR')}")
    print(f"Tem permiss√£o m√≥dulo PROMOCOES: {tem_permissao_modulo(user, 'PROMOCOES')}")
    
    # Adicionar permiss√µes espec√≠ficas
    print("\n‚ûï Adicionando permiss√µes espec√≠ficas...")
    
    permissoes_para_adicionar = [
        ('MILITARES', 'VISUALIZAR'),
        ('MILITARES', 'CRIAR'),
        ('FICHAS_CONCEITO', 'VISUALIZAR'),
        ('FICHAS_CONCEITO', 'EDITAR'),
        ('PROMOCOES', 'VISUALIZAR'),
        ('PROMOCOES', 'APROVAR'),
        ('COMISSAO', 'VISUALIZAR'),
        ('COMISSAO', 'ASSINAR'),
        ('DOCUMENTOS', 'VISUALIZAR'),
        ('DOCUMENTOS', 'GERAR_PDF'),
    ]
    
    for modulo, acesso in permissoes_para_adicionar:
        permissao, created = PermissaoFuncao.objects.get_or_create(
            cargo_funcao=cargo,
            modulo=modulo,
            acesso=acesso,
            defaults={'ativo': True}
        )
        
        if created:
            print(f"‚úÖ Permiss√£o {modulo}/{acesso} adicionada")
        else:
            print(f"‚úÖ Permiss√£o {modulo}/{acesso} j√° existia")
    
    # Testar permiss√µes ap√≥s adicionar
    print("\nüîç Testando permiss√µes AP√ìS adicionar...")
    print(f"Tem permiss√£o MILITARES/VISUALIZAR: {tem_permissao(user, 'MILITARES', 'VISUALIZAR')}")
    print(f"Tem permiss√£o MILITARES/CRIAR: {tem_permissao(user, 'MILITARES', 'CRIAR')}")
    print(f"Tem permiss√£o MILITARES/EDITAR: {tem_permissao(user, 'MILITARES', 'EDITAR')}")
    print(f"Tem permiss√£o FICHAS_CONCEITO/VISUALIZAR: {tem_permissao(user, 'FICHAS_CONCEITO', 'VISUALIZAR')}")
    print(f"Tem permiss√£o FICHAS_CONCEITO/EDITAR: {tem_permissao(user, 'FICHAS_CONCEITO', 'EDITAR')}")
    print(f"Tem permiss√£o m√≥dulo PROMOCOES: {tem_permissao_modulo(user, 'PROMOCOES')}")
    print(f"Tem permiss√£o m√≥dulo USUARIOS: {tem_permissao_modulo(user, 'USUARIOS')}")
    
    # Testar a√ß√µes HTTP
    print("\nüåê Testando a√ß√µes HTTP...")
    print(f"Pode executar GET em MILITARES: {pode_executar_acao(user, 'MILITARES', 'GET')}")
    print(f"Pode executar POST em MILITARES: {pode_executar_acao(user, 'MILITARES', 'POST')}")
    print(f"Pode executar PUT em FICHAS_CONCEITO: {pode_executar_acao(user, 'FICHAS_CONCEITO', 'PUT')}")
    print(f"Pode executar DELETE em PROMOCOES: {pode_executar_acao(user, 'PROMOCOES', 'DELETE')}")
    
    # Obter todas as permiss√µes do usu√°rio
    print("\nüìã Todas as permiss√µes do usu√°rio:")
    todas_permissoes = obter_permissoes_usuario(user)
    for modulo, acesso in todas_permissoes:
        print(f"   - {modulo}/{acesso}")
    
    # Obter permiss√µes por m√≥dulo
    print("\nüìä Permiss√µes por m√≥dulo:")
    modulos = ['MILITARES', 'FICHAS_CONCEITO', 'PROMOCOES', 'COMISSAO', 'DOCUMENTOS']
    for modulo in modulos:
        permissoes_modulo = obter_permissoes_usuario(user, modulo)
        if permissoes_modulo:
            print(f"   {modulo}: {len(permissoes_modulo)} permiss√µes")
            for _, acesso in permissoes_modulo:
                print(f"     - {acesso}")
        else:
            print(f"   {modulo}: Nenhuma permiss√£o")
    
    # Testar com superusu√°rio
    print("\nüëë Testando com superusu√°rio...")
    superuser = User.objects.filter(is_superuser=True).first()
    if superuser:
        print(f"Superusu√°rio: {superuser.username}")
        print(f"Tem permiss√£o MILITARES/VISUALIZAR: {tem_permissao(superuser, 'MILITARES', 'VISUALIZAR')}")
        print(f"Tem permiss√£o m√≥dulo USUARIOS: {tem_permissao_modulo(superuser, 'USUARIOS')}")
        print(f"Pode executar DELETE em qualquer m√≥dulo: {pode_executar_acao(superuser, 'QUALQUER_MODULO', 'DELETE')}")
    else:
        print("‚ùå Nenhum superusu√°rio encontrado")
    
    # Estat√≠sticas gerais
    print("\nüìà Estat√≠sticas do sistema:")
    total_cargos = CargoFuncao.objects.count()
    total_permissoes = PermissaoFuncao.objects.count()
    total_usuarios_funcao = UsuarioFuncao.objects.count()
    
    print(f"   Total de cargos: {total_cargos}")
    print(f"   Total de permiss√µes: {total_permissoes}")
    print(f"   Total de associa√ß√µes usu√°rio-cargo: {total_usuarios_funcao}")
    
    # M√≥dulos mais utilizados
    print("\nüèÜ M√≥dulos mais utilizados:")
    from django.db.models import Count
    modulos_populares = PermissaoFuncao.objects.values('modulo').annotate(
        count=Count('id')
    ).order_by('-count')[:5]
    
    for item in modulos_populares:
        print(f"   {item['modulo']}: {item['count']} permiss√µes")
    
    # Tipos de acesso mais utilizados
    print("\nüéØ Tipos de acesso mais utilizados:")
    acessos_populares = PermissaoFuncao.objects.values('acesso').annotate(
        count=Count('id')
    ).order_by('-count')[:5]
    
    for item in acessos_populares:
        print(f"   {item['acesso']}: {item['count']} permiss√µes")
    
    print("\n‚úÖ Teste do sistema de permiss√µes completo finalizado!")
    print("=" * 60)
    print("üéØ Agora voc√™ pode:")
    print("   1. Acessar /militares/cargos/ para gerenciar permiss√µes")
    print("   2. Marcar/desmarcar permiss√µes e ver o efeito em tempo real")
    print("   3. Testar diferentes usu√°rios com diferentes cargos")
    print("   4. Verificar que as permiss√µes s√£o aplicadas em todas as views")

if __name__ == "__main__":
    testar_sistema_permissoes_completo() 