#!/usr/bin/env python
"""
Script para associar uma fun√ß√£o ao usu√°rio erisman
"""
import os
import sys
import django
from datetime import date

# Configurar o Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import UsuarioFuncao

def associar_funcao_usuario():
    """Associa uma fun√ß√£o administrativa ao usu√°rio erisman"""
    
    try:
        # Buscar o usu√°rio erisman
        usuario = User.objects.get(username='erisman')
        print(f"‚úÖ Usu√°rio encontrado: {usuario.get_full_name()} ({usuario.username})")
        
        # Verificar se j√° tem fun√ß√µes
        funcoes_existentes = UsuarioFuncao.objects.filter(usuario=usuario)
        if funcoes_existentes.exists():
            print(f"‚ö†Ô∏è  Usu√°rio j√° possui {funcoes_existentes.count()} fun√ß√£o(√µes):")
            for funcao in funcoes_existentes:
                print(f"   - {funcao.nome_funcao} ({funcao.get_tipo_funcao_display()}) - {funcao.get_status_display()}")
        
        # Criar fun√ß√£o administrativa
        funcao_admin = UsuarioFuncao.objects.create(
            usuario=usuario,
            nome_funcao='Administrador do Sistema',
            tipo_funcao='ADMINISTRATIVO',
            descricao='Fun√ß√£o administrativa com acesso total ao sistema',
            status='ATIVO',
            data_inicio=date.today(),
            observacoes='Fun√ß√£o criada automaticamente via script'
        )
        
        print(f"‚úÖ Fun√ß√£o criada com sucesso:")
        print(f"   - Nome: {funcao_admin.nome_funcao}")
        print(f"   - Tipo: {funcao_admin.get_tipo_funcao_display()}")
        print(f"   - Status: {funcao_admin.get_status_display()}")
        print(f"   - Data In√≠cio: {funcao_admin.data_inicio}")
        
        # Verificar se agora tem fun√ß√µes ativas
        funcoes_ativas = UsuarioFuncao.objects.filter(
            usuario=usuario,
            status='ATIVO'
        )
        
        print(f"\nüìä Resumo:")
        print(f"   - Total de fun√ß√µes: {funcoes_existentes.count() + 1}")
        print(f"   - Fun√ß√µes ativas: {funcoes_ativas.count()}")
        
        if funcoes_ativas.count() == 1:
            print("‚úÖ Usu√°rio agora pode acessar o sistema normalmente!")
        else:
            print("‚ö†Ô∏è  Usu√°rio ter√° que selecionar uma fun√ß√£o ao fazer login.")
        
        return True
        
    except User.DoesNotExist:
        print("‚ùå Erro: Usu√°rio 'erisman' n√£o encontrado!")
        print("   Verifique se o usu√°rio existe no sistema.")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro ao associar fun√ß√£o: {e}")
        return False

if __name__ == '__main__':
    print("üîß Associando fun√ß√£o ao usu√°rio erisman...")
    print("=" * 50)
    
    sucesso = associar_funcao_usuario()
    
    print("=" * 50)
    if sucesso:
        print("‚úÖ Processo conclu√≠do com sucesso!")
        print("\nüìù Pr√≥ximos passos:")
        print("   1. Fa√ßa login com o usu√°rio 'erisman'")
        print("   2. Se tiver m√∫ltiplas fun√ß√µes, selecione uma")
        print("   3. Acesse o sistema normalmente")
    else:
        print("‚ùå Processo falhou!")
        print("   Verifique os erros acima e tente novamente.") 