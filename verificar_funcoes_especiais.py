#!/usr/bin/env python
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import Militar, UsuarioFuncao, CargoFuncao

def verificar_funcoes_especiais():
    print("üîç VERIFICANDO FUN√á√ïES ESPECIAIS")
    print("=" * 50)
    
    # 1. Verificar se as fun√ß√µes especiais existem
    funcoes_especiais = ['Diretor de Gest√£o de Pessoas', 'Chefe da Se√ß√£o de Promo√ß√µes']
    
    print("üìã Fun√ß√µes especiais que permitem CRUD completo:")
    for funcao_nome in funcoes_especiais:
        try:
            cargo = CargoFuncao.objects.get(nome=funcao_nome)
            usuarios_cargo = UsuarioFuncao.objects.filter(
                cargo_funcao=cargo,
                status='AT'
            ).count()
            print(f"   ‚úÖ {funcao_nome}: {usuarios_cargo} usu√°rios ativos")
        except CargoFuncao.DoesNotExist:
            print(f"   ‚ùå {funcao_nome}: N√ÉO CADASTRADA")
    
    # 2. Listar usu√°rios com fun√ß√µes especiais
    print(f"\nüë• Usu√°rios com fun√ß√µes especiais:")
    usuarios_especiais = User.objects.filter(
        funcoes__cargo_funcao__nome__in=funcoes_especiais,
        funcoes__status='AT'
    ).distinct()
    
    if usuarios_especiais.exists():
        for usuario in usuarios_especiais:
            funcoes = UsuarioFuncao.objects.filter(
                usuario=usuario,
                status='AT',
                cargo_funcao__nome__in=funcoes_especiais
            )
            print(f"   - {usuario.get_full_name()} ({usuario.username})")
            for funcao in funcoes:
                print(f"     ‚Ä¢ {funcao.cargo_funcao.nome}")
    else:
        print("   Nenhum usu√°rio encontrado com fun√ß√µes especiais")
    
    # 3. Verificar todas as fun√ß√µes cadastradas
    print(f"\nüè∑Ô∏è Todas as fun√ß√µes/cargos cadastrados:")
    todos_cargos = CargoFuncao.objects.all().order_by('nome')
    for cargo in todos_cargos:
        usuarios_cargo = UsuarioFuncao.objects.filter(
            cargo_funcao=cargo,
            status='AT'
        ).count()
        print(f"   - {cargo.nome}: {usuarios_cargo} usu√°rios")
    
    # 4. Resumo das regras implementadas
    print(f"\nüîí REGRAS DE ACESSO IMPLEMENTADAS:")
    print("   ‚úÖ Usu√°rios de comiss√£o (CPO/CPP) podem apenas VISUALIZAR:")
    print("      - Fichas de conceito")
    print("      - Cadastro de militares")
    print("      - Documentos")
    print("   ‚úÖ Usu√°rios CPO podem acessar √°reas CPO")
    print("   ‚úÖ Usu√°rios CPP podem acessar √°reas CPP")
    print("   ‚úÖ FUN√á√ïES ESPECIAIS podem fazer CRUD COMPLETO:")
    print("      - Diretor de Gest√£o de Pessoas")
    print("      - Chefe da Se√ß√£o de Promo√ß√µes")
    print("      (Podem criar, editar e excluir fichas de conceito e cadastro de militares)")

if __name__ == "__main__":
    verificar_funcoes_especiais() 