#!/usr/bin/env python
"""
Script para criar fun√ß√µes espec√≠ficas para membros da CPP, CPO, diretores e chefes
"""
import os
import sys
import django
from datetime import date

# Configurar o Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import UsuarioFuncao

def criar_funcoes_especificas():
    """Cria fun√ß√µes espec√≠ficas para membros da CPP, CPO, diretores e chefes"""
    
    # Buscar ou criar usu√°rio padr√£o para as fun√ß√µes
    try:
        usuario_padrao = User.objects.get(username='erisman')
        print(f"‚úÖ Usu√°rio padr√£o encontrado: {usuario_padrao.get_full_name()}")
    except User.DoesNotExist:
        print("‚ùå Usu√°rio 'erisman' n√£o encontrado!")
        print("   Criando usu√°rio padr√£o para as fun√ß√µes...")
        
        # Criar usu√°rio padr√£o
        usuario_padrao = User.objects.create_user(
            username='admin_sistema',
            email='admin@sistema.com',
            password='admin123',
            first_name='Administrador',
            last_name='do Sistema',
            is_staff=True,
            is_superuser=True
        )
        print(f"‚úÖ Usu√°rio padr√£o criado: {usuario_padrao.get_full_name()}")
    
    # Lista de fun√ß√µes espec√≠ficas a serem criadas
    funcoes_especificas = [
        # CPP - Comiss√£o Permanente de Promo√ß√µes
        {
            'nome_funcao': 'Presidente da CPP',
            'tipo_funcao': 'COMISSAO',
            'descricao': 'Presidente da Comiss√£o Permanente de Promo√ß√µes',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Vice-Presidente da CPP',
            'tipo_funcao': 'COMISSAO',
            'descricao': 'Vice-Presidente da Comiss√£o Permanente de Promo√ß√µes',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Membro da CPP',
            'tipo_funcao': 'COMISSAO',
            'descricao': 'Membro da Comiss√£o Permanente de Promo√ß√µes',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Secret√°rio da CPP',
            'tipo_funcao': 'COMISSAO',
            'descricao': 'Secret√°rio da Comiss√£o Permanente de Promo√ß√µes',
            'status': 'ATIVO'
        },
        
        # CPO - Comiss√£o Permanente de Oficiais
        {
            'nome_funcao': 'Presidente da CPO',
            'tipo_funcao': 'COMISSAO',
            'descricao': 'Presidente da Comiss√£o Permanente de Oficiais',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Vice-Presidente da CPO',
            'tipo_funcao': 'COMISSAO',
            'descricao': 'Vice-Presidente da Comiss√£o Permanente de Oficiais',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Membro da CPO',
            'tipo_funcao': 'COMISSAO',
            'descricao': 'Membro da Comiss√£o Permanente de Oficiais',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Secret√°rio da CPO',
            'tipo_funcao': 'COMISSAO',
            'descricao': 'Secret√°rio da Comiss√£o Permanente de Oficiais',
            'status': 'ATIVO'
        },
        
        # Diretores
        {
            'nome_funcao': 'Diretor de Gest√£o de Pessoas',
            'tipo_funcao': 'GESTAO',
            'descricao': 'Diretor respons√°vel pela gest√£o de pessoas',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Diretor de Promo√ß√µes',
            'tipo_funcao': 'GESTAO',
            'descricao': 'Diretor respons√°vel pelas promo√ß√µes',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Diretor de Administra√ß√£o',
            'tipo_funcao': 'ADMINISTRATIVO',
            'descricao': 'Diretor de administra√ß√£o',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Diretor de Opera√ß√µes',
            'tipo_funcao': 'OPERACIONAL',
            'descricao': 'Diretor de opera√ß√µes',
            'status': 'ATIVO'
        },
        
        # Chefes
        {
            'nome_funcao': 'Chefe da Se√ß√£o de Promo√ß√µes',
            'tipo_funcao': 'GESTAO',
            'descricao': 'Chefe da se√ß√£o respons√°vel pelas promo√ß√µes',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Chefe da Se√ß√£o de Pessoal',
            'tipo_funcao': 'ADMINISTRATIVO',
            'descricao': 'Chefe da se√ß√£o de pessoal',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Chefe da Se√ß√£o de Administra√ß√£o',
            'tipo_funcao': 'ADMINISTRATIVO',
            'descricao': 'Chefe da se√ß√£o de administra√ß√£o',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Chefe da Se√ß√£o de Opera√ß√µes',
            'tipo_funcao': 'OPERACIONAL',
            'descricao': 'Chefe da se√ß√£o de opera√ß√µes',
            'status': 'ATIVO'
        },
        
        # Outras fun√ß√µes importantes
        {
            'nome_funcao': 'Assessor de Promo√ß√µes',
            'tipo_funcao': 'GESTAO',
            'descricao': 'Assessor especializado em promo√ß√µes',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Analista de Promo√ß√µes',
            'tipo_funcao': 'ADMINISTRATIVO',
            'descricao': 'Analista respons√°vel pelo processamento de promo√ß√µes',
            'status': 'ATIVO'
        },
        {
            'nome_funcao': 'Coordenador de Comiss√µes',
            'tipo_funcao': 'GESTAO',
            'descricao': 'Coordenador das comiss√µes de promo√ß√µes',
            'status': 'ATIVO'
        }
    ]
    
    print("üîß Criando fun√ß√µes espec√≠ficas para o sistema...")
    print("=" * 60)
    
    funcoes_criadas = 0
    funcoes_existentes = 0
    
    for funcao_info in funcoes_especificas:
        # Verificar se a fun√ß√£o j√° existe para este usu√°rio
        funcao_existente = UsuarioFuncao.objects.filter(
            usuario=usuario_padrao,
            nome_funcao=funcao_info['nome_funcao']
        ).first()
        
        if funcao_existente:
            print(f"‚ö†Ô∏è  Fun√ß√£o j√° existe: {funcao_info['nome_funcao']}")
            funcoes_existentes += 1
        else:
            # Criar a fun√ß√£o associada ao usu√°rio padr√£o
            nova_funcao = UsuarioFuncao.objects.create(
                usuario=usuario_padrao,
                nome_funcao=funcao_info['nome_funcao'],
                tipo_funcao=funcao_info['tipo_funcao'],
                descricao=funcao_info['descricao'],
                status=funcao_info['status'],
                data_inicio=date.today(),
                observacoes='Fun√ß√£o criada automaticamente via script'
            )
            
            print(f"‚úÖ Fun√ß√£o criada: {nova_funcao.nome_funcao} ({nova_funcao.get_tipo_funcao_display()})")
            funcoes_criadas += 1
    
    print("=" * 60)
    print(f"üìä Resumo:")
    print(f"   - Fun√ß√µes criadas: {funcoes_criadas}")
    print(f"   - Fun√ß√µes j√° existentes: {funcoes_existentes}")
    print(f"   - Total processado: {len(funcoes_especificas)}")
    
    # Mostrar todas as fun√ß√µes dispon√≠veis
    print(f"\nüìã Fun√ß√µes dispon√≠veis no sistema:")
    todas_funcoes = UsuarioFuncao.objects.all().order_by('tipo_funcao', 'nome_funcao')
    
    tipos_agrupados = {}
    for funcao in todas_funcoes:
        tipo = funcao.get_tipo_funcao_display()
        if tipo not in tipos_agrupados:
            tipos_agrupados[tipo] = []
        tipos_agrupados[tipo].append(funcao.nome_funcao)
    
    for tipo, funcoes in tipos_agrupados.items():
        print(f"\n   {tipo}:")
        for funcao in funcoes:
            print(f"     - {funcao}")
    
    return True

if __name__ == '__main__':
    sucesso = criar_funcoes_especificas()
    
    print("\n" + "=" * 60)
    if sucesso:
        print("‚úÖ Processo conclu√≠do com sucesso!")
        print("\nüìù Pr√≥ximos passos:")
        print("   1. As fun√ß√µes est√£o dispon√≠veis para serem associadas aos usu√°rios")
        print("   2. Use o sistema para associar fun√ß√µes aos usu√°rios espec√≠ficos")
        print("   3. Cada usu√°rio pode ter m√∫ltiplas fun√ß√µes")
        print("   4. As fun√ß√µes foram criadas associadas ao usu√°rio padr√£o")
    else:
        print("‚ùå Processo falhou!")
        print("   Verifique os erros acima e tente novamente.") 