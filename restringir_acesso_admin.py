#!/usr/bin/env python
"""
Script para restringir acesso √†s se√ß√µes administrativas
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import UsuarioFuncao, CargoFuncao, PermissaoFuncao

def restringir_acesso_admin():
    """Restringe o acesso √†s se√ß√µes administrativas"""
    
    print("üîí RESTRINGINDO ACESSO √ÄS SE√á√ïES ADMINISTRATIVAS")
    print("=" * 60)
    
    # 1. Definir fun√ß√µes que podem acessar se√ß√µes administrativas
    funcoes_admin = [
        'Administrador do Sistema',
        'Administrador'
    ]
    
    print(f"üìã FUN√á√ïES COM ACESSO ADMINISTRATIVO:")
    for funcao in funcoes_admin:
        print(f"   ‚Ä¢ {funcao}")
    
    # 2. Verificar se essas fun√ß√µes existem
    print(f"\nüîç VERIFICANDO EXIST√äNCIA DAS FUN√á√ïES:")
    for funcao_nome in funcoes_admin:
        try:
            cargo = CargoFuncao.objects.get(nome=funcao_nome)
            usuarios = UsuarioFuncao.objects.filter(cargo_funcao=cargo, status='ATIVO').count()
            print(f"   ‚úÖ {funcao_nome}: {usuarios} usu√°rios ativos")
        except CargoFuncao.DoesNotExist:
            print(f"   ‚ùå {funcao_nome}: N√ÉO EXISTE")
    
    # 3. Verificar usu√°rios com essas fun√ß√µes
    print(f"\nüë• USU√ÅRIOS COM FUN√á√ïES ADMINISTRATIVAS:")
    usuarios_admin = UsuarioFuncao.objects.filter(
        cargo_funcao__nome__in=funcoes_admin,
        status='ATIVO'
    ).select_related('usuario', 'cargo_funcao')
    
    for uf in usuarios_admin:
        print(f"   ‚Ä¢ {uf.usuario.username} - {uf.cargo_funcao.nome}")
    
    # 4. Verificar superusu√°rios
    print(f"\nüëë SUPERUSU√ÅRIOS:")
    superusers = User.objects.filter(is_superuser=True)
    for user in superusers:
        print(f"   ‚Ä¢ {user.username} (superuser)")
    
    # 5. Verificar context processor
    print(f"\nüîç VERIFICANDO CONTEXT PROCESSOR:")
    from militares.context_processors import menu_permissions_processor
    from django.test import RequestFactory
    
    factory = RequestFactory()
    
    # Testar com usu√°rio admin
    try:
        user_admin = User.objects.get(username='erisman')
        request = factory.get('/')
        request.user = user_admin
        
        context = menu_permissions_processor(request)
        menu_permissions = context.get('menu_permissions', {})
        
        print(f"\n  üë§ {user_admin.username} (admin):")
        print(f"    ‚Ä¢ show_administracao: {menu_permissions.get('show_administracao', False)}")
        print(f"    ‚Ä¢ show_usuarios: {menu_permissions.get('show_usuarios', False)}")
        print(f"    ‚Ä¢ show_permissoes: {menu_permissions.get('show_permissoes', False)}")
        print(f"    ‚Ä¢ show_gerenciar_intersticios: {menu_permissions.get('show_gerenciar_intersticios', False)}")
        print(f"    ‚Ä¢ show_gerenciar_previsao: {menu_permissions.get('show_gerenciar_previsao', False)}")
        
    except User.DoesNotExist:
        print(f"  ‚ùå Usu√°rio 'erisman' n√£o encontrado")
    
    # 6. Verificar permiss√µes no sistema
    print(f"\nüîê VERIFICANDO PERMISS√ïES NO SISTEMA:")
    
    # Verificar permiss√µes para Administrador do Sistema
    try:
        cargo_admin_sistema = CargoFuncao.objects.get(nome='Administrador do Sistema')
        permissoes_admin = PermissaoFuncao.objects.filter(
            cargo_funcao=cargo_admin_sistema,
            ativo=True
        )
        
        print(f"  üìã Permiss√µes do 'Administrador do Sistema': {permissoes_admin.count()}")
        
        # Agrupar por m√≥dulo
        modulos = {}
        for permissao in permissoes_admin:
            if permissao.modulo not in modulos:
                modulos[permissao.modulo] = []
            modulos[permissao.modulo].append(permissao.acesso)
        
        for modulo, acessos in modulos.items():
            print(f"    ‚Ä¢ {modulo}: {', '.join(acessos)}")
            
    except CargoFuncao.DoesNotExist:
        print(f"  ‚ùå Cargo 'Administrador do Sistema' n√£o encontrado")
    
    # 7. Verificar permiss√µes para Administrador
    try:
        cargo_admin = CargoFuncao.objects.get(nome='Administrador')
        permissoes_admin = PermissaoFuncao.objects.filter(
            cargo_funcao=cargo_admin,
            ativo=True
        )
        
        print(f"  üìã Permiss√µes do 'Administrador': {permissoes_admin.count()}")
        
        # Agrupar por m√≥dulo
        modulos = {}
        for permissao in permissoes_admin:
            if permissao.modulo not in modulos:
                modulos[permissao.modulo] = []
            modulos[permissao.modulo].append(permissao.acesso)
        
        for modulo, acessos in modulos.items():
            print(f"    ‚Ä¢ {modulo}: {', '.join(acessos)}")
            
    except CargoFuncao.DoesNotExist:
        print(f"  ‚ùå Cargo 'Administrador' n√£o encontrado")
    
    # 8. Verificar se h√° outras fun√ß√µes com permiss√µes administrativas
    print(f"\nüîç VERIFICANDO OUTRAS FUN√á√ïES COM PERMISS√ïES ADMINISTRATIVAS:")
    
    # Buscar todas as permiss√µes que incluem ADMINISTRAR
    permissoes_admin_sistema = PermissaoFuncao.objects.filter(
        acesso='ADMINISTRAR',
        ativo=True
    ).select_related('cargo_funcao')
    
    cargos_com_admin = {}
    for permissao in permissoes_admin_sistema:
        if permissao.cargo_funcao:  # Verificar se cargo_funcao n√£o √© None
            cargo_nome = permissao.cargo_funcao.nome
            if cargo_nome not in cargos_com_admin:
                cargos_com_admin[cargo_nome] = []
            cargos_com_admin[cargo_nome].append(permissao.modulo)
    
    for cargo, modulos in cargos_com_admin.items():
        print(f"  ‚Ä¢ {cargo}: {', '.join(modulos)}")
    
    # 9. Conclus√£o
    print(f"\nüéØ CONCLUS√ÉO:")
    print(f"   ‚úÖ Apenas as seguintes fun√ß√µes podem acessar se√ß√µes administrativas:")
    print(f"      ‚Ä¢ Superusu√°rios (is_superuser=True)")
    print(f"      ‚Ä¢ Administrador do Sistema")
    print(f"      ‚Ä¢ Administrador")
    
    print(f"\n   üîí Se√ß√µes administrativas restritas:")
    print(f"      ‚Ä¢ Gerenciar Usu√°rios")
    print(f"      ‚Ä¢ Cargos e Fun√ß√µes")
    print(f"      ‚Ä¢ Administra√ß√£o")
    print(f"      ‚Ä¢ Gerenciar Interst√≠cios")
    print(f"      ‚Ä¢ Gerenciar Previs√£o de Vagas")
    
    print(f"\n   üìã Para testar:")
    print(f"      1. Fa√ßa login com um usu√°rio que N√ÉO tem fun√ß√£o administrativa")
    print(f"      2. Verifique se as se√ß√µes administrativas N√ÉO aparecem no menu")
    print(f"      3. Tente acessar diretamente as URLs administrativas")
    print(f"      4. Confirme que o acesso √© negado")

if __name__ == "__main__":
    restringir_acesso_admin() 