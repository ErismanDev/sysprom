#!/usr/bin/env python
"""
Script para corrigir problemas de codifica√ß√£o nos templates HTML
"""

import os
import re
import codecs
from pathlib import Path

def corrigir_caracteres_arquivo(arquivo_path):
    """
    Corrige caracteres especiais em um arquivo HTML
    """
    try:
        # Tentar ler com diferentes codifica√ß√µes
        encodings = ['utf-8', 'latin-1', 'cp1252', 'iso-8859-1']
        conteudo = None
        
        for encoding in encodings:
            try:
                with codecs.open(arquivo_path, 'r', encoding=encoding) as f:
                    conteudo = f.read()
                break
            except UnicodeDecodeError:
                continue
        
        if conteudo is None:
            print(f"‚ùå N√£o foi poss√≠vel ler o arquivo: {arquivo_path}")
            return False
        
        # Mapeamento de caracteres problem√°ticos
        substituicoes = {
            # Caracteres especiais comuns
            '√†': '√†',
            '√°': '√°', 
            '√¢': '√¢',
            '√£': '√£',
            '√§': '√§',
            '√•': '√•',
            '√ß': '√ß',
            '√®': '√®',
            '√©': '√©',
            '√™': '√™',
            '√´': '√´',
            '√¨': '√¨',
            '√≠': '√≠',
            '√Æ': '√Æ',
            '√Ø': '√Ø',
            '√±': '√±',
            '√≤': '√≤',
            '√≥': '√≥',
            '√¥': '√¥',
            '√µ': '√µ',
            '√∂': '√∂',
            '√π': '√π',
            '√∫': '√∫',
            '√ª': '√ª',
            '√º': '√º',
            '√Ω': '√Ω',
            '√ø': '√ø',
            
            # Caracteres espec√≠ficos do portugu√™s
            '√Ä': '√Ä',
            '√Å': '√Å',
            '√Ç': '√Ç',
            '√É': '√É',
            '√Ñ': '√Ñ',
            '√á': '√á',
            '√à': '√à',
            '√â': '√â',
            '√ä': '√ä',
            '√ã': '√ã',
            '√å': '√å',
            '√ç': '√ç',
            '√é': '√é',
            '√è': '√è',
            '√ë': '√ë',
            '√í': '√í',
            '√ì': '√ì',
            '√î': '√î',
            '√ï': '√ï',
            '√ñ': '√ñ',
            '√ô': '√ô',
            '√ö': '√ö',
            '√õ': '√õ',
            '√ú': '√ú',
            '√ù': '√ù',
        }
        
        # Aplicar substitui√ß√µes
        conteudo_original = conteudo
        for char_antigo, char_novo in substituicoes.items():
            conteudo = conteudo.replace(char_antigo, char_novo)
        
        # Verificar se houve mudan√ßas
        if conteudo != conteudo_original:
            # Salvar com UTF-8
            with codecs.open(arquivo_path, 'w', encoding='utf-8') as f:
                f.write(conteudo)
            print(f"‚úÖ Corrigido: {arquivo_path}")
            return True
        else:
            print(f"‚ÑπÔ∏è  Sem altera√ß√µes necess√°rias: {arquivo_path}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao processar {arquivo_path}: {e}")
        return False

def corrigir_templates():
    """
    Corrige todos os templates HTML do projeto
    """
    # Diret√≥rios de templates
    diretorios_templates = [
        'templates',
        'militares/templates',
    ]
    
    total_arquivos = 0
    arquivos_corrigidos = 0
    
    for diretorio in diretorios_templates:
        if os.path.exists(diretorio):
            print(f"\nüìÅ Processando diret√≥rio: {diretorio}")
            
            # Encontrar todos os arquivos HTML
            for root, dirs, files in os.walk(diretorio):
                for file in files:
                    if file.endswith('.html'):
                        arquivo_path = os.path.join(root, file)
                        total_arquivos += 1
                        
                        if corrigir_caracteres_arquivo(arquivo_path):
                            arquivos_corrigidos += 1
    
    print(f"\nüìä Resumo:")
    print(f"   Total de arquivos processados: {total_arquivos}")
    print(f"   Arquivos corrigidos: {arquivos_corrigidos}")
    print(f"   Arquivos sem altera√ß√µes: {total_arquivos - arquivos_corrigidos}")

def verificar_encoding_arquivos():
    """
    Verifica a codifica√ß√£o dos arquivos HTML
    """
    print("üîç Verificando codifica√ß√£o dos arquivos HTML...")
    
    diretorios_templates = [
        'templates',
        'militares/templates',
    ]
    
    for diretorio in diretorios_templates:
        if os.path.exists(diretorio):
            print(f"\nüìÅ Verificando: {diretorio}")
            
            for root, dirs, files in os.walk(diretorio):
                for file in files:
                    if file.endswith('.html'):
                        arquivo_path = os.path.join(root, file)
                        
                        try:
                            # Tentar detectar encoding
                            with open(arquivo_path, 'rb') as f:
                                raw_data = f.read()
                            
                            # Verificar se tem BOM UTF-8
                            if raw_data.startswith(b'\xef\xbb\xbf'):
                                encoding = 'UTF-8-BOM'
                            else:
                                # Tentar decodificar com UTF-8
                                try:
                                    raw_data.decode('utf-8')
                                    encoding = 'UTF-8'
                                except UnicodeDecodeError:
                                    encoding = 'N√ÉO-UTF-8'
                            
                            if encoding != 'UTF-8':
                                print(f"‚ö†Ô∏è  {arquivo_path}: {encoding}")
                            else:
                                print(f"‚úÖ {arquivo_path}: {encoding}")
                                
                        except Exception as e:
                            print(f"‚ùå Erro ao verificar {arquivo_path}: {e}")

if __name__ == '__main__':
    print("üîß Script de Corre√ß√£o de Caracteres nos Templates")
    print("=" * 50)
    
    # Verificar encoding primeiro
    verificar_encoding_arquivos()
    
    print("\n" + "=" * 50)
    
    # Perguntar se deve corrigir
    resposta = input("\nDeseja corrigir os problemas de codifica√ß√£o? (s/n): ").lower()
    
    if resposta in ['s', 'sim', 'y', 'yes']:
        corrigir_templates()
        print("\n‚úÖ Processo conclu√≠do!")
    else:
        print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio.") 