#!/usr/bin/env python3
"""
Script corrigido para migrar dados para o Supabase
Resolve o problema de associa√ß√£o de usu√°rios aos militares
"""

import os
import sys
import django
import json
import codecs
from datetime import datetime

def configurar_supabase():
    """Configura o ambiente para Supabase"""
    print("üåê Configurando ambiente Supabase...")
    
    # Configurar vari√°veis de ambiente
    os.environ['DATABASE_URL'] = "postgresql://postgres.vubnekyyfjcrswaufnla:2YXGdmXESoZAoPkO@aws-0-sa-east-1.pooler.supabase.com:6543/postgres"
    os.environ['DJANGO_SETTINGS_MODULE'] = 'sepromcbmepi.settings_render'
    os.environ['SECRET_KEY'] = 'django-insecure-temp-key-for-migration'
    
    try:
        django.setup()
        print("‚úÖ Ambiente Supabase configurado")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao configurar Supabase: {e}")
        return False

def testar_conexao_supabase():
    """Testa a conex√£o com o Supabase"""
    print("\nüß™ Testando conex√£o com Supabase...")
    
    try:
        from django.db import connection
        
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            
        if result and result[0] == 1:
            print("‚úÖ Conex√£o com Supabase estabelecida")
            return True
        else:
            print("‚ùå Conex√£o com Supabase falhou")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar conex√£o: {e}")
        return False

def aplicar_migracoes_supabase():
    """Aplica migra√ß√µes no Supabase"""
    print("\nüóÑÔ∏è Aplicando migra√ß√µes no Supabase...")
    
    try:
        from django.core.management import call_command
        
        call_command('migrate')
        print("‚úÖ Migra√ß√µes aplicadas no Supabase")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao aplicar migra√ß√µes: {e}")
        return False

def converter_para_utf8(arquivo_original):
    """Converte o arquivo para UTF-8"""
    print(f"\nüîÑ Convertendo arquivo para UTF-8: {arquivo_original}")
    
    try:
        # Ler o arquivo original com latin-1
        with open(arquivo_original, 'r', encoding='latin-1') as f:
            conteudo = f.read()
        
        # Criar nome do arquivo convertido
        nome_base = os.path.splitext(arquivo_original)[0]
        arquivo_utf8 = f"{nome_base}_utf8.json"
        
        # Salvar como UTF-8
        with open(arquivo_utf8, 'w', encoding='utf-8') as f:
            f.write(conteudo)
        
        print(f"‚úÖ Arquivo convertido: {arquivo_utf8}")
        return arquivo_utf8
        
    except Exception as e:
        print(f"‚ùå Erro ao converter arquivo: {e}")
        return None

def carregar_dados_utf8(backup_file):
    """Carrega os dados do arquivo UTF-8"""
    print(f"\nüì§ Carregando dados no Supabase: {backup_file}")
    
    try:
        # Verificar se o arquivo existe
        if not os.path.exists(backup_file):
            print(f"‚ùå Arquivo n√£o encontrado: {backup_file}")
            return False
        
        # Carregar dados usando loaddata
        from django.core.management import call_command
        
        call_command('loaddata', backup_file)
        print("‚úÖ Dados carregados no Supabase")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao carregar dados: {e}")
        return False

def associar_usuarios_militares():
    """Associa usu√°rios aos militares de forma manual"""
    print("\nüîó Associando usu√°rios aos militares...")
    
    try:
        from django.contrib.auth.models import User
        from militares.models import Militar
        
        # Desabilitar temporariamente o signal de associa√ß√£o autom√°tica
        from django.db.models.signals import post_save
        from militares.signals import associar_usuario_a_militar
        
        # Desconectar o signal temporariamente
        post_save.disconnect(associar_usuario_a_militar, sender=User)
        
        usuarios_associados = 0
        usuarios_nao_associados = 0
        
        # Buscar todos os usu√°rios que n√£o est√£o associados a militares
        usuarios_sem_militar = User.objects.filter(militar__isnull=True)
        
        print(f"üìä Total de usu√°rios sem militar: {usuarios_sem_militar.count()}")
        
        for usuario in usuarios_sem_militar:
            militar_encontrado = None
            
            # Tentar encontrar militar por CPF (username)
            try:
                militar_encontrado = Militar.objects.get(cpf=usuario.username)
            except Militar.DoesNotExist:
                pass
            
            # Se n√£o encontrou por CPF, tentar por nome completo
            if not militar_encontrado:
                nome_completo = f"{usuario.first_name} {usuario.last_name}".strip()
                if nome_completo:
                    try:
                        militar_encontrado = Militar.objects.get(nome_completo__iexact=nome_completo)
                    except Militar.DoesNotExist:
                        pass
            
            # Se n√£o encontrou por nome, tentar por email
            if not militar_encontrado and usuario.email:
                try:
                    militar_encontrado = Militar.objects.get(email__iexact=usuario.email)
                except Militar.DoesNotExist:
                    pass
            
            # Se encontrou militar, associar
            if militar_encontrado and not militar_encontrado.user:
                militar_encontrado.user = usuario
                militar_encontrado.save(update_fields=['user'])
                usuarios_associados += 1
                print(f"‚úÖ Usu√°rio {usuario.username} associado ao militar {militar_encontrado.nome_completo}")
            else:
                usuarios_nao_associados += 1
                print(f"‚ö†Ô∏è  Usu√°rio {usuario.username} n√£o p√¥de ser associado automaticamente")
        
        # Reconectar o signal
        post_save.connect(associar_usuario_a_militar, sender=User)
        
        print(f"\nüìä RESUMO DA ASSOCIA√á√ÉO:")
        print(f"   ‚Ä¢ Usu√°rios associados: {usuarios_associados}")
        print(f"   ‚Ä¢ Usu√°rios n√£o associados: {usuarios_nao_associados}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao associar usu√°rios: {e}")
        return False

def verificar_migracao():
    """Verifica se a migra√ß√£o foi bem-sucedida"""
    print("\nüîç Verificando migra√ß√£o...")
    
    try:
        from django.contrib.auth.models import User
        from militares.models import Militar, ComissaoPromocao, QuadroAcesso
        
        # Contar registros no Supabase
        total_usuarios = User.objects.count()
        total_militares = Militar.objects.count()
        total_comissoes = ComissaoPromocao.objects.count()
        total_quadros = QuadroAcesso.objects.count()
        usuarios_com_militar = User.objects.filter(militar__isnull=False).count()
        
        print(f"üìä Dados no Supabase:")
        print(f"   ‚Ä¢ Usu√°rios: {total_usuarios}")
        print(f"   ‚Ä¢ Militares: {total_militares}")
        print(f"   ‚Ä¢ Usu√°rios associados a militares: {usuarios_com_militar}")
        print(f"   ‚Ä¢ Comiss√µes: {total_comissoes}")
        print(f"   ‚Ä¢ Quadros de Acesso: {total_quadros}")
        
        if total_usuarios > 0 and total_militares > 0:
            print("‚úÖ Migra√ß√£o realizada com sucesso!")
            return True
        else:
            print("‚ùå Migra√ß√£o falhou - dados n√£o encontrados")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar migra√ß√£o: {e}")
        return False

def criar_superuser_supabase():
    """Cria um superusu√°rio no Supabase se n√£o existir"""
    print("\nüë§ Verificando superusu√°rio no Supabase...")
    
    try:
        from django.contrib.auth.models import User
        
        # Verificar se j√° existe superusu√°rio
        if User.objects.filter(is_superuser=True).exists():
            print("‚úÖ Superusu√°rio j√° existe no Supabase")
            return True
        
        # Criar superusu√°rio padr√£o
        print("üìù Criando superusu√°rio padr√£o...")
        User.objects.create_superuser('admin', 'admin@cbmepi.com', 'admin123')
        print("‚úÖ Superusu√°rio 'admin' criado com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar superusu√°rio: {e}")
        return False

def limpar_arquivo_temporario(arquivo_utf8):
    """Remove o arquivo tempor√°rio"""
    try:
        if os.path.exists(arquivo_utf8):
            os.remove(arquivo_utf8)
            print(f"üßπ Arquivo tempor√°rio removido: {arquivo_utf8}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao remover arquivo tempor√°rio: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ MIGRA√á√ÉO CORRIGIDA: Banco Local ‚Üí Supabase")
    print("=" * 60)
    
    # Verificar se o arquivo de backup foi fornecido
    if len(sys.argv) != 2:
        print("‚ùå Uso: python migracao_supabase_corrigida.py <arquivo_backup>")
        print("Exemplo: python migracao_supabase_corrigida.py backup_atual_20250729_123645.json")
        return False
    
    backup_file = sys.argv[1]
    
    if not os.path.exists(backup_file):
        print(f"‚ùå Arquivo de backup n√£o encontrado: {backup_file}")
        return False
    
    # Passo 1: Configurar Supabase
    if not configurar_supabase():
        return False
    
    # Passo 2: Testar conex√£o
    if not testar_conexao_supabase():
        print("‚ùå N√£o foi poss√≠vel conectar ao Supabase")
        return False
    
    # Passo 3: Aplicar migra√ß√µes
    if not aplicar_migracoes_supabase():
        return False
    
    # Passo 4: Converter arquivo para UTF-8
    arquivo_utf8 = converter_para_utf8(backup_file)
    if not arquivo_utf8:
        return False
    
    # Passo 5: Carregar dados
    if not carregar_dados_utf8(arquivo_utf8):
        return False
    
    # Passo 6: Associar usu√°rios aos militares (CORRE√á√ÉO)
    if not associar_usuarios_militares():
        print("‚ö†Ô∏è  Aviso: Problemas na associa√ß√£o de usu√°rios")
    
    # Passo 7: Verificar migra√ß√£o
    if not verificar_migracao():
        return False
    
    # Passo 8: Criar superusu√°rio
    criar_superuser_supabase()
    
    # Passo 9: Limpar arquivo tempor√°rio
    limpar_arquivo_temporario(arquivo_utf8)
    
    print("\n" + "=" * 60)
    print("üéâ MIGRA√á√ÉO CORRIGIDA CONCLU√çDA COM SUCESSO!")
    print("=" * 60)
    print()
    print("üìã RESUMO:")
    print("‚úÖ Dados migrados do banco local para o Supabase")
    print("‚úÖ Migra√ß√µes aplicadas")
    print("‚úÖ Usu√°rios associados aos militares (corrigido)")
    print("‚úÖ Superusu√°rio configurado")
    print()
    print("üåê PR√ìXIMOS PASSOS:")
    print("1. Teste a aplica√ß√£o no Render: https://sysprom.onrender.com")
    print("2. Fa√ßa login com: admin / admin123")
    print("3. Verifique se todos os dados est√£o presentes")
    print("4. Teste as funcionalidades principais")
    print("5. Verifique se os usu√°rios est√£o corretamente associados aos militares")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            print("\n‚ùå Migra√ß√£o falhou. Verifique os erros acima.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Migra√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1) 