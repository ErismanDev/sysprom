#!/usr/bin/env python
"""
Script para verificar as fun√ß√µes espec√≠ficas do usu√°rio admin
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import UsuarioFuncao, CargoFuncao

def verificar_funcoes_admin():
    """Verifica as fun√ß√µes espec√≠ficas do usu√°rio admin"""
    
    print("üîç VERIFICANDO FUN√á√ïES DO ADMIN")
    print("=" * 60)
    
    # Buscar usu√°rio admin
    try:
        user_admin = User.objects.get(username='erisman')
        print(f"‚úÖ Usu√°rio encontrado: {user_admin.username}")
    except User.DoesNotExist:
        print("‚ùå Usu√°rio 'erisman' n√£o encontrado")
        return
    
    # Verificar todas as fun√ß√µes
    print(f"\n1Ô∏è‚É£ TODAS AS FUN√á√ïES:")
    funcoes = UsuarioFuncao.objects.filter(usuario=user_admin, status='ATIVO')
    
    if funcoes.exists():
        for funcao in funcoes:
            print(f"   ‚Ä¢ {funcao.cargo_funcao.nome} (ID: {funcao.cargo_funcao.id})")
    else:
        print("   ‚ùå Nenhuma fun√ß√£o ativa encontrada")
    
    # Verificar fun√ß√µes especiais necess√°rias para almanaques
    print(f"\n2Ô∏è‚É£ FUN√á√ïES ESPECIAIS (necess√°rias para almanaques):")
    cargos_especiais = ['Diretor de Gest√£o de Pessoas', 'Chefe da Se√ß√£o de Promo√ß√µes']
    funcoes_especiais = funcoes.filter(cargo_funcao__nome__in=cargos_especiais)
    
    if funcoes_especiais.exists():
        for funcao in funcoes_especiais:
            print(f"   ‚úÖ {funcao.cargo_funcao.nome}")
    else:
        print("   ‚ùå Nenhuma fun√ß√£o especial encontrada")
        print("   üîß Isso explica por que n√£o v√™ os almanaques!")
    
    # Verificar se existem esses cargos no sistema
    print(f"\n3Ô∏è‚É£ CARGOS ESPECIAIS NO SISTEMA:")
    for cargo_nome in cargos_especiais:
        try:
            cargo = CargoFuncao.objects.get(nome=cargo_nome)
            print(f"   ‚úÖ {cargo_nome} (ID: {cargo.id})")
        except CargoFuncao.DoesNotExist:
            print(f"   ‚ùå {cargo_nome} - N√ÉO EXISTE no sistema")
    
    # Verificar outras fun√ß√µes que podem dar acesso
    print(f"\n4Ô∏è‚É£ OUTRAS FUN√á√ïES QUE PODEM DAR ACESSO:")
    outros_cargos = ['Administrador do Sistema', 'Administrador']
    outras_funcoes = funcoes.filter(cargo_funcao__nome__in=outros_cargos)
    
    if outras_funcoes.exists():
        for funcao in outras_funcoes:
            print(f"   ‚úÖ {funcao.cargo_funcao.nome}")
    else:
        print("   ‚ùå Nenhuma fun√ß√£o administrativa encontrada")
    
    # Recomenda√ß√µes
    print(f"\n5Ô∏è‚É£ RECOMENDA√á√ïES:")
    
    if not funcoes_especiais.exists():
        print("   üîß SOLU√á√ÉO: Adicionar fun√ß√£o especial")
        print("   üìù Op√ß√µes:")
        print("     1. Adicionar fun√ß√£o 'Diretor de Gest√£o de Pessoas'")
        print("     2. Adicionar fun√ß√£o 'Chefe da Se√ß√£o de Promo√ß√µes'")
        print("     3. Modificar a view para incluir superusu√°rios")
        
        # Verificar se os cargos existem
        for cargo_nome in cargos_especiais:
            try:
                cargo = CargoFuncao.objects.get(nome=cargo_nome)
                print(f"     - Cargo '{cargo_nome}' existe (ID: {cargo.id})")
            except CargoFuncao.DoesNotExist:
                print(f"     - Cargo '{cargo_nome}' N√ÉO existe - precisa ser criado")
    else:
        print("   ‚úÖ J√° tem fun√ß√µes especiais - problema pode ser outro")

if __name__ == "__main__":
    verificar_funcoes_admin() 