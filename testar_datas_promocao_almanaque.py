#!/usr/bin/env python
import os
import sys
import django
from datetime import date

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from militares.models import AlmanaqueMilitar

def testar_datas_promocao():
    """Testa as datas de promo√ß√£o nos almanaques"""
    
    print("=== TESTE DE DATAS DE PROMO√á√ÉO NOS ALMANAQUES ===\n")
    
    # Datas de promo√ß√£o definidas
    data_promocao_1 = date(2025, 7, 18)   # 18/07/2025
    data_promocao_2_oficiais = date(2025, 12, 23)  # 23/12/2025
    data_promocao_2_pracas = date(2025, 12, 25)    # 25/12/2025
    
    print("üìÖ Datas de promo√ß√£o configuradas:")
    print(f"   - Primeira promo√ß√£o: {data_promocao_1.strftime('%d/%m/%Y')}")
    print(f"   - Segunda promo√ß√£o OFICIAIS: {data_promocao_2_oficiais.strftime('%d/%m/%Y')}")
    print(f"   - Segunda promo√ß√£o PRA√áAS: {data_promocao_2_pracas.strftime('%d/%m/%Y')}")
    print()
    
    # Simular diferentes datas atuais para testar a l√≥gica
    datas_teste = [
        date(2025, 7, 15),   # Antes da primeira promo√ß√£o
        date(2025, 7, 20),   # Ap√≥s a primeira promo√ß√£o
        date(2025, 12, 20),  # Antes da segunda promo√ß√£o de oficiais
        date(2025, 12, 24),  # Ap√≥s a segunda promo√ß√£o de oficiais
        date(2025, 12, 26),  # Ap√≥s a segunda promo√ß√£o de pra√ßas
    ]
    
    print("üîç Testando l√≥gica de datas:")
    for data_atual in datas_teste:
        print(f"\nüìÖ Data atual: {data_atual.strftime('%d/%m/%Y')}")
        
        # Testar para OFICIAIS
        if data_atual <= data_promocao_2_oficiais:
            data_ultima_promocao_oficiais = data_promocao_1
        else:
            data_ultima_promocao_oficiais = data_promocao_2_oficiais
        print(f"   üéñÔ∏è  OFICIAIS: √∫ltima promo√ß√£o = {data_ultima_promocao_oficiais.strftime('%d/%m/%Y')}")
        
        # Testar para PRA√áAS
        if data_atual <= data_promocao_2_pracas:
            data_ultima_promocao_pracas = data_promocao_1
        else:
            data_ultima_promocao_pracas = data_promocao_2_pracas
        print(f"   üë• PRA√áAS: √∫ltima promo√ß√£o = {data_ultima_promocao_pracas.strftime('%d/%m/%Y')}")
        
        # Testar para GERAL
        if data_atual <= data_promocao_2_pracas:
            data_ultima_promocao_geral = data_promocao_1
        else:
            data_ultima_promocao_geral = data_promocao_2_pracas
        print(f"   üåê GERAL: √∫ltima promo√ß√£o = {data_ultima_promocao_geral.strftime('%d/%m/%Y')}")
    
    # Verificar almanaques existentes
    print("\n=== ALMANAQUES EXISTENTES ===")
    almanaques = AlmanaqueMilitar.objects.filter(ativo=True).order_by('-data_geracao')[:10]
    
    if almanaques.exists():
        for almanaque in almanaques:
            print(f"üìã {almanaque.numero} - {almanaque.titulo}")
            print(f"   Tipo: {almanaque.get_tipo_display()}")
            print(f"   Data de gera√ß√£o: {almanaque.data_geracao.strftime('%d/%m/%Y %H:%M')}")
            if almanaque.data_ultima_promocao:
                print(f"   Data √∫ltima promo√ß√£o: {almanaque.data_ultima_promocao.strftime('%d/%m/%Y')}")
            else:
                print(f"   Data √∫ltima promo√ß√£o: N√£o definida")
            print()
    else:
        print("‚ùå Nenhum almanaque encontrado no banco de dados")
    
    print("=== RESUMO ===")
    print("‚úÖ Datas de promo√ß√£o configuradas:")
    print("   - OFICIAIS: 18/07/2025 e 23/12/2025")
    print("   - PRA√áAS: 18/07/2025 e 25/12/2025")
    print("   - GERAL: usa a data mais recente entre todas")
    print()
    print("üìù Como funciona:")
    print("   - Se a data atual <= segunda promo√ß√£o: usa primeira promo√ß√£o (18/07)")
    print("   - Se a data atual > segunda promo√ß√£o: usa segunda promo√ß√£o")
    print("   - Para GERAL: sempre usa a data mais recente dispon√≠vel")

if __name__ == "__main__":
    testar_datas_promocao() 