#!/usr/bin/env python
"""
Script para testar a gera√ß√£o de PDF do quadro de acesso com as melhorias implementadas:
- Data em portugu√™s
- Assinaturas eletr√¥nicas no final
- QR code no rodap√© da √∫ltima p√°gina
"""

import os
import sys
import django
from datetime import date, datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import QuadroAcesso, AssinaturaQuadroAcesso
from militares.views import quadro_acesso_pdf
from django.test import RequestFactory

def testar_geracao_pdf():
    """Testa a gera√ß√£o de PDF com as melhorias implementadas"""
    
    print("üß™ Testando gera√ß√£o de PDF do quadro de acesso...")
    
    # Buscar um quadro de acesso existente
    try:
        quadro = QuadroAcesso.objects.first()
        if not quadro:
            print("‚ùå Nenhum quadro de acesso encontrado no banco de dados.")
            return False
        
        print(f"‚úÖ Quadro encontrado: {quadro}")
        print(f"   - Tipo: {quadro.get_tipo_display()}")
        print(f"   - Data de promo√ß√£o: {quadro.data_promocao}")
        print(f"   - Status: {quadro.get_status_display()}")
        
        # Verificar assinaturas existentes
        assinaturas = quadro.assinaturas.all()
        print(f"   - Assinaturas: {assinaturas.count()}")
        
        for assinatura in assinaturas:
            print(f"     * {assinatura.get_tipo_assinatura_display()}: {assinatura.assinado_por.get_full_name()}")
        
        # Criar uma assinatura de teste se n√£o existir
        if not assinaturas.exists():
            print("üìù Criando assinatura de teste...")
            user = User.objects.first()
            if user:
                assinatura_teste = AssinaturaQuadroAcesso.objects.create(
                    quadro_acesso=quadro,
                    assinado_por=user,
                    tipo_assinatura='APROVACAO',
                    observacoes='Assinatura de teste para verifica√ß√£o do PDF'
                )
                print(f"‚úÖ Assinatura de teste criada: {assinatura_teste}")
        
        # Testar gera√ß√£o do PDF
        print("\nüîÑ Testando gera√ß√£o do PDF...")
        
        # Criar request factory para simular requisi√ß√£o
        factory = RequestFactory()
        request = factory.get(f'/militares/quadros-acesso/{quadro.pk}/pdf/')
        
        # Simular usu√°rio logado
        user = User.objects.first()
        if user:
            request.user = user
        
        # Chamar a fun√ß√£o de gera√ß√£o de PDF
        try:
            response = quadro_acesso_pdf(request, quadro.pk)
            
            if response.status_code == 200:
                print("‚úÖ PDF gerado com sucesso!")
                print(f"   - Content-Type: {response.get('Content-Type')}")
                print(f"   - Content-Disposition: {response.get('Content-Disposition')}")
                
                # Verificar se o conte√∫do √© um PDF v√°lido
                content = response.content
                if content.startswith(b'%PDF'):
                    print("‚úÖ Conte√∫do √© um PDF v√°lido!")
                    print(f"   - Tamanho: {len(content)} bytes")
                    
                    # Salvar PDF para inspe√ß√£o
                    filename = f"teste_quadro_acesso_{quadro.pk}.pdf"
                    with open(filename, 'wb') as f:
                        f.write(content)
                    print(f"üìÑ PDF salvo como: {filename}")
                    
                    return True
                else:
                    print("‚ùå Conte√∫do n√£o √© um PDF v√°lido!")
                    print(f"   - Primeiros bytes: {content[:50]}")
                    return False
            else:
                print(f"‚ùå Erro na gera√ß√£o do PDF: Status {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao gerar PDF: {str(e)}")
            import traceback
            traceback.print_exc()
            return False
            
    except Exception as e:
        print(f"‚ùå Erro geral: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def verificar_melhorias_implementadas():
    """Verifica se as melhorias foram implementadas corretamente"""
    
    print("\nüîç Verificando melhorias implementadas...")
    
    # Verificar se a fun√ß√£o foi modificada
    try:
        from militares.views import quadro_acesso_pdf
        import inspect
        
        source = inspect.getsource(quadro_acesso_pdf)
        
        melhorias = {
            'Data em portugu√™s': 'meses_pt' in source,
            'Assinaturas eletr√¥nicas': 'assinaturas = quadro.assinaturas.all()' in source,
            'QR code no rodap√©': 'rodape_table = Table' in source,
            'PageBreak para assinaturas': 'PageBreak()' in source,
            'Locale configurado': 'locale.setlocale' in source
        }
        
        print("üìã Status das melhorias:")
        for melhoria, implementada in melhorias.items():
            status = "‚úÖ" if implementada else "‚ùå"
            print(f"   {status} {melhoria}")
        
        todas_implementadas = all(melhorias.values())
        if todas_implementadas:
            print("\nüéâ Todas as melhorias foram implementadas com sucesso!")
        else:
            print("\n‚ö†Ô∏è  Algumas melhorias ainda precisam ser implementadas.")
        
        return todas_implementadas
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar melhorias: {str(e)}")
        return False

if __name__ == "__main__":
    print("üöÄ Iniciando testes do PDF do quadro de acesso...")
    print("=" * 60)
    
    # Verificar melhorias implementadas
    melhorias_ok = verificar_melhorias_implementadas()
    
    if melhorias_ok:
        # Testar gera√ß√£o do PDF
        pdf_ok = testar_geracao_pdf()
        
        if pdf_ok:
            print("\nüéâ Todos os testes passaram com sucesso!")
            print("‚úÖ O PDF do quadro de acesso est√° funcionando corretamente com todas as melhorias.")
        else:
            print("\n‚ùå Falha na gera√ß√£o do PDF.")
    else:
        print("\n‚ùå Melhorias n√£o implementadas corretamente.")
    
    print("\n" + "=" * 60)
    print("üèÅ Testes conclu√≠dos.") 