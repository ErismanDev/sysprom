#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EXECUTOR DE MIGRA√á√ÉO COMPLETA SUPABASE
======================================

Script que orquestra todo o processo de migra√ß√£o:
1. Configura√ß√£o
2. Backup
3. Migra√ß√£o em 3 etapas
4. Verifica√ß√£o

Autor: Sistema de Promo√ß√µes CBMEPI
Data: 29/07/2025
"""

import os
import sys
import subprocess
import time
from datetime import datetime

class ExecutorMigracaoCompleta:
    def __init__(self):
        self.timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.log_file = f"execucao_completa_{self.timestamp}.log"
        
    def log(self, message):
        """Registra mensagem no log"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        log_message = f"[{timestamp}] {message}"
        print(log_message)
        
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(log_message + '\n')
    
    def executar_script(self, script, descricao):
        """Executa um script Python"""
        self.log(f"üöÄ Executando: {descricao}")
        
        try:
            result = subprocess.run([sys.executable, script], 
                                  capture_output=True, text=True, timeout=3600)
            
            if result.returncode == 0:
                self.log(f"‚úÖ {descricao} - Conclu√≠do com sucesso")
                return True
            else:
                self.log(f"‚ùå {descricao} - Falhou")
                self.log(f"Erro: {result.stderr}")
                return False
                
        except subprocess.TimeoutExpired:
            self.log(f"‚è∞ {descricao} - Timeout (mais de 1 hora)")
            return False
        except Exception as e:
            self.log(f"‚ùå {descricao} - Erro: {e}")
            return False
    
    def verificar_dependencias(self):
        """Verifica se as depend√™ncias est√£o instaladas"""
        self.log("üîç Verificando depend√™ncias...")
        
        dependencias = ['psycopg2-binary']
        faltando = []
        
        for dep in dependencias:
            try:
                __import__(dep.replace('-', '_'))
                self.log(f"   ‚úÖ {dep}")
            except ImportError:
                self.log(f"   ‚ùå {dep} - N√ÉO INSTALADO")
                faltando.append(dep)
        
        if faltando:
            self.log(f"üì¶ Instalando depend√™ncias faltantes...")
            try:
                subprocess.run([sys.executable, '-m', 'pip', 'install'] + faltando, 
                             check=True, capture_output=True)
                self.log("‚úÖ Depend√™ncias instaladas")
                return True
            except subprocess.CalledProcessError as e:
                self.log(f"‚ùå Erro ao instalar depend√™ncias: {e}")
                return False
        
        return True
    
    def verificar_arquivos(self):
        """Verifica se os arquivos necess√°rios existem"""
        self.log("üîç Verificando arquivos necess√°rios...")
        
        arquivos_necessarios = [
            'configurar_migracao.py',
            'migracao_supabase_3_etapas.py',
            'backup_pre_migracao.py',
            'verificar_migracao.py'
        ]
        
        todos_ok = True
        for arquivo in arquivos_necessarios:
            if os.path.exists(arquivo):
                self.log(f"   ‚úÖ {arquivo}")
            else:
                self.log(f"   ‚ùå {arquivo} - N√ÉO ENCONTRADO")
                todos_ok = False
        
        return todos_ok
    
    def etapa_configuracao(self):
        """Etapa 1: Configura√ß√£o"""
        self.log("="*60)
        self.log("üìã ETAPA 1: CONFIGURA√á√ÉO")
        self.log("="*60)
        
        if os.path.exists('.env'):
            self.log("üìÅ Arquivo .env j√° existe")
            resposta = input("Deseja reconfigurar? (s/N): ").strip().lower()
            if resposta != 's':
                self.log("‚úÖ Mantendo configura√ß√£o atual")
                return True
        
        return self.executar_script('configurar_migracao.py', 'Configura√ß√£o')
    
    def etapa_backup(self):
        """Etapa 2: Backup"""
        self.log("="*60)
        self.log("üì¶ ETAPA 2: BACKUP")
        self.log("="*60)
        
        return self.executar_script('backup_pre_migracao.py', 'Backup pr√©-migra√ß√£o')
    
    def etapa_migracao(self):
        """Etapa 3: Migra√ß√£o"""
        self.log("="*60)
        self.log("üöÄ ETAPA 3: MIGRA√á√ÉO")
        self.log("="*60)
        
        return self.executar_script('migracao_supabase_3_etapas.py', 'Migra√ß√£o em 3 etapas')
    
    def etapa_verificacao(self):
        """Etapa 4: Verifica√ß√£o"""
        self.log("="*60)
        self.log("üîç ETAPA 4: VERIFICA√á√ÉO")
        self.log("="*60)
        
        return self.executar_script('verificar_migracao.py', 'Verifica√ß√£o p√≥s-migra√ß√£o')
    
    def pausa_entre_etapas(self, etapa_atual, etapa_proxima):
        """Pausa entre etapas"""
        self.log(f"‚è∏Ô∏è Pausa entre {etapa_atual} e {etapa_proxima}")
        self.log("‚è±Ô∏è Aguardando 10 segundos...")
        time.sleep(10)
    
    def executar_migracao_completa(self):
        """Executa todo o processo de migra√ß√£o"""
        self.log("üöÄ INICIANDO MIGRA√á√ÉO COMPLETA PARA SUPABASE")
        self.log("="*60)
        
        # Verifica√ß√µes iniciais
        if not self.verificar_dependencias():
            self.log("‚ùå Falha na verifica√ß√£o de depend√™ncias")
            return False
        
        if not self.verificar_arquivos():
            self.log("‚ùå Falha na verifica√ß√£o de arquivos")
            return False
        
        # Executar etapas
        etapas = [
            ("Configura√ß√£o", self.etapa_configuracao),
            ("Backup", self.etapa_backup),
            ("Migra√ß√£o", self.etapa_migracao),
            ("Verifica√ß√£o", self.etapa_verificacao)
        ]
        
        resultados = []
        
        for i, (nome_etapa, funcao_etapa) in enumerate(etapas):
            self.log(f"\nüéØ EXECUTANDO ETAPA {i+1}/4: {nome_etapa}")
            
            resultado = funcao_etapa()
            resultados.append(resultado)
            
            if not resultado:
                self.log(f"‚ùå Falha na etapa: {nome_etapa}")
                self.log("üõë Processo interrompido")
                break
            
            if i < len(etapas) - 1:
                proxima_etapa = etapas[i+1][0]
                self.pausa_entre_etapas(nome_etapa, proxima_etapa)
        
        # Relat√≥rio final
        self.gerar_relatorio_final(resultados)
        
        return all(resultados)
    
    def gerar_relatorio_final(self, resultados):
        """Gera relat√≥rio final"""
        self.log("="*60)
        self.log("üìã RELAT√ìRIO FINAL")
        self.log("="*60)
        
        etapas_nomes = ["Configura√ß√£o", "Backup", "Migra√ß√£o", "Verifica√ß√£o"]
        
        for i, (nome, resultado) in enumerate(zip(etapas_nomes, resultados)):
            status = "‚úÖ OK" if resultado else "‚ùå FALHOU"
            self.log(f"Etapa {i+1}: {nome} - {status}")
        
        total_ok = sum(resultados)
        total_etapas = len(resultados)
        
        self.log(f"\nüìä RESUMO:")
        self.log(f"Etapas conclu√≠das: {total_ok}/{total_etapas}")
        
        if total_ok == total_etapas:
            self.log("üéâ MIGRA√á√ÉO COMPLETA CONCLU√çDA COM SUCESSO!")
            self.log("‚úÖ Sistema pronto para uso em produ√ß√£o")
        else:
            self.log("‚ö†Ô∏è MIGRA√á√ÉO PARCIALMENTE CONCLU√çDA")
            self.log("üîç Verifique os erros e execute novamente se necess√°rio")
        
        self.log(f"\nüìÅ Log completo salvo em: {self.log_file}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ EXECUTOR DE MIGRA√á√ÉO COMPLETA SUPABASE")
    print("="*60)
    
    # Aviso importante
    print("‚ö†Ô∏è ATEN√á√ÉO: Este processo ir√°:")
    print("   - Configurar conex√µes com os bancos")
    print("   - Fazer backup dos dados")
    print("   - Migrar todos os dados para o Supabase")
    print("   - Verificar a migra√ß√£o")
    print()
    print("‚è±Ô∏è Tempo estimado: 30-60 minutos")
    print()
    
    # Confirmar execu√ß√£o
    resposta = input("Deseja continuar? (s/N): ").strip().lower()
    
    if resposta != 's':
        print("‚ùå Migra√ß√£o cancelada pelo usu√°rio")
        return
    
    # Executar migra√ß√£o completa
    executor = ExecutorMigracaoCompleta()
    sucesso = executor.executar_migracao_completa()
    
    if sucesso:
        print("\nüéâ MIGRA√á√ÉO COMPLETA CONCLU√çDA!")
        print("üìã Verifique o arquivo de log para detalhes")
    else:
        print("\n‚ùå MIGRA√á√ÉO FALHOU!")
        print("üìã Verifique o arquivo de log para detalhes")

if __name__ == "__main__":
    main() 