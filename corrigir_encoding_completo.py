#!/usr/bin/env python
"""
Script para corrigir todos os problemas de encoding no sistema
"""

import os
import sys
import django
import unicodedata
import re

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import Militar, CargoFuncao, UsuarioFuncao
from django.db import transaction

def normalizar_texto(texto):
    """
    Normaliza texto removendo caracteres especiais e acentos
    """
    if not texto:
        return ""
    
    # Normalizar unicode
    texto = unicodedata.normalize('NFD', texto)
    
    # Remover acentos
    texto = ''.join(c for c in texto if not unicodedata.combining(c))
    
    return texto

def corrigir_caractere_especial(texto):
    """
    Corrige caracteres especiais comuns
    """
    if not texto:
        return texto
    
    # Mapeamento de caracteres corrompidos para corretos
    correcoes = {
        '√ü': '√°',
        '√í': '√£',
        '√æ': '√ß',
        '¬ß': '√µ',
        '√õ': '√∫',
        '√ú': '√º',
        '√ù': '√Ω',
        '√û': '√æ',
        '√†': '√†',
        '√°': '√°',
        '√¢': '√¢',
        '√£': '√£',
        '√§': '√§',
        '√•': '√•',
        '√ß': '√ß',
        '√®': '√®',
        '√©': '√©',
        '√™': '√™',
        '√´': '√´',
        '√¨': '√¨',
        '√≠': '√≠',
        '√Æ': '√Æ',
        '√Ø': '√Ø',
        '√±': '√±',
        '√≤': '√≤',
        '√≥': '√≥',
        '√¥': '√¥',
        '√µ': '√µ',
        '√∂': '√∂',
        '√π': '√π',
        '√∫': '√∫',
        '√ª': '√ª',
        '√º': '√º',
        '√Ω': '√Ω',
        '√ø': '√ø',
        '√Ä': '√Ä',
        '√Å': '√Å',
        '√Ç': '√Ç',
        '√É': '√É',
        '√Ñ': '√Ñ',
        '√á': '√á',
        '√à': '√à',
        '√â': '√â',
        '√ä': '√ä',
        '√ã': '√ã',
        '√å': '√å',
        '√ç': '√ç',
        '√é': '√é',
        '√è': '√è',
        '√ë': '√ë',
        '√í': '√í',
        '√ì': '√ì',
        '√î': '√î',
        '√ï': '√ï',
        '√ñ': '√ñ',
        '√ô': '√ô',
        '√ö': '√ö',
        '√õ': '√õ',
        '√ú': '√ú',
        '√ù': '√ù'
    }
    
    texto_corrigido = texto
    for caractere_errado, caractere_correto in correcoes.items():
        texto_corrigido = texto_corrigido.replace(caractere_errado, caractere_correto)
    
    return texto_corrigido

def corrigir_encoding_usuarios():
    """Corrige problemas de encoding nos usu√°rios"""
    print("üîß Corrigindo encoding nos usu√°rios...")
    
    usuarios_corrigidos = 0
    usuarios = User.objects.all()
    
    for usuario in usuarios:
        corrigido = False
        
        # Corrigir first_name
        if usuario.first_name:
            nome_corrigido = corrigir_caractere_especial(usuario.first_name)
            if nome_corrigido != usuario.first_name:
                usuario.first_name = nome_corrigido
                corrigido = True
        
        # Corrigir last_name
        if usuario.last_name:
            sobrenome_corrigido = corrigir_caractere_especial(usuario.last_name)
            if sobrenome_corrigido != usuario.last_name:
                usuario.last_name = sobrenome_corrigido
                corrigido = True
        
        if corrigido:
            usuario.save()
            usuarios_corrigidos += 1
    
    print(f"   ‚úÖ {usuarios_corrigidos} usu√°rios corrigidos")
    return usuarios_corrigidos

def corrigir_encoding_cargos():
    """Corrige problemas de encoding nos cargos/fun√ß√µes"""
    print("üîß Corrigindo encoding nos cargos/fun√ß√µes...")
    
    cargos_corrigidos = 0
    cargos = CargoFuncao.objects.all()
    
    for cargo in cargos:
        corrigido = False
        
        # Corrigir nome
        if cargo.nome:
            nome_corrigido = corrigir_caractere_especial(cargo.nome)
            if nome_corrigido != cargo.nome:
                cargo.nome = nome_corrigido
                corrigido = True
        
        # Corrigir descri√ß√£o
        if cargo.descricao:
            descricao_corrigida = corrigir_caractere_especial(cargo.descricao)
            if descricao_corrigida != cargo.descricao:
                cargo.descricao = descricao_corrigida
                corrigido = True
        
        if corrigido:
            cargo.save()
            cargos_corrigidos += 1
    
    print(f"   ‚úÖ {cargos_corrigidos} cargos corrigidos")
    return cargos_corrigidos

def corrigir_encoding_militares():
    """Corrige problemas de encoding nos militares"""
    print("üîß Corrigindo encoding nos militares...")
    
    militares_corrigidos = 0
    militares = Militar.objects.all()
    
    for militar in militares:
        corrigido = False
        
        # Corrigir nome_completo
        if militar.nome_completo:
            nome_corrigido = corrigir_caractere_especial(militar.nome_completo)
            if nome_corrigido != militar.nome_completo:
                militar.nome_completo = nome_corrigido
                corrigido = True
        
        # Corrigir outros campos
        campos_texto = ['posto', 'quadro', 'especialidade']
        for campo in campos_texto:
            valor = getattr(militar, campo, None)
            if valor:
                valor_corrigido = corrigir_caractere_especial(str(valor))
                if valor_corrigido != str(valor):
                    setattr(militar, campo, valor_corrigido)
                    corrigido = True
        
        if corrigido:
            militar.save()
            militares_corrigidos += 1
    
    print(f"   ‚úÖ {militares_corrigidos} militares corrigidos")
    return militares_corrigidos

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Corrigindo problemas de encoding em todo o sistema...")
    print("=" * 70)
    
    with transaction.atomic():
        # Corrigir cada modelo
        usuarios_corrigidos = corrigir_encoding_usuarios()
        cargos_corrigidos = corrigir_encoding_cargos()
        militares_corrigidos = corrigir_encoding_militares()
        
        total_corrigidos = usuarios_corrigidos + cargos_corrigidos + militares_corrigidos
        
        print("\n" + "=" * 70)
        print("üìä RESUMO DAS CORRE√á√ïES:")
        print(f"   ‚Ä¢ Usu√°rios corrigidos: {usuarios_corrigidos}")
        print(f"   ‚Ä¢ Cargos/Fun√ß√µes corrigidos: {cargos_corrigidos}")
        print(f"   ‚Ä¢ Militares corrigidos: {militares_corrigidos}")
        print(f"   ‚Ä¢ TOTAL: {total_corrigidos} registros corrigidos")
        
        if total_corrigidos > 0:
            print("\n‚úÖ Corre√ß√µes aplicadas com sucesso!")
        else:
            print("\n‚úÖ Nenhuma corre√ß√£o necess√°ria!")
    
    # Verifica√ß√£o final
    print("\nüîç Executando verifica√ß√£o final...")
    os.system("python verificar_encoding_sistema.py")

if __name__ == '__main__':
    main() 