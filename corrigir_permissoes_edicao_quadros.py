#!/usr/bin/env python
"""
Script para corrigir permiss√µes de edi√ß√£o dos quadros de fixa√ß√£o de vagas.
Membros das comiss√µes devem apenas visualizar, n√£o editar.
"""

import re

def corrigir_permissoes_quadros():
    """Corrige as permiss√µes nos templates dos quadros de fixa√ß√£o de vagas"""
    
    arquivos_para_corrigir = [
        'militares/templates/militares/quadro_fixacao_vagas/list.html',
        'militares/templates/militares/quadro_fixacao_vagas/detail.html'
    ]
    
    for arquivo in arquivos_para_corrigir:
        try:
            with open(arquivo, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Verificar se j√° tem verifica√ß√£o de permiss√£o
            if 'user.is_staff' in content:
                print(f"‚úÖ {arquivo} - J√° tem verifica√ß√£o de permiss√£o (user.is_staff)")
                continue
            
            # Corrigir list.html
            if 'list.html' in arquivo:
                # Padr√£o para encontrar bot√µes de edi√ß√£o/exclus√£o
                pattern = r'(\s*)(<a href="{% url \'militares:quadro_fixacao_vagas_update\' quadro\.pk %}"[^>]*>.*?</a>)(\s*)(<a href="{% url \'militares:quadro_fixacao_vagas_delete\' quadro\.pk %}"[^>]*>.*?</a>)'
                
                if re.search(pattern, content, re.DOTALL):
                    # Adicionar verifica√ß√£o de permiss√£o
                    new_content = re.sub(
                        pattern,
                        r'\1{% if user.is_staff %}\2\3\4{% endif %}',
                        content,
                        flags=re.DOTALL
                    )
                    
                    # Tamb√©m corrigir bot√£o de assinatura
                    pattern_assinatura = r'(\s*)(<a href="{% url \'militares:quadro_fixacao_vagas_visualizar_html\' quadro\.pk %}"[^>]*title="Assinar eletronicamente"[^>]*>.*?</a>)'
                    new_content = re.sub(
                        pattern_assinatura,
                        r'\1{% if user.is_staff %}\2{% endif %}',
                        new_content,
                        flags=re.DOTALL
                    )
                    
                    # Corrigir bot√£o "Criar Primeiro Quadro"
                    pattern_criar = r'(\s*)(<a href="{% url \'militares:quadro_fixacao_vagas_create\' %}"[^>]*>.*?</a>)'
                    new_content = re.sub(
                        pattern_criar,
                        r'\1{% if user.is_staff %}\2{% endif %}',
                        new_content,
                        flags=re.DOTALL
                    )
                    
                    with open(arquivo, 'w', encoding='utf-8') as f:
                        f.write(new_content)
                    
                    print(f"‚úÖ {arquivo} - Permiss√µes corrigidas")
                else:
                    print(f"‚ö†Ô∏è  {arquivo} - Padr√£o n√£o encontrado")
            
            # Corrigir detail.html
            elif 'detail.html' in arquivo:
                # Padr√£o para encontrar bot√µes de edi√ß√£o
                pattern = r'(\s*)(<a href="{% url \'militares:quadro_fixacao_vagas_update\' quadro\.pk %}"[^>]*>.*?</a>)'
                
                if re.search(pattern, content, re.DOTALL):
                    # Adicionar verifica√ß√£o de permiss√£o
                    new_content = re.sub(
                        pattern,
                        r'\1{% if user.is_staff %}\2{% endif %}',
                        content,
                        flags=re.DOTALL
                    )
                    
                    with open(arquivo, 'w', encoding='utf-8') as f:
                        f.write(new_content)
                    
                    print(f"‚úÖ {arquivo} - Permiss√µes corrigidas")
                else:
                    print(f"‚ö†Ô∏è  {arquivo} - Padr√£o n√£o encontrado")
                    
        except Exception as e:
            print(f"‚ùå Erro ao processar {arquivo}: {e}")

def verificar_permissoes_views():
    """Verifica se as views t√™m verifica√ß√£o de permiss√£o adequada"""
    
    print("\nüîç Verificando permiss√µes nas views...")
    
    # Verificar se as views de edi√ß√£o t√™m verifica√ß√£o de permiss√£o
    views_para_verificar = [
        'quadro_fixacao_vagas_update',
        'quadro_fixacao_vagas_delete',
        'quadro_fixacao_vagas_create'
    ]
    
    try:
        with open('militares/views.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        for view in views_para_verificar:
            # Procurar pela defini√ß√£o da view
            pattern = rf'def {view}\(request, pk\):'
            if re.search(pattern, content):
                print(f"‚úÖ View {view} encontrada")
                
                # Verificar se tem verifica√ß√£o de permiss√£o
                if 'user.is_staff' in content or 'request.user.is_staff' in content:
                    print(f"   ‚úÖ J√° tem verifica√ß√£o de permiss√£o")
                else:
                    print(f"   ‚ö†Ô∏è  N√ÉO tem verifica√ß√£o de permiss√£o")
            else:
                print(f"‚ùå View {view} n√£o encontrada")
                
    except Exception as e:
        print(f"‚ùå Erro ao verificar views: {e}")

def main():
    print("üîß Corrigindo permiss√µes dos quadros de fixa√ß√£o de vagas...")
    print("=" * 60)
    
    # Corrigir templates
    corrigir_permissoes_quadros()
    
    # Verificar views
    verificar_permissoes_views()
    
    print("\n" + "=" * 60)
    print("üí° RESUMO:")
    print("   - Membros das comiss√µes: APENAS visualiza√ß√£o")
    print("   - Staff/Admin: Visualiza√ß√£o + Edi√ß√£o")
    print("   - Bot√µes de edi√ß√£o/exclus√£o: Apenas para staff")
    print("   - Bot√µes de visualiza√ß√£o: Para todos os membros")

if __name__ == "__main__":
    main() 