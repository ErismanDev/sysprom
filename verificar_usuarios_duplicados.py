#!/usr/bin/env python
"""
Script para verificar usu√°rios duplicados e n√£o vinculados aos militares
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import Militar

def verificar_usuarios_duplicados():
    """Verifica usu√°rios duplicados e n√£o vinculados"""
    print("üîç Verificando usu√°rios duplicados e n√£o vinculados...")
    print("=" * 70)
    
    # Buscar todos os usu√°rios
    todos_usuarios = User.objects.all()
    usuarios_com_militar = User.objects.filter(militar__isnull=False)
    usuarios_sem_militar = User.objects.filter(militar__isnull=True)
    
    print(f"üìä Estat√≠sticas gerais:")
    print(f"   ‚Ä¢ Total de usu√°rios: {todos_usuarios.count()}")
    print(f"   ‚Ä¢ Usu√°rios com militar vinculado: {usuarios_com_militar.count()}")
    print(f"   ‚Ä¢ Usu√°rios sem militar vinculado: {usuarios_sem_militar.count()}")
    
    # Verificar se h√° CPFs duplicados
    print(f"\nüîç Verificando CPFs duplicados...")
    
    # Buscar usu√°rios por CPF (username)
    cpfs_unicos = set()
    cpfs_duplicados = {}
    
    for usuario in todos_usuarios:
        cpf = usuario.username
        if cpf in cpfs_unicos:
            if cpf not in cpfs_duplicados:
                cpfs_duplicados[cpf] = []
            cpfs_duplicados[cpf].append(usuario)
        else:
            cpfs_unicos.add(cpf)
    
    print(f"   ‚Ä¢ CPFs √∫nicos: {len(cpfs_unicos)}")
    print(f"   ‚Ä¢ CPFs duplicados: {len(cpfs_duplicados)}")
    
    if cpfs_duplicados:
        print(f"\nüìã CPFs com usu√°rios duplicados:")
        for cpf, usuarios in cpfs_duplicados.items():
            print(f"   ‚Ä¢ CPF: {cpf}")
            for i, usuario in enumerate(usuarios):
                tem_militar = "‚úÖ Com militar" if hasattr(usuario, 'militar') and usuario.militar else "‚ùå Sem militar"
                print(f"     {i+1}. ID: {usuario.id} | Nome: {usuario.get_full_name()} | {tem_militar}")
    
    # Verificar usu√°rios sem militar
    print(f"\nüìã Usu√°rios sem militar vinculado:")
    for usuario in usuarios_sem_militar:
        print(f"   ‚Ä¢ ID: {usuario.id} | Username: {usuario.username} | Nome: {usuario.get_full_name()}")
    
    return {
        'total_usuarios': todos_usuarios.count(),
        'usuarios_com_militar': usuarios_com_militar.count(),
        'usuarios_sem_militar': usuarios_sem_militar.count(),
        'cpfs_duplicados': cpfs_duplicados
    }

def main():
    """Fun√ß√£o principal"""
    resultado = verificar_usuarios_duplicados()
    
    print(f"\n" + "=" * 70)
    print(f"üìä RESUMO:")
    print(f"   ‚Ä¢ Total de usu√°rios: {resultado['total_usuarios']}")
    print(f"   ‚Ä¢ Usu√°rios com militar: {resultado['usuarios_com_militar']}")
    print(f"   ‚Ä¢ Usu√°rios sem militar: {resultado['usuarios_sem_militar']}")
    print(f"   ‚Ä¢ CPFs duplicados: {len(resultado['cpfs_duplicados'])}")
    
    if resultado['usuarios_sem_militar'] > 0:
        print(f"\n‚ö†Ô∏è  Existem {resultado['usuarios_sem_militar']} usu√°rios sem militar vinculado!")
        print(f"üí° Recomenda√ß√£o: Remover usu√°rios n√£o vinculados")
    else:
        print(f"\n‚úÖ Todos os usu√°rios est√£o vinculados a militares!")

if __name__ == '__main__':
    main() 