#!/usr/bin/env python
"""
Script para implementar troca autom√°tica de fun√ß√£o
Quando um usu√°rio receber uma nova fun√ß√£o, a fun√ß√£o antiga de "Usu√°rio" ser√° automaticamente desativada
"""

import os
import sys
import django

# Configurar o Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.db import transaction
from django.contrib.auth.models import User
from militares.models import UsuarioFuncao, CargoFuncao

def implementar_troca_automatica_funcao():
    """Implementa a funcionalidade de troca autom√°tica de fun√ß√£o"""
    
    print("üîÑ IMPLEMENTANDO TROCA AUTOM√ÅTICA DE FUN√á√ÉO")
    print("=" * 60)
    
    # 1. Verificar se existe o cargo "Usu√°rio"
    try:
        cargo_usuario = CargoFuncao.objects.get(nome='Usu√°rio')
        print(f"‚úÖ Cargo 'Usu√°rio' encontrado: ID {cargo_usuario.id}")
    except CargoFuncao.DoesNotExist:
        print("‚ùå Cargo 'Usu√°rio' n√£o encontrado. Criando...")
        cargo_usuario = CargoFuncao.objects.create(
            nome='Usu√°rio',
            descricao='Fun√ß√£o padr√£o para usu√°rios do sistema',
            ativo=True,
            ordem=999
        )
        print(f"‚úÖ Cargo 'Usu√°rio' criado: ID {cargo_usuario.id}")
    
    # 2. Verificar usu√°rios com fun√ß√£o "Usu√°rio"
    usuarios_com_funcao_padrao = UsuarioFuncao.objects.filter(
        cargo_funcao=cargo_usuario,
        status='ATIVO'
    ).select_related('usuario')
    
    print(f"\nüìã USU√ÅRIOS COM FUN√á√ÉO 'USU√ÅRIO': {usuarios_com_funcao_padrao.count()}")
    
    for uf in usuarios_com_funcao_padrao:
        print(f"  - {uf.usuario.username}")
    
    # 3. Verificar usu√°rios que t√™m outras fun√ß√µes al√©m de "Usu√°rio"
    usuarios_com_multiplas_funcoes = []
    
    for uf in usuarios_com_funcao_padrao:
        outras_funcoes = UsuarioFuncao.objects.filter(
            usuario=uf.usuario,
            status='ATIVO'
        ).exclude(cargo_funcao=cargo_usuario)
        
        if outras_funcoes.exists():
            usuarios_com_multiplas_funcoes.append({
                'usuario': uf.usuario,
                'funcao_usuario': uf,
                'outras_funcoes': outras_funcoes
            })
    
    print(f"\nüîÑ USU√ÅRIOS COM M√öLTIPLAS FUN√á√ïES: {len(usuarios_com_multiplas_funcoes)}")
    
    # 4. Aplicar a l√≥gica de troca autom√°tica
    with transaction.atomic():
        for item in usuarios_com_multiplas_funcoes:
            usuario = item['usuario']
            funcao_usuario = item['funcao_usuario']
            outras_funcoes = item['outras_funcoes']
            
            print(f"\nüîÑ Processando usu√°rio: {usuario.username}")
            print(f"   Fun√ß√£o 'Usu√°rio': {funcao_usuario.id}")
            print(f"   Outras fun√ß√µes ativas: {outras_funcoes.count()}")
            
            # Desativar a fun√ß√£o "Usu√°rio"
            funcao_usuario.status = 'INATIVO'
            funcao_usuario.data_fim = django.utils.timezone.now().date()
            funcao_usuario.observacoes = f"Desativada automaticamente - usu√°rio possui outras fun√ß√µes: {', '.join([f.nome for f in outras_funcoes])}"
            funcao_usuario.save()
            
            print(f"   ‚úÖ Fun√ß√£o 'Usu√°rio' desativada")
    
    print(f"\n‚úÖ Processo conclu√≠do!")
    print(f"   - {len(usuarios_com_multiplas_funcoes)} usu√°rios tiveram fun√ß√£o 'Usu√°rio' desativada")

def criar_signal_troca_automatica():
    """Cria um signal para aplicar a troca autom√°tica sempre que uma nova fun√ß√£o for criada"""
    
    print(f"\nüîß CRIANDO SIGNAL PARA TROCA AUTOM√ÅTICA")
    print("=" * 60)
    
    # Criar arquivo de signals espec√≠fico
    signal_content = '''#!/usr/bin/env python
"""
Signal para troca autom√°tica de fun√ß√£o
Quando um usu√°rio receber uma nova fun√ß√£o, a fun√ß√£o antiga de "Usu√°rio" ser√° automaticamente desativada
"""

from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils import timezone
from .models import UsuarioFuncao, CargoFuncao

@receiver(post_save, sender=UsuarioFuncao)
def trocar_funcao_automaticamente(sender, instance, created, **kwargs):
    """
    Signal que desativa automaticamente a fun√ß√£o "Usu√°rio" quando o usu√°rio receber outras fun√ß√µes
    """
    if not created:  # S√≥ executar quando uma nova fun√ß√£o for criada
        return
    
    # Verificar se a nova fun√ß√£o n√£o √© "Usu√°rio"
    if instance.cargo_funcao.nome == 'Usu√°rio':
        return
    
    # Verificar se o usu√°rio tem fun√ß√£o "Usu√°rio" ativa
    try:
        cargo_usuario = CargoFuncao.objects.get(nome='Usu√°rio')
        funcao_usuario = UsuarioFuncao.objects.filter(
            usuario=instance.usuario,
            cargo_funcao=cargo_usuario,
            status='ATIVO'
        ).first()
        
        if funcao_usuario:
            # Desativar a fun√ß√£o "Usu√°rio"
            funcao_usuario.status = 'INATIVO'
            funcao_usuario.data_fim = timezone.now().date()
            funcao_usuario.observacoes = f"Desativada automaticamente - usu√°rio recebeu fun√ß√£o: {instance.cargo_funcao.nome}"
            funcao_usuario.save()
            
            print(f"üîÑ Fun√ß√£o 'Usu√°rio' desativada automaticamente para {instance.usuario.username}")
    
    except CargoFuncao.DoesNotExist:
        # Se n√£o existe cargo "Usu√°rio", n√£o fazer nada
        pass

@receiver(post_save, sender=UsuarioFuncao)
def reativar_funcao_usuario_quando_necessario(sender, instance, created, **kwargs):
    """
    Signal que reativa a fun√ß√£o "Usu√°rio" quando o usu√°rio n√£o tem mais outras fun√ß√µes ativas
    """
    if created:  # S√≥ executar quando uma fun√ß√£o for criada
        return
    
    # Verificar se a fun√ß√£o foi desativada
    if instance.status == 'INATIVO':
        # Verificar se o usu√°rio ainda tem outras fun√ß√µes ativas
        outras_funcoes_ativas = UsuarioFuncao.objects.filter(
            usuario=instance.usuario,
            status='ATIVO'
        ).exists()
        
        if not outras_funcoes_ativas:
            # Se n√£o tem outras fun√ß√µes ativas, reativar fun√ß√£o "Usu√°rio"
            try:
                cargo_usuario = CargoFuncao.objects.get(nome='Usu√°rio')
                funcao_usuario, created = UsuarioFuncao.objects.get_or_create(
                    usuario=instance.usuario,
                    cargo_funcao=cargo_usuario,
                    defaults={
                        'tipo_funcao': 'OUTROS',
                        'status': 'ATIVO',
                        'data_inicio': timezone.now().date(),
                        'observacoes': 'Reativada automaticamente - usu√°rio n√£o possui outras fun√ß√µes'
                    }
                )
                
                if not created:
                    # Se j√° existia, reativar
                    funcao_usuario.status = 'ATIVO'
                    funcao_usuario.data_fim = None
                    funcao_usuario.observacoes = 'Reativada automaticamente - usu√°rio n√£o possui outras fun√ß√µes'
                    funcao_usuario.save()
                
                print(f"üîÑ Fun√ß√£o 'Usu√°rio' reativada automaticamente para {instance.usuario.username}")
            
            except CargoFuncao.DoesNotExist:
                # Se n√£o existe cargo "Usu√°rio", n√£o fazer nada
                pass
'''
    
    # Salvar o arquivo de signals
    with open('militares/signals_troca_funcao.py', 'w', encoding='utf-8') as f:
        f.write(signal_content)
    
    print("‚úÖ Arquivo signals_troca_funcao.py criado")
    
    # Atualizar o arquivo __init__.py para importar os signals
    init_content = '''# Importar signals para troca autom√°tica de fun√ß√£o
from . import signals_troca_funcao
'''
    
    with open('militares/__init__.py', 'a', encoding='utf-8') as f:
        f.write(init_content)
    
    print("‚úÖ Signals importados no __init__.py")

def testar_troca_automatica():
    """Testa a funcionalidade de troca autom√°tica"""
    
    print(f"\nüß™ TESTANDO TROCA AUTOM√ÅTICA")
    print("=" * 60)
    
    # Simular cria√ß√£o de uma nova fun√ß√£o para um usu√°rio
    try:
        # Pegar um usu√°rio que tem fun√ß√£o "Usu√°rio"
        cargo_usuario = CargoFuncao.objects.get(nome='Usu√°rio')
        funcao_usuario = UsuarioFuncao.objects.filter(
            cargo_funcao=cargo_usuario,
            status='ATIVO'
        ).first()
        
        if funcao_usuario:
            usuario = funcao_usuario.usuario
            print(f"Testando com usu√°rio: {usuario.username}")
            
            # Verificar se tem outras fun√ß√µes
            outras_funcoes = UsuarioFuncao.objects.filter(
                usuario=usuario,
                status='ATIVO'
            ).exclude(cargo_funcao=cargo_usuario)
            
            if outras_funcoes.exists():
                print(f"Usu√°rio j√° tem outras fun√ß√µes: {[f.cargo_funcao.nome for f in outras_funcoes]}")
                print("Aplicando l√≥gica de troca autom√°tica...")
                
                # Desativar fun√ß√£o "Usu√°rio"
                funcao_usuario.status = 'INATIVO'
                funcao_usuario.data_fim = django.utils.timezone.now().date()
                funcao_usuario.observacoes = "Teste - fun√ß√£o desativada automaticamente"
                funcao_usuario.save()
                
                print("‚úÖ Fun√ß√£o 'Usu√°rio' desativada no teste")
            else:
                print("Usu√°rio n√£o tem outras fun√ß√µes. Criando uma fun√ß√£o de teste...")
                
                # Criar uma fun√ß√£o de teste
                cargo_teste = CargoFuncao.objects.filter(nome__icontains='Administrador').first()
                if cargo_teste:
                    nova_funcao = UsuarioFuncao.objects.create(
                        usuario=usuario,
                        cargo_funcao=cargo_teste,
                        tipo_funcao='ADMINISTRATIVO',
                        status='ATIVO',
                        data_inicio=django.utils.timezone.now().date(),
                        observacoes='Fun√ß√£o criada para teste de troca autom√°tica'
                    )
                    
                    print(f"‚úÖ Nova fun√ß√£o criada: {nova_funcao.cargo_funcao.nome}")
                    print("Agora a fun√ß√£o 'Usu√°rio' deve ser desativada automaticamente")
                else:
                    print("‚ùå N√£o foi poss√≠vel encontrar um cargo para teste")
        else:
            print("‚ùå N√£o foi poss√≠vel encontrar um usu√°rio com fun√ß√£o 'Usu√°rio' para teste")
    
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")

if __name__ == '__main__':
    print("Escolha uma op√ß√£o:")
    print("1. Implementar troca autom√°tica de fun√ß√£o")
    print("2. Criar signal para troca autom√°tica")
    print("3. Testar troca autom√°tica")
    print("4. Executar tudo")
    
    opcao = input("Op√ß√£o (1-4): ").strip()
    
    if opcao == "1":
        implementar_troca_automatica_funcao()
    elif opcao == "2":
        criar_signal_troca_automatica()
    elif opcao == "3":
        testar_troca_automatica()
    elif opcao == "4":
        implementar_troca_automatica_funcao()
        criar_signal_troca_automatica()
        testar_troca_automatica()
    else:
        print("‚ùå Op√ß√£o inv√°lida!") 