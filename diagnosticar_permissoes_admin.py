#!/usr/bin/env python
"""
Script para diagnosticar problemas de permiss√µes do administrador
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User, Permission
from militares.models import UsuarioFuncao, CargoFuncao, PermissaoFuncao

def diagnosticar_permissoes_admin():
    """Diagnostica problemas de permiss√µes do administrador"""
    
    print("üîç DIAGN√ìSTICO DE PERMISS√ïES DO ADMINISTRADOR")
    print("=" * 60)
    
    # 1. Verificar usu√°rio admin
    try:
        admin_user = User.objects.get(username='admin')
        print(f"‚úÖ Usu√°rio admin encontrado: {admin_user.get_full_name()}")
        print(f"   Superusu√°rio: {admin_user.is_superuser}")
        print(f"   Staff: {admin_user.is_staff}")
        print(f"   Ativo: {admin_user.is_active}")
    except User.DoesNotExist:
        print("‚ùå Usu√°rio 'admin' n√£o encontrado!")
        return
    
    # 2. Verificar fun√ß√µes do admin
    print(f"\nüìã FUN√á√ïES DO ADMIN:")
    funcoes_admin = UsuarioFuncao.objects.filter(
        usuario=admin_user,
        status='ATIVO'
    ).select_related('cargo_funcao')
    
    if funcoes_admin.exists():
        for funcao in funcoes_admin:
            print(f"   ‚úÖ {funcao.cargo_funcao.nome} ({funcao.get_tipo_funcao_display()})")
            
            # Verificar permiss√µes desta fun√ß√£o
            permissoes_funcao = PermissaoFuncao.objects.filter(
                cargo_funcao=funcao.cargo_funcao,
                ativo=True
            )
            print(f"      Permiss√µes: {permissoes_funcao.count()}")
            
            # Mostrar algumas permiss√µes
            for perm in permissoes_funcao[:5]:
                print(f"        - {perm.modulo}: {perm.acesso}")
            if permissoes_funcao.count() > 5:
                print(f"        ... e mais {permissoes_funcao.count() - 5} permiss√µes")
    else:
        print("   ‚ùå Nenhuma fun√ß√£o ativa encontrada!")
    
    # 3. Verificar permiss√µes Django diretas
    print(f"\nüîë PERMISS√ïES DJANGO DIRETAS:")
    permissoes_django = admin_user.user_permissions.all()
    grupos = admin_user.groups.all()
    
    print(f"   Permiss√µes diretas: {permissoes_django.count()}")
    print(f"   Grupos: {grupos.count()}")
    
    for grupo in grupos:
        print(f"     - {grupo.name}")
        permissoes_grupo = grupo.permissions.all()
        print(f"       Permiss√µes do grupo: {permissoes_grupo.count()}")
    
    # 4. Verificar cargos dispon√≠veis
    print(f"\nüë• CARGOS DISPON√çVEIS:")
    cargos = CargoFuncao.objects.all().order_by('id')
    
    for cargo in cargos:
        perms_count = PermissaoFuncao.objects.filter(cargo_funcao=cargo).count()
        print(f"   {cargo.id:2d}: {cargo.nome:<30} ({perms_count:3d} permiss√µes)")
    
    # 5. Verificar se o admin tem fun√ß√£o de administrador
    print(f"\nüéØ VERIFICA√á√ÉO ESPEC√çFICA:")
    
    # Verificar se tem fun√ß√£o de administrador
    funcao_admin = funcoes_admin.filter(
        cargo_funcao__nome__icontains='administrador'
    ).first()
    
    if funcao_admin:
        print(f"   ‚úÖ Tem fun√ß√£o de administrador: {funcao_admin.cargo_funcao.nome}")
        
        # Verificar permiss√µes CRUD
        permissoes_crud = PermissaoFuncao.objects.filter(
            cargo_funcao=funcao_admin.cargo_funcao,
            acesso__in=['CRIAR', 'EDITAR', 'EXCLUIR'],
            ativo=True
        )
        
        print(f"   Permiss√µes CRUD: {permissoes_crud.count()}")
        
        # Verificar por m√≥dulo
        modulos_crud = {}
        for perm in permissoes_crud:
            if perm.modulo not in modulos_crud:
                modulos_crud[perm.modulo] = []
            modulos_crud[perm.modulo].append(perm.acesso)
        
        for modulo, acessos in modulos_crud.items():
            print(f"     {modulo}: {', '.join(acessos)}")
            
    else:
        print("   ‚ùå N√ÉO tem fun√ß√£o de administrador!")
        print("   üí° SOLU√á√ÉO: Adicionar fun√ß√£o de administrador ao usu√°rio")
    
    # 6. Verificar se o sistema est√° usando o decorator correto
    print(f"\nüîß VERIFICA√á√ÉO DO SISTEMA:")
    
    # Verificar se existe fun√ß√£o de administrador
    cargo_admin = CargoFuncao.objects.filter(
        nome__icontains='administrador'
    ).first()
    
    if cargo_admin:
        print(f"   ‚úÖ Cargo de administrador existe: {cargo_admin.nome}")
        
        # Verificar se tem todas as permiss√µes
        todas_permissoes = PermissaoFuncao.objects.filter(cargo_funcao=cargo_admin)
        print(f"   Total de permiss√µes: {todas_permissoes.count()}")
        
        # Verificar se tem permiss√µes CRUD em todos os m√≥dulos
        modulos = [choice[0] for choice in PermissaoFuncao.MODULOS_CHOICES]
        acessos_crud = ['CRIAR', 'EDITAR', 'EXCLUIR']
        
        modulos_faltando = []
        for modulo in modulos:
            for acesso in acessos_crud:
                if not PermissaoFuncao.objects.filter(
                    cargo_funcao=cargo_admin,
                    modulo=modulo,
                    acesso=acesso,
                    ativo=True
                ).exists():
                    modulos_faltando.append(f"{modulo}:{acesso}")
        
        if modulos_faltando:
            print(f"   ‚ö†Ô∏è Permiss√µes faltando: {len(modulos_faltando)}")
            for perm in modulos_faltando[:10]:
                print(f"     - {perm}")
            if len(modulos_faltando) > 10:
                print(f"     ... e mais {len(modulos_faltando) - 10}")
        else:
            print("   ‚úÖ Todas as permiss√µes CRUD est√£o configuradas")
            
    else:
        print("   ‚ùå Cargo de administrador n√£o existe!")
        print("   üí° SOLU√á√ÉO: Criar cargo de administrador")
    
    # 7. Recomenda√ß√µes
    print(f"\nüí° RECOMENDA√á√ïES:")
    
    if not funcao_admin:
        print("   1. Adicionar fun√ß√£o de administrador ao usu√°rio admin")
        print("   2. Executar: python gerenciar_rapido.py")
        print("   3. Usar comando: 'cargo 1' (assumindo que ID 1 √© administrador)")
    
    if cargo_admin and modulos_faltando:
        print("   1. Adicionar permiss√µes faltantes ao cargo de administrador")
        print("   2. Executar: python gerenciar_rapido.py")
        print(f"   3. Usar comando: 'cargo {cargo_admin.id}'")
    
    if not cargo_admin:
        print("   1. Criar cargo de administrador")
        print("   2. Configurar todas as permiss√µes")
        print("   3. Atribuir ao usu√°rio admin")

def corrigir_permissoes_admin():
    """Corrige automaticamente as permiss√µes do administrador"""
    
    print("\nüîß CORRIGINDO PERMISS√ïES DO ADMINISTRADOR")
    print("=" * 60)
    
    # 1. Verificar/criar cargo de administrador
    cargo_admin, created = CargoFuncao.objects.get_or_create(
        nome='Administrador',
        defaults={
            'descricao': 'Administrador do sistema com acesso total',
            'ativo': True
        }
    )
    
    if created:
        print(f"‚úÖ Cargo 'Administrador' criado (ID: {cargo_admin.id})")
    else:
        print(f"‚ÑπÔ∏è Cargo 'Administrador' j√° existe (ID: {cargo_admin.id})")
    
    # 2. Adicionar todas as permiss√µes ao cargo
    modulos = [choice[0] for choice in PermissaoFuncao.MODULOS_CHOICES]
    acessos = [choice[0] for choice in PermissaoFuncao.ACESSOS_CHOICES]
    
    total_permissoes = 0
    for modulo in modulos:
        for acesso in acessos:
            permissao, created = PermissaoFuncao.objects.get_or_create(
                cargo_funcao=cargo_admin,
                modulo=modulo,
                acesso=acesso,
                defaults={'ativo': True}
            )
            if created:
                total_permissoes += 1
    
    print(f"‚úÖ {total_permissoes} permiss√µes adicionadas ao cargo")
    
    # 3. Verificar/criar fun√ß√£o do usu√°rio admin
    try:
        admin_user = User.objects.get(username='admin')
        
        funcao_admin, created = UsuarioFuncao.objects.get_or_create(
            usuario=admin_user,
            cargo_funcao=cargo_admin,
            defaults={
                'tipo_funcao': 'EFETIVA',
                'status': 'ATIVO',
                'data_inicio': '2024-01-01'
            }
        )
        
        if created:
            print(f"‚úÖ Fun√ß√£o de administrador atribu√≠da ao usu√°rio admin")
        else:
            print(f"‚ÑπÔ∏è Fun√ß√£o de administrador j√° existe para o usu√°rio admin")
            
    except User.DoesNotExist:
        print("‚ùå Usu√°rio 'admin' n√£o encontrado!")
        return
    
    # 4. Verificar resultado
    permissoes_finais = PermissaoFuncao.objects.filter(cargo_funcao=cargo_admin).count()
    print(f"\n‚úÖ CORRE√á√ÉO CONCLU√çDA!")
    print(f"   Total de permiss√µes do administrador: {permissoes_finais}")

if __name__ == "__main__":
    print("Escolha uma op√ß√£o:")
    print("1. Diagnosticar permiss√µes")
    print("2. Corrigir permiss√µes automaticamente")
    
    opcao = input("Op√ß√£o (1-2): ").strip()
    
    if opcao == "1":
        diagnosticar_permissoes_admin()
    elif opcao == "2":
        corrigir_permissoes_admin()
    else:
        print("‚ùå Op√ß√£o inv√°lida!") 