#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
VERIFICA√á√ÉO FINAL DA MIGRA√á√ÉO
============================

Script para verificar se a migra√ß√£o foi conclu√≠da com sucesso.

Autor: Sistema de Promo√ß√µes CBMEPI
Data: 30/07/2025
"""

import psycopg2
from datetime import datetime

# Configura√ß√µes do Supabase
SUPABASE_CONFIG = {
    'host': 'aws-0-sa-east-1.pooler.supabase.com',
    'database': 'postgres',
    'user': 'postgres.vubnekyyfjcrswaufnla',
    'password': '2YXGdmXESoZAoPkO',
    'port': '6543'
}

def verificar_migracao():
    """Verifica se a migra√ß√£o foi conclu√≠da com sucesso"""
    print("üîç VERIFICA√á√ÉO FINAL DA MIGRA√á√ÉO")
    print("=" * 60)
    
    try:
        # Conectar ao Supabase
        conn = psycopg2.connect(**SUPABASE_CONFIG)
        cursor = conn.cursor()
        
        print("‚úÖ Conectado ao Supabase")
        
        # Verificar contagem de registros nas tabelas principais
        tabelas_principais = [
            'auth_user',
            'militares_militar',
            'militares_comissaopromocao',
            'militares_membrocomissao',
            'militares_quadroacesso',
            'militares_calendariopromocao'
        ]
        
        print(f"\nüìä CONTAGEM DE REGISTROS:")
        print("-" * 40)
        
        total_geral = 0
        for tabela in tabelas_principais:
            cursor.execute(f"SELECT COUNT(*) FROM {tabela}")
            count = cursor.fetchone()[0]
            print(f"‚úÖ {tabela}: {count:,} registros")
            total_geral += count
        
        print(f"\nüìà TOTAL GERAL: {total_geral:,} registros")
        
        # Verificar associa√ß√µes usu√°rio-militar
        print(f"\nüîó VERIFICA√á√ÉO DE ASSOCIA√á√ïES:")
        print("-" * 40)
        
        cursor.execute("""
            SELECT COUNT(*) FROM militares_militar 
            WHERE user_id IS NOT NULL
        """)
        militares_com_usuario = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM militares_militar")
        total_militares = cursor.fetchone()[0]
        
        print(f"‚úÖ Militares com usu√°rio associado: {militares_com_usuario:,}")
        print(f"‚úÖ Total de militares: {total_militares:,}")
        print(f"‚úÖ Taxa de associa√ß√£o: {(militares_com_usuario/total_militares*100):.1f}%")
        
        # Verificar usu√°rios ativos
        cursor.execute("""
            SELECT COUNT(*) FROM auth_user 
            WHERE is_active = true
        """)
        usuarios_ativos = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM auth_user")
        total_usuarios = cursor.fetchone()[0]
        
        print(f"\nüë• USU√ÅRIOS:")
        print(f"‚úÖ Usu√°rios ativos: {usuarios_ativos:,}")
        print(f"‚úÖ Total de usu√°rios: {total_usuarios:,}")
        print(f"‚úÖ Taxa de usu√°rios ativos: {(usuarios_ativos/total_usuarios*100):.1f}%")
        
        # Verificar comiss√µes
        cursor.execute("""
            SELECT COUNT(*) FROM militares_comissaopromocao 
            WHERE status = 'ATIVA'
        """)
        comissoes_ativas = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM militares_comissaopromocao")
        total_comissoes = cursor.fetchone()[0]
        
        print(f"\nüèõÔ∏è COMISS√ïES:")
        print(f"‚úÖ Comiss√µes ativas: {comissoes_ativas:,}")
        print(f"‚úÖ Total de comiss√µes: {total_comissoes:,}")
        
        # Verificar membros de comiss√£o
        cursor.execute("""
            SELECT COUNT(*) FROM militares_membrocomissao 
            WHERE ativo = true
        """)
        membros_ativos = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM militares_membrocomissao")
        total_membros = cursor.fetchone()[0]
        
        print(f"\nüë§ MEMBROS DE COMISS√ÉO:")
        print(f"‚úÖ Membros ativos: {membros_ativos:,}")
        print(f"‚úÖ Total de membros: {total_membros:,}")
        
        # Verificar quadros de acesso
        cursor.execute("""
            SELECT COUNT(*) FROM militares_quadroacesso 
            WHERE ativo = true
        """)
        quadros_ativos = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM militares_quadroacesso")
        total_quadros = cursor.fetchone()[0]
        
        print(f"\nüìã QUADROS DE ACESSO:")
        print(f"‚úÖ Quadros ativos: {quadros_ativos:,}")
        print(f"‚úÖ Total de quadros: {total_quadros:,}")
        
        # Verificar calend√°rios de promo√ß√£o
        cursor.execute("""
            SELECT COUNT(*) FROM militares_calendariopromocao 
            WHERE ativo = true
        """)
        calendarios_ativos = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM militares_calendariopromocao")
        total_calendarios = cursor.fetchone()[0]
        
        print(f"\nüìÖ CALEND√ÅRIOS DE PROMO√á√ÉO:")
        print(f"‚úÖ Calend√°rios ativos: {calendarios_ativos:,}")
        print(f"‚úÖ Total de calend√°rios: {total_calendarios:,}")
        
        # Verificar integridade das sequ√™ncias
        print(f"\nüîÑ VERIFICA√á√ÉO DE SEQU√äNCIAS:")
        print("-" * 40)
        
        for tabela in tabelas_principais:
            try:
                cursor.execute(f"SELECT setval('{tabela}_id_seq', (SELECT COALESCE(MAX(id), 1) FROM {tabela}));")
                cursor.execute(f"SELECT currval('{tabela}_id_seq');")
                seq_value = cursor.fetchone()[0]
                print(f"‚úÖ {tabela}_id_seq: {seq_value}")
            except Exception as e:
                print(f"‚ö†Ô∏è {tabela}_id_seq: Erro - {e}")
        
        cursor.close()
        conn.close()
        
        print("\n" + "=" * 60)
        print("‚úÖ VERIFICA√á√ÉO FINAL CONCLU√çDA")
        print("=" * 60)
        print()
        print("üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print()
        print("üìã RESUMO:")
        print(f"‚úÖ {total_usuarios:,} usu√°rios migrados")
        print(f"‚úÖ {total_militares:,} militares migrados")
        print(f"‚úÖ {total_comissoes:,} comiss√µes criadas")
        print(f"‚úÖ {total_quadros:,} quadros de acesso criados")
        print(f"‚úÖ {total_calendarios:,} calend√°rios de promo√ß√£o criados")
        print(f"‚úÖ {militares_com_usuario:,} associa√ß√µes usu√°rio-militar")
        print()
        print("üöÄ O sistema est√° pronto para uso!")
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")

if __name__ == "__main__":
    verificar_migracao() 