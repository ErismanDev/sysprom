#!/usr/bin/env python
"""
Script para importar tabelas simples sem depend√™ncias complexas
"""

import os
import sys
import django
import json
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from militares.models import (
    CargoComissao, CargoFuncao, CalendarioPromocao, AlmanaqueMilitar,
    Intersticio, VagaManual
)

def importar_tabelas_simples():
    """Importa tabelas simples sem depend√™ncias complexas"""
    
    print("üîß Importando tabelas simples...")
    
    # Ler o arquivo de dados
    with open('dados_sqlite_sem_duplicatas_20250722_154148.json', 'r', encoding='utf-8') as f:
        dados = json.load(f)
    
    # Tabelas simples para importar
    tabelas_simples = {
        'militares.cargocomissao': CargoComissao,
        'militares.cargofuncao': CargoFuncao,
        'militares.calendariopromocao': CalendarioPromocao,
        'militares.almanaquemilitar': AlmanaqueMilitar,
        'militares.intersticio': Intersticio,
        'militares.vagamanual': VagaManual,
    }
    
    # Filtrar dados por modelo
    dados_por_modelo = {}
    for item in dados:
        modelo = item['model']
        if modelo in tabelas_simples:
            if modelo not in dados_por_modelo:
                dados_por_modelo[modelo] = []
            dados_por_modelo[modelo].append(item)
    
    # Estat√≠sticas
    total_importados = 0
    erros_por_modelo = {}
    
    print(f"üìä Tabelas simples encontradas:")
    for modelo, items in dados_por_modelo.items():
        print(f"  - {modelo}: {len(items)} itens")
    
    # Importar cada modelo
    for modelo, items in dados_por_modelo.items():
        print(f"\nüîß Importando {modelo}...")
        
        modelo_class = tabelas_simples[modelo]
        importados = 0
        erros = []
        
        for i, item in enumerate(items, 1):
            try:
                fields = item['fields']
                
                # Criar objeto
                obj = modelo_class.objects.create(**fields)
                importados += 1
                
                if i % 10 == 0:
                    print(f"  ‚úÖ {i}/{len(items)} importados...")
                    
            except Exception as e:
                erro_msg = f"Erro no item {i}: {e}"
                erros.append(erro_msg)
                print(f"  ‚ùå {erro_msg}")
                continue
        
        total_importados += importados
        erros_por_modelo[modelo] = erros
        
        print(f"  ‚úÖ {modelo}: {importados}/{len(items)} importados")
        if erros:
            print(f"  ‚ùå {len(erros)} erros")
    
    # Relat√≥rio final
    print(f"\nüéâ Importa√ß√£o de tabelas simples conclu√≠da!")
    print(f"üìä Total de itens importados: {total_importados}")
    
    total_erros = sum(len(erros) for erros in erros_por_modelo.values())
    print(f"‚ùå Total de erros: {total_erros}")
    
    if total_erros > 0:
        print(f"\nüìã Erros por modelo:")
        for modelo, erros in erros_por_modelo.items():
            if erros:
                print(f"  - {modelo}: {len(erros)} erros")
    
    return total_importados

def importar_cargos_funcoes():
    """Importa cargos e fun√ß√µes especificamente"""
    
    print("\nüîß Importando cargos e fun√ß√µes...")
    
    # Ler o arquivo de dados
    with open('dados_sqlite_sem_duplicatas_20250722_154148.json', 'r', encoding='utf-8') as f:
        dados = json.load(f)
    
    # Filtrar cargos e fun√ß√µes
    cargos_comissao = [item for item in dados if item['model'] == 'militares.cargocomissao']
    cargos_funcao = [item for item in dados if item['model'] == 'militares.cargofuncao']
    
    print(f"üìä Cargos de comiss√£o encontrados: {len(cargos_comissao)}")
    print(f"üìä Cargos de fun√ß√£o encontrados: {len(cargos_funcao)}")
    
    # Importar cargos de comiss√£o
    importados_comissao = 0
    for item in cargos_comissao:
        try:
            fields = item['fields']
            cargo = CargoComissao.objects.create(**fields)
            importados_comissao += 1
        except Exception as e:
            print(f"‚ùå Erro ao importar cargo de comiss√£o: {e}")
    
    # Importar cargos de fun√ß√£o
    importados_funcao = 0
    for item in cargos_funcao:
        try:
            fields = item['fields']
            cargo = CargoFuncao.objects.create(**fields)
            importados_funcao += 1
        except Exception as e:
            print(f"‚ùå Erro ao importar cargo de fun√ß√£o: {e}")
    
    print(f"‚úÖ Cargos de comiss√£o importados: {importados_comissao}")
    print(f"‚úÖ Cargos de fun√ß√£o importados: {importados_funcao}")
    
    return importados_comissao + importados_funcao

def importar_calendarios_almanaques():
    """Importa calend√°rios e almanaques"""
    
    print("\nüîß Importando calend√°rios e almanaques...")
    
    # Ler o arquivo de dados
    with open('dados_sqlite_sem_duplicatas_20250722_154148.json', 'r', encoding='utf-8') as f:
        dados = json.load(f)
    
    # Filtrar calend√°rios e almanaques
    calendarios = [item for item in dados if item['model'] == 'militares.calendariopromocao']
    almanaques = [item for item in dados if item['model'] == 'militares.almanaquemilitar']
    
    print(f"üìä Calend√°rios encontrados: {len(calendarios)}")
    print(f"üìä Almanaques encontrados: {len(almanaques)}")
    
    # Importar calend√°rios
    importados_calendarios = 0
    for item in calendarios:
        try:
            fields = item['fields']
            calendario = CalendarioPromocao.objects.create(**fields)
            importados_calendarios += 1
        except Exception as e:
            print(f"‚ùå Erro ao importar calend√°rio: {e}")
    
    # Importar almanaques
    importados_almanaques = 0
    for item in almanaques:
        try:
            fields = item['fields']
            almanaque = AlmanaqueMilitar.objects.create(**fields)
            importados_almanaques += 1
        except Exception as e:
            print(f"‚ùå Erro ao importar almanaque: {e}")
    
    print(f"‚úÖ Calend√°rios importados: {importados_calendarios}")
    print(f"‚úÖ Almanaques importados: {importados_almanaques}")
    
    return importados_calendarios + importados_almanaques

if __name__ == "__main__":
    print("üöÄ Iniciando importa√ß√£o de tabelas simples")
    print("=" * 50)
    
    # Importar tabelas simples
    total_geral = importar_tabelas_simples()
    
    # Importar cargos e fun√ß√µes
    cargos_importados = importar_cargos_funcoes()
    
    # Importar calend√°rios e almanaques
    calendarios_importados = importar_calendarios_almanaques()
    
    print(f"\nüéâ Processo conclu√≠do!")
    print(f"üìä Total geral de itens importados: {total_geral + cargos_importados + calendarios_importados}")
    print(f"üìã Cargos e fun√ß√µes: {cargos_importados}")
    print(f"üìã Calend√°rios e almanaques: {calendarios_importados}") 