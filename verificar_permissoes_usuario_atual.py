#!/usr/bin/env python
"""
Script para verificar as permiss√µes do usu√°rio atual
e identificar problemas de acesso aos quadros de fixa√ß√£o de vagas
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import UsuarioFuncao, MembroComissao, CargoFuncao

def verificar_permissoes_usuario():
    """Verifica as permiss√µes do usu√°rio atual"""
    
    print("üîç VERIFICANDO PERMISS√ïES DO USU√ÅRIO ATUAL")
    print("=" * 60)
    
    # Buscar usu√°rio atual (assumindo que √© o primeiro superusu√°rio)
    try:
        usuario = User.objects.filter(is_superuser=True).first()
        if not usuario:
            print("‚ùå Nenhum superusu√°rio encontrado!")
            return
        
        print(f"üë§ Usu√°rio: {usuario.get_full_name() or usuario.username}")
        print(f"üìß Email: {usuario.email}")
        print(f"üîë Superusu√°rio: {usuario.is_superuser}")
        print(f"üë®‚Äçüíº Staff: {usuario.is_staff}")
        print(f"‚úÖ Ativo: {usuario.is_active}")
        print()
        
        # Verificar fun√ß√µes do usu√°rio
        print("üìã FUN√á√ïES DO USU√ÅRIO:")
        funcoes = UsuarioFuncao.objects.filter(usuario=usuario, status='ATIVO')
        
        if funcoes.exists():
            for funcao in funcoes:
                print(f"   ‚úÖ {funcao.cargo_funcao.nome} (Status: {funcao.status})")
        else:
            print("   ‚ùå Nenhuma fun√ß√£o ativa encontrada")
        
        print()
        
        # Verificar membros de comiss√£o
        print("üë• MEMBROS DE COMISS√ÉO:")
        membros = MembroComissao.objects.filter(usuario=usuario, ativo=True)
        
        if membros.exists():
            for membro in membros:
                print(f"   ‚úÖ {membro.comissao.tipo} - {membro.comissao.nome} (Ativo: {membro.ativo})")
                if membro.comissao.eh_presidente(usuario):
                    print(f"      üëë PRESIDENTE da comiss√£o")
        else:
            print("   ‚ùå Nenhum membro de comiss√£o ativo encontrado")
        
        print()
        
        # Verificar permiss√µes espec√≠ficas para quadros de fixa√ß√£o
        print("üéØ PERMISS√ïES PARA QUADROS DE FIXA√á√ÉO:")
        
        # Fun√ß√µes especiais que podem acessar quadros de fixa√ß√£o
        cargos_especiais = ['Diretor de Gest√£o de Pessoas', 'Chefe da Se√ß√£o de Promo√ß√µes', 'Administrador do Sistema', 'Administrador']
        
        funcoes_especiais = funcoes.filter(cargo_funcao__nome__in=cargos_especiais)
        
        if funcoes_especiais.exists():
            print("   ‚úÖ Tem fun√ß√µes especiais:")
            for funcao in funcoes_especiais:
                print(f"      - {funcao.cargo_funcao.nome}")
        else:
            print("   ‚ùå N√ÉO tem fun√ß√µes especiais")
        
        # Verificar se √© membro de comiss√£o
        if membros.exists():
            print("   ‚úÖ √â membro de comiss√£o")
            
            # Verificar tipos de comiss√£o
            tem_cpo = membros.filter(comissao__tipo='CPO').exists()
            tem_cpp = membros.filter(comissao__tipo='CPP').exists()
            
            if tem_cpo:
                print("      - Membro da CPO (pode ver quadros de oficiais)")
            if tem_cpp:
                print("      - Membro da CPP (pode ver quadros de pra√ßas)")
            if tem_cpo and tem_cpp:
                print("      - Membro de ambas (pode ver todos os quadros)")
        else:
            print("   ‚ùå N√ÉO √© membro de comiss√£o")
        
        print()
        
        # Verificar se deveria ter acesso
        print("üîç DIAGN√ìSTICO:")
        
        tem_acesso = False
        razoes = []
        
        if usuario.is_superuser or usuario.is_staff:
            tem_acesso = True
            razoes.append("Superusu√°rio/Staff")
        
        if funcoes_especiais.exists():
            tem_acesso = True
            razoes.append("Tem fun√ß√µes especiais")
        
        if membros.exists():
            tem_acesso = True
            razoes.append("√â membro de comiss√£o")
        
        if tem_acesso:
            print(f"   ‚úÖ DEVERIA ter acesso aos quadros de fixa√ß√£o")
            print(f"   üìù Raz√µes: {', '.join(razoes)}")
        else:
            print("   ‚ùå N√ÉO deveria ter acesso aos quadros de fixa√ß√£o")
            print("   üìù Motivo: N√£o tem permiss√µes necess√°rias")
        
        print()
        
        # Verificar context processor
        print("üîß VERIFICA√á√ÉO DO CONTEXT PROCESSOR:")
        
        # Simular a l√≥gica do context processor
        if funcoes_especiais.exists() or usuario.is_superuser:
            print("   ‚úÖ Context processor deveria mostrar menu (fun√ß√µes especiais)")
        elif membros.exists():
            print("   ‚úÖ Context processor deveria mostrar menu (membro de comiss√£o)")
        else:
            print("   ‚ùå Context processor N√ÉO deveria mostrar menu")
        
        print()
        
        # Sugest√µes
        print("üí° SUGEST√ïES:")
        
        if not funcoes_especiais.exists() and not membros.exists():
            print("   1. Adicionar fun√ß√£o 'Administrador do Sistema' ao usu√°rio")
            print("   2. Ou adicionar usu√°rio como membro de comiss√£o")
        
        if funcoes_especiais.exists() or membros.exists():
            print("   1. Verificar se o context processor est√° funcionando corretamente")
            print("   2. Verificar se h√° cache do navegador")
            print("   3. Verificar se o servidor foi reiniciado ap√≥s mudan√ßas")
        
        print()
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar permiss√µes: {e}")

if __name__ == "__main__":
    verificar_permissoes_usuario() 