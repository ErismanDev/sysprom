#!/usr/bin/env python
"""
Script para testar a exclus√£o de quadros de fixa√ß√£o de vagas
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import QuadroFixacaoVagas, UsuarioFuncao

def testar_exclusao_quadro(quadro_id, username):
    """Testa a exclus√£o de um quadro espec√≠fico"""
    print(f"üß™ TESTANDO EXCLUS√ÉO DO QUADRO ID: {quadro_id}")
    print("=" * 60)
    
    try:
        # Buscar o usu√°rio
        usuario = User.objects.get(username=username)
        print(f"üë§ Usu√°rio: {usuario.get_full_name()} ({usuario.username})")
        
        # Buscar o quadro
        quadro = QuadroFixacaoVagas.objects.get(pk=quadro_id)
        print(f"üìã Quadro: {quadro.titulo} (ID: {quadro.pk})")
        print(f"   Tipo: {quadro.tipo}")
        print(f"   Status: {quadro.status}")
        
        # Verificar permiss√µes do usu√°rio
        print(f"\nüîê VERIFICANDO PERMISS√ïES:")
        
        # Verificar se √© superusu√°rio
        eh_superuser = usuario.is_superuser
        print(f"   √â superusu√°rio: {eh_superuser}")
        
        # Verificar se √© staff
        eh_staff = usuario.is_staff
        print(f"   √â staff: {eh_staff}")
        
        # Verificar cargos especiais
        cargos_especiais = ['Diretor de Gest√£o de Pessoas', 'Chefe da Se√ß√£o de Promo√ß√µes', 'Administrador do Sistema', 'Administrador']
        funcoes_especiais = UsuarioFuncao.objects.filter(
            usuario=usuario,
            status='ATIVO',
            cargo_funcao__nome__in=cargos_especiais
        )
        tem_cargo_especial = funcoes_especiais.exists()
        print(f"   Tem cargo especial: {tem_cargo_especial}")
        
        if funcoes_especiais.exists():
            for funcao in funcoes_especiais:
                print(f"     - {funcao.cargo_funcao.nome}")
        
        # Verificar se deveria ter acesso
        deveria_ter_acesso = eh_superuser or eh_staff or tem_cargo_especial
        print(f"   Deveria ter acesso: {deveria_ter_acesso}")
        
        if not deveria_ter_acesso:
            print("   ‚ùå PROBLEMA: Usu√°rio n√£o tem permiss√£o!")
            return False
        
        # Simular a exclus√£o
        print(f"\nüóëÔ∏è SIMULANDO EXCLUS√ÉO:")
        try:
            # Verificar se o quadro existe antes
            quadro_existe = QuadroFixacaoVagas.objects.filter(pk=quadro_id).exists()
            print(f"   Quadro existe antes da exclus√£o: {quadro_existe}")
            
            if quadro_existe:
                # Tentar excluir
                quadro.delete()
                print("   ‚úÖ Quadro exclu√≠do com sucesso!")
                
                # Verificar se foi realmente exclu√≠do
                quadro_existe_depois = QuadroFixacaoVagas.objects.filter(pk=quadro_id).exists()
                print(f"   Quadro existe depois da exclus√£o: {quadro_existe_depois}")
                
                if not quadro_existe_depois:
                    print("   ‚úÖ Confirma√ß√£o: Quadro foi realmente exclu√≠do!")
                    return True
                else:
                    print("   ‚ùå PROBLEMA: Quadro n√£o foi exclu√≠do!")
                    return False
            else:
                print("   ‚ùå PROBLEMA: Quadro n√£o encontrado!")
                return False
                
        except Exception as e:
            print(f"   ‚ùå ERRO na exclus√£o: {str(e)}")
            return False
            
    except User.DoesNotExist:
        print(f"‚ùå Usu√°rio '{username}' n√£o encontrado!")
        return False
    except QuadroFixacaoVagas.DoesNotExist:
        print(f"‚ùå Quadro com ID {quadro_id} n√£o encontrado!")
        return False
    except Exception as e:
        print(f"‚ùå Erro geral: {str(e)}")
        return False

def listar_quadros_disponiveis():
    """Lista todos os quadros dispon√≠veis"""
    print(f"\nüìã QUADROS DISPON√çVEIS PARA TESTE:")
    print("=" * 60)
    
    quadros = QuadroFixacaoVagas.objects.all().order_by('-data_criacao')
    
    if quadros.exists():
        for quadro in quadros:
            print(f"   ‚Ä¢ ID {quadro.pk}: {quadro.titulo} ({quadro.tipo}) - {quadro.status}")
    else:
        print("   Nenhum quadro encontrado")
    
    return quadros

def main():
    print("üß™ TESTADOR DE EXCLUS√ÉO DE QUADROS")
    print("=" * 70)
    
    # Listar quadros dispon√≠veis
    quadros = listar_quadros_disponiveis()
    
    if not quadros.exists():
        print("‚ùå Nenhum quadro dispon√≠vel para teste!")
        return
    
    # Solicitar dados do teste
    try:
        quadro_id = int(input("\nDigite o ID do quadro para testar: "))
        username = input("Digite o username do usu√°rio: ").strip()
        
        if not username:
            print("‚ùå Username n√£o informado!")
            return
        
        # Executar teste
        sucesso = testar_exclusao_quadro(quadro_id, username)
        
        print(f"\n" + "=" * 70)
        if sucesso:
            print("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
            print("   A exclus√£o funcionou corretamente.")
        else:
            print("‚ùå TESTE FALHOU!")
            print("   Verifique as permiss√µes e tente novamente.")
            
    except ValueError:
        print("‚ùå ID do quadro deve ser um n√∫mero!")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Teste interrompido pelo usu√°rio.")

if __name__ == "__main__":
    main() 