#!/usr/bin/env python
"""
Script para verificar permiss√µes do usu√°rio admin
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import UsuarioFuncao, MembroComissao, ComissaoPromocao

def verificar_permissoes_usuario(username):
    """Verifica todas as permiss√µes de um usu√°rio"""
    
    try:
        user = User.objects.get(username=username)
    except User.DoesNotExist:
        print(f"‚ùå Usu√°rio '{username}' n√£o encontrado!")
        return
    
    print(f"\nüîç VERIFICANDO PERMISS√ïES DO USU√ÅRIO: {user.get_full_name()} ({username})")
    print("=" * 80)
    
    # 1. Verificar se √© superusu√°rio/staff
    print(f"\n1Ô∏è‚É£ STATUS DO USU√ÅRIO:")
    print(f"   ‚Ä¢ is_superuser: {user.is_superuser}")
    print(f"   ‚Ä¢ is_staff: {user.is_staff}")
    print(f"   ‚Ä¢ is_active: {user.is_active}")
    
    # 2. Verificar fun√ß√µes ativas
    print(f"\n2Ô∏è‚É£ FUN√á√ïES ATIVAS:")
    funcoes = UsuarioFuncao.objects.filter(usuario=user, status='ATIVO')
    if funcoes.exists():
        for funcao in funcoes:
            print(f"   ‚Ä¢ {funcao.cargo_funcao.nome} (desde {funcao.data_inicio})")
    else:
        print("   ‚ùå Nenhuma fun√ß√£o ativa encontrada!")
    
    # 3. Verificar se tem fun√ß√µes especiais
    funcoes_especiais = funcoes.filter(
        cargo_funcao__nome__in=['Diretor de Gest√£o de Pessoas', 'Chefe da Se√ß√£o de Promo√ß√µes', 'Administrador do Sistema']
    )
    print(f"\n3Ô∏è‚É£ FUN√á√ïES ESPECIAIS:")
    if funcoes_especiais.exists():
        for funcao in funcoes_especiais:
            print(f"   ‚úÖ {funcao.cargo_funcao.nome}")
    else:
        print("   ‚ùå Nenhuma fun√ß√£o especial encontrada")
    
    # 4. Verificar membros de comiss√£o
    print(f"\n4Ô∏è‚É£ MEMBROS DE COMISS√ÉO:")
    membros = MembroComissao.objects.filter(usuario=user, ativo=True, comissao__status='ATIVA')
    if membros.exists():
        for membro in membros:
            print(f"   ‚Ä¢ {membro.comissao.tipo} - {membro.comissao.nome}")
            print(f"     Cargo: {membro.cargo}")
            print(f"     Presidente: {membro.eh_presidente()}")
    else:
        print("   ‚ùå Nenhum membro de comiss√£o ativo encontrado")
    
    # 5. Verificar permiss√µes de menu (simular context processor)
    print(f"\n5Ô∏è‚É£ PERMISS√ïES DE MENU (simulando context processor):")
    
    # Verificar se √© usu√°rio comum
    is_consultor = funcoes.filter(cargo_funcao__nome='Usu√°rio').exists()
    
    # Verificar se tem fun√ß√µes especiais
    tem_funcoes_especiais = funcoes_especiais.exists()
    
    # Verificar se √© membro de comiss√£o
    is_cpo = membros.filter(comissao__tipo='CPO').exists()
    is_cpp = membros.filter(comissao__tipo='CPP').exists()
    
    print(f"   ‚Ä¢ is_consultor: {is_consultor}")
    print(f"   ‚Ä¢ tem_funcoes_especiais: {tem_funcoes_especiais}")
    print(f"   ‚Ä¢ is_cpo: {is_cpo}")
    print(f"   ‚Ä¢ is_cpp: {is_cpp}")
    
    # Determinar permiss√µes baseado na l√≥gica do context processor
    if is_consultor:
        print(f"   ‚ùå Usu√°rio comum - acesso muito limitado")
        show_quadros_acesso = False
        show_quadros_fixacao = False
        show_comissoes = False
    elif tem_funcoes_especiais or user.is_superuser:
        print(f"   ‚úÖ Usu√°rio especial - acesso total")
        show_quadros_acesso = True
        show_quadros_fixacao = True
        show_comissoes = True
    elif is_cpo or is_cpp:
        print(f"   ‚úÖ Membro de comiss√£o - acesso limitado")
        show_quadros_acesso = False
        show_quadros_fixacao = True
        show_comissoes = True
    else:
        print(f"   ‚ùå Usu√°rio comum - acesso limitado")
        show_quadros_acesso = False
        show_quadros_fixacao = False
        show_comissoes = False
    
    print(f"\n6Ô∏è‚É£ RESULTADO DAS PERMISS√ïES:")
    print(f"   ‚Ä¢ show_quadros_acesso: {show_quadros_acesso}")
    print(f"   ‚Ä¢ show_quadros_fixacao: {show_quadros_fixacao}")
    print(f"   ‚Ä¢ show_comissoes: {show_comissoes}")
    
    # 6. Recomenda√ß√µes
    print(f"\n7Ô∏è‚É£ RECOMENDA√á√ïES:")
    
    if not show_quadros_acesso and not show_quadros_fixacao and not show_comissoes:
        print("   ‚ùå PROBLEMA: Usu√°rio n√£o tem acesso aos m√≥dulos principais!")
        
        if not tem_funcoes_especiais and not user.is_superuser:
            print("   üí° SOLU√á√ÉO 1: Tornar usu√°rio superusu√°rio")
            print("      python manage.py shell")
            print(f"      user = User.objects.get(username='{username}')")
            print(f"      user.is_superuser = True")
            print(f"      user.save()")
        
        if not funcoes_especiais.exists():
            print("   üí° SOLU√á√ÉO 2: Adicionar fun√ß√£o especial")
            print("      - Diretor de Gest√£o de Pessoas")
            print("      - Chefe da Se√ß√£o de Promo√ß√µes") 
            print("      - Administrador do Sistema")
        
        if not membros.exists():
            print("   üí° SOLU√á√ÉO 3: Adicionar como membro de comiss√£o")
            print("      - CPO (Comiss√£o de Promo√ß√£o de Oficiais)")
            print("      - CPP (Comiss√£o de Promo√ß√£o de Pra√ßas)")
    
    elif show_quadros_fixacao and show_comissoes:
        print("   ‚úÖ Usu√°rio tem acesso adequado aos m√≥dulos principais")
    
    print(f"\n" + "=" * 80)

def main():
    """Fun√ß√£o principal"""
    print("üîß VERIFICADOR DE PERMISS√ïES DE USU√ÅRIO")
    print("=" * 80)
    
    if len(sys.argv) > 1:
        username = sys.argv[1]
    else:
        username = input("Digite o username do usu√°rio: ")
    
    verificar_permissoes_usuario(username)

if __name__ == "__main__":
    main() 