#!/usr/bin/env python
"""
Script para verificar se o usu√°rio √© membro de comiss√£o
e se isso est√° causando o bloqueio na edi√ß√£o de quadros
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import MembroComissao, QuadroFixacaoVagas

def verificar_membro_comissao():
    """Verifica se o usu√°rio √© membro de comiss√£o"""
    
    print("üîç VERIFICANDO MEMBRO DE COMISS√ÉO")
    print("=" * 50)
    
    # Buscar usu√°rio superusu√°rio
    usuario = User.objects.filter(is_superuser=True).first()
    if not usuario:
        print("‚ùå Nenhum superusu√°rio encontrado!")
        return
    
    print(f"üë§ Usu√°rio: {usuario.get_full_name() or usuario.username}")
    print()
    
    # Verificar membros de comiss√£o
    membros_comissao = MembroComissao.objects.filter(
        usuario=usuario,
        ativo=True,
        comissao__status='ATIVA'
    )
    
    if membros_comissao.exists():
        print("üë• MEMBROS DE COMISS√ÉO ATIVOS:")
        for membro in membros_comissao:
            print(f"   ‚úÖ {membro.comissao.tipo} - {membro.comissao.nome}")
            print(f"      - Ativo: {membro.ativo}")
            print(f"      - Comiss√£o ativa: {membro.comissao.status}")
            if membro.comissao.eh_presidente(usuario):
                print(f"      üëë PRESIDENTE da comiss√£o")
        print()
        
        # Verificar se isso est√° causando bloqueio
        print("üö® PROBLEMA IDENTIFICADO:")
        print("   - Voc√™ √© membro de comiss√£o")
        print("   - A view quadro_fixacao_vagas_update tem verifica√ß√£o adicional")
        print("   - Ela bloqueia membros de comiss√£o que tentam editar quadros")
        print("   - Mesmo sendo superusu√°rio, a verifica√ß√£o de comiss√£o tem prioridade")
        print()
        
        # Verificar quadros existentes
        print("üìã QUADROS DE FIXA√á√ÉO EXISTENTES:")
        quadros = QuadroFixacaoVagas.objects.all()
        if quadros.exists():
            for quadro in quadros:
                print(f"   ‚Ä¢ ID: {quadro.pk} - {quadro.titulo} - Tipo: {quadro.tipo}")
                
                # Verificar se seria bloqueado
                for membro in membros_comissao:
                    if membro.comissao.tipo == 'CPO' and quadro.tipo != 'OFICIAIS':
                        print(f"      ‚ùå BLOQUEADO: CPO tentando editar quadro de pra√ßas")
                    elif membro.comissao.tipo == 'CPP' and quadro.tipo != 'PRACAS':
                        print(f"      ‚ùå BLOQUEADO: CPP tentando editar quadro de oficiais")
                    else:
                        print(f"      ‚úÖ PERMITIDO: {membro.comissao.tipo} editando {quadro.tipo}")
        else:
            print("   Nenhum quadro encontrado")
        
        print()
        print("üí° SOLU√á√ïES:")
        print("   1. Remover usu√°rio das comiss√µes (se n√£o precisar ser membro)")
        print("   2. Modificar a view para dar prioridade ao superusu√°rio")
        print("   3. Adicionar verifica√ß√£o de superusu√°rio antes da verifica√ß√£o de comiss√£o")
        
    else:
        print("‚úÖ N√ÉO √© membro de comiss√£o")
        print("   - Isso n√£o deveria causar problemas de edi√ß√£o")
        print("   - O decorator @cargos_especiais_required deveria permitir acesso")
    
    print()
    print("=" * 50)

if __name__ == "__main__":
    verificar_membro_comissao() 