#!/usr/bin/env python
"""
Script para testar permiss√µes do usu√°rio admin ap√≥s corre√ß√µes
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import UsuarioFuncao, MembroComissao
from militares.permissoes_simples import *

def testar_permissoes_admin():
    """Testa todas as permiss√µes do usu√°rio admin"""
    
    try:
        user = User.objects.get(username='admin')
    except User.DoesNotExist:
        print("‚ùå Usu√°rio 'admin' n√£o encontrado!")
        return
    
    print(f"\nüîß TESTANDO PERMISS√ïES DO USU√ÅRIO ADMIN")
    print("=" * 60)
    
    # 1. Verificar status do usu√°rio
    print(f"\n1Ô∏è‚É£ STATUS DO USU√ÅRIO:")
    print(f"   ‚Ä¢ is_superuser: {user.is_superuser}")
    print(f"   ‚Ä¢ is_staff: {user.is_staff}")
    print(f"   ‚Ä¢ is_active: {user.is_active}")
    
    # 2. Verificar fun√ß√µes ativas
    print(f"\n2Ô∏è‚É£ FUN√á√ïES ATIVAS:")
    funcoes = UsuarioFuncao.objects.filter(usuario=user, status='ATIVO')
    if funcoes.exists():
        for funcao in funcoes:
            print(f"   ‚Ä¢ {funcao.cargo_funcao.nome}")
    else:
        print("   ‚ùå Nenhuma fun√ß√£o ativa encontrada!")
    
    # 3. Testar permiss√µes espec√≠ficas
    print(f"\n3Ô∏è‚É£ TESTE DE PERMISS√ïES:")
    
    # Testar permiss√µes de edi√ß√£o
    print(f"   ‚Ä¢ pode_editar_militares: {pode_editar_militares(user)}")
    print(f"   ‚Ä¢ pode_editar_fichas_conceito: {pode_editar_fichas_conceito(user)}")
    print(f"   ‚Ä¢ pode_gerenciar_quadros_vagas: {pode_gerenciar_quadros_vagas(user)}")
    print(f"   ‚Ä¢ pode_gerenciar_comissoes: {pode_gerenciar_comissoes(user)}")
    print(f"   ‚Ä¢ pode_gerenciar_usuarios: {pode_gerenciar_usuarios(user)}")
    print(f"   ‚Ä¢ pode_assinar_documentos: {pode_assinar_documentos(user)}")
    print(f"   ‚Ä¢ pode_visualizar_tudo: {pode_visualizar_tudo(user)}")
    
    # 4. Testar fun√ß√µes especiais
    print(f"\n4Ô∏è‚É£ FUN√á√ïES ESPECIAIS:")
    funcoes_especiais = funcoes.filter(
        cargo_funcao__nome__in=['Diretor de Gest√£o de Pessoas', 'Chefe da Se√ß√£o de Promo√ß√µes', 'Administrador do Sistema', 'Administrador']
    )
    if funcoes_especiais.exists():
        for funcao in funcoes_especiais:
            print(f"   ‚úÖ {funcao.cargo_funcao.nome}")
    else:
        print("   ‚ùå Nenhuma fun√ß√£o especial encontrada")
    
    # 5. Verificar se tem acesso aos m√≥dulos principais
    print(f"\n5Ô∏è‚É£ ACESSO AOS M√ìDULOS PRINCIPAIS:")
    
    # Simular context processor
    if user.is_superuser or funcoes_especiais.exists():
        print("   ‚úÖ Acesso total (superusu√°rio ou fun√ß√£o especial)")
        show_quadros_acesso = True
        show_quadros_fixacao = True
        show_comissoes = True
    else:
        print("   ‚ùå Acesso limitado")
        show_quadros_acesso = False
        show_quadros_fixacao = False
        show_comissoes = False
    
    print(f"   ‚Ä¢ show_quadros_acesso: {show_quadros_acesso}")
    print(f"   ‚Ä¢ show_quadros_fixacao: {show_quadros_fixacao}")
    print(f"   ‚Ä¢ show_comissoes: {show_comissoes}")
    
    # 6. Resultado final
    print(f"\n6Ô∏è‚É£ RESULTADO FINAL:")
    
    if show_quadros_acesso and show_quadros_fixacao and show_comissoes:
        print("   ‚úÖ SUCESSO! Usu√°rio admin tem acesso total aos m√≥dulos principais")
        print("   üéØ Agora voc√™ deve conseguir ver:")
        print("      ‚Ä¢ Quadros de Acesso")
        print("      ‚Ä¢ Quadros de Fixa√ß√£o de Vagas")
        print("      ‚Ä¢ Comiss√µes")
        print("      ‚Ä¢ Todos os outros m√≥dulos administrativos")
    else:
        print("   ‚ùå PROBLEMA! Usu√°rio admin ainda n√£o tem acesso total")
        print("   üîß Verificar se as corre√ß√µes foram aplicadas corretamente")
    
    print(f"\n" + "=" * 60)

if __name__ == "__main__":
    testar_permissoes_admin() 