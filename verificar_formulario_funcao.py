#!/usr/bin/env python
"""
Script para verificar se o formul√°rio UsuarioFuncaoForm est√° funcionando
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

try:
    from militares.forms import UsuarioFuncaoForm
    from militares.models import UsuarioFuncao
    from django.contrib.auth.models import User
    
    print("üîç VERIFICANDO FORMUL√ÅRIO USUARIOFUNCAOFORM")
    print("=" * 60)
    
    # Verificar se o modelo tem as choices definidas
    print("üìã Choices do modelo UsuarioFuncao:")
    for choice in UsuarioFuncao.TIPO_FUNCAO_CHOICES:
        print(f"   - {choice[0]}: {choice[1]}")
    
    print("\nüìã Choices do status:")
    for choice in UsuarioFuncao.STATUS_CHOICES:
        print(f"   - {choice[0]}: {choice[1]}")
    
    # Criar formul√°rio
    form = UsuarioFuncaoForm()
    
    print(f"\n‚úÖ Formul√°rio criado com sucesso!")
    print(f"üìù Campos do formul√°rio:")
    for field_name, field in form.fields.items():
        print(f"   - {field_name}: {type(field).__name__}")
        if hasattr(field, 'choices') and field.choices:
            print(f"     Choices: {len(field.choices)} op√ß√µes")
            # Verificar especificamente o campo tipo_funcao
            if field_name == 'tipo_funcao':
                print("     ‚úÖ Campo tipo_funcao encontrado!")
                for choice in field.choices:
                    print(f"       {choice[0]}: {choice[1]}")
    
    # Verificar se h√° usu√°rios dispon√≠veis
    usuarios = User.objects.filter(is_active=True).count()
    print(f"\nüë• Usu√°rios ativos dispon√≠veis: {usuarios}")
    
    # Testar cria√ß√£o de fun√ß√£o
    if usuarios > 0:
        usuario = User.objects.filter(is_active=True).first()
        print(f"\nüß™ Testando cria√ß√£o de fun√ß√£o para usu√°rio: {usuario.get_full_name()}")
        
        data = {
            'usuario': usuario.id,
            'nome_funcao': 'Teste de Fun√ß√£o',
            'tipo_funcao': 'ADMINISTRATIVO',
            'status': 'ATIVO',
            'data_inicio': '2025-01-01',
        }
        
        form = UsuarioFuncaoForm(data)
        if form.is_valid():
            print("‚úÖ Formul√°rio v√°lido!")
            funcao = form.save(commit=False)
            print(f"üìù Fun√ß√£o criada: {funcao}")
        else:
            print("‚ùå Formul√°rio inv√°lido!")
            print("Erros:", form.errors)
    
    # Verificar se o campo tipo_funcao est√° no template
    print(f"\nüîç Verificando se o campo tipo_funcao est√° no formul√°rio:")
    if 'tipo_funcao' in form.fields:
        print("‚úÖ Campo tipo_funcao est√° presente no formul√°rio")
        field = form.fields['tipo_funcao']
        print(f"   Tipo: {type(field).__name__}")
        print(f"   Widget: {type(field.widget).__name__}")
        print(f"   Choices: {len(field.choices)} op√ß√µes")
    else:
        print("‚ùå Campo tipo_funcao N√ÉO est√° presente no formul√°rio")
    
except ImportError as e:
    print(f"‚ùå Erro no import: {e}")
except Exception as e:
    print(f"‚ùå Erro geral: {e}")

print("\nVerifica√ß√£o conclu√≠da!") 