#!/usr/bin/env python
"""
Script para verificar as fun√ß√µes do usu√°rio atual e identificar problemas de permiss√£o
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import UsuarioFuncao, CargoFuncao, QuadroFixacaoVagas

def verificar_funcoes_usuario(username):
    """Verifica as fun√ß√µes de um usu√°rio espec√≠fico"""
    print(f"üîç VERIFICANDO FUN√á√ïES DO USU√ÅRIO: {username}")
    print("=" * 60)
    
    try:
        usuario = User.objects.get(username=username)
    except User.DoesNotExist:
        print(f"‚ùå Usu√°rio '{username}' n√£o encontrado!")
        return None
    
    print(f"üë§ Usu√°rio: {usuario.get_full_name()} ({usuario.username})")
    print(f"üìß Email: {usuario.email}")
    print(f"üîê Superusu√°rio: {usuario.is_superuser}")
    print(f"üë®‚Äçüíº Staff: {usuario.is_staff}")
    print(f"‚úÖ Ativo: {usuario.is_active}")
    
    # Verificar fun√ß√µes
    funcoes = UsuarioFuncao.objects.filter(
        usuario=usuario,
        status='ATIVO'
    ).select_related('cargo_funcao')
    
    print(f"\nüè∑Ô∏è Fun√ß√µes ativas ({funcoes.count()}):")
    if funcoes.exists():
        for funcao in funcoes:
            print(f"   ‚Ä¢ {funcao.cargo_funcao.nome} (desde {funcao.data_inicio})")
    else:
        print("   Nenhuma fun√ß√£o ativa encontrada")
    
    # Verificar cargos especiais
    cargos_especiais = ['Diretor de Gest√£o de Pessoas', 'Chefe da Se√ß√£o de Promo√ß√µes', 'Administrador do Sistema', 'Administrador']
    funcoes_especiais = funcoes.filter(cargo_funcao__nome__in=cargos_especiais)
    
    print(f"\n‚≠ê Cargos especiais ({funcoes_especiais.count()}):")
    if funcoes_especiais.exists():
        for funcao in funcoes_especiais:
            print(f"   ‚úÖ {funcao.cargo_funcao.nome}")
    else:
        print("   ‚ùå Nenhum cargo especial encontrado")
    
    # Testar permiss√£o do decorator
    print(f"\nüîê TESTE DO DECORATOR @cargos_especiais_required:")
    
    # Simular a verifica√ß√£o do decorator
    funcoes_especiais_decorator = UsuarioFuncao.objects.filter(
        usuario=usuario,
        status='ATIVO',
        cargo_funcao__nome__in=cargos_especiais
    )
    
    tem_cargo_especial = funcoes_especiais_decorator.exists()
    eh_superuser = usuario.is_superuser
    eh_staff = usuario.is_staff
    
    print(f"   Tem cargo especial: {tem_cargo_especial}")
    print(f"   √â superusu√°rio: {eh_superuser}")
    print(f"   √â staff: {eh_staff}")
    
    # Verificar se deveria ter acesso
    deveria_ter_acesso = eh_superuser or eh_staff or tem_cargo_especial
    print(f"   Deveria ter acesso: {deveria_ter_acesso}")
    
    if not deveria_ter_acesso:
        print("   ‚ùå PROBLEMA: Usu√°rio n√£o tem permiss√£o para excluir quadros!")
        print("   üí° Solu√ß√£o: Adicionar uma das seguintes fun√ß√µes:")
        for cargo in cargos_especiais:
            print(f"      - {cargo}")
    else:
        print("   ‚úÖ Usu√°rio tem permiss√£o para excluir quadros")
    
    return usuario

def verificar_quadros_disponiveis():
    """Verifica quadros dispon√≠veis para exclus√£o"""
    print(f"\nüìã QUADROS DE FIXA√á√ÉO DISPON√çVEIS:")
    print("=" * 60)
    
    quadros = QuadroFixacaoVagas.objects.all().order_by('-data_criacao')
    
    if quadros.exists():
        for quadro in quadros:
            print(f"   ‚Ä¢ ID {quadro.pk}: {quadro.titulo} ({quadro.tipo}) - {quadro.status}")
    else:
        print("   Nenhum quadro encontrado")
    
    return quadros

def verificar_cargos_cadastrados():
    """Verifica todos os cargos cadastrados no sistema"""
    print(f"\nüè∑Ô∏è TODOS OS CARGOS CADASTRADOS:")
    print("=" * 60)
    
    cargos = CargoFuncao.objects.all().order_by('nome')
    
    if cargos.exists():
        for cargo in cargos:
            usuarios_cargo = UsuarioFuncao.objects.filter(
                cargo_funcao=cargo,
                status='ATIVO'
            ).count()
            print(f"   ‚Ä¢ {cargo.nome}: {usuarios_cargo} usu√°rios ativos")
    else:
        print("   Nenhum cargo cadastrado")

def main():
    print("üîß VERIFICADOR DE PERMISS√ïES - QUADROS DE FIXA√á√ÉO")
    print("=" * 70)
    
    # Verificar usu√°rio atual (voc√™ pode alterar o username aqui)
    username = input("Digite o username do usu√°rio para verificar: ").strip()
    
    if not username:
        print("‚ùå Username n√£o informado!")
        return
    
    # Verificar fun√ß√µes do usu√°rio
    usuario = verificar_funcoes_usuario(username)
    
    if usuario:
        # Verificar quadros dispon√≠veis
        verificar_quadros_disponiveis()
        
        # Verificar cargos cadastrados
        verificar_cargos_cadastrados()
        
        print(f"\n" + "=" * 70)
        print("üí° RESUMO:")
        print("   Para excluir quadros de fixa√ß√£o, o usu√°rio precisa ter:")
        print("   - Fun√ß√£o 'Diretor de Gest√£o de Pessoas' OU")
        print("   - Fun√ß√£o 'Chefe da Se√ß√£o de Promo√ß√µes' OU")
        print("   - Fun√ß√£o 'Administrador do Sistema' OU")
        print("   - Ser superusu√°rio OU")
        print("   - Ser staff")
        
        if not usuario.is_superuser and not usuario.is_staff:
            funcoes_especiais = UsuarioFuncao.objects.filter(
                usuario=usuario,
                status='ATIVO',
                cargo_funcao__nome__in=['Diretor de Gest√£o de Pessoas', 'Chefe da Se√ß√£o de Promo√ß√µes', 'Administrador do Sistema', 'Administrador']
            )
            
            if not funcoes_especiais.exists():
                print(f"\n‚ùå PROBLEMA IDENTIFICADO:")
                print(f"   O usu√°rio '{username}' n√£o tem nenhuma das fun√ß√µes necess√°rias!")
                print(f"   Adicione uma das fun√ß√µes especiais para permitir exclus√£o de quadros.")

if __name__ == "__main__":
    main() 