#!/usr/bin/env python
"""
Script para testar o filtro de militares por tipo de comiss√£o (CPO/CPP)
"""
import os
import sys
import django

# Configurar Django
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import (
    Militar, UsuarioFuncao, CargoFuncao, ComissaoPromocao
)

def testar_filtro_comissao_tipo():
    """Testa o filtro de militares por tipo de comiss√£o"""
    
    print("üß™ TESTANDO FILTRO POR TIPO DE COMISS√ÉO")
    print("=" * 60)
    
    # 1. Verificar comiss√µes existentes
    print("\nüìã 1. COMISS√ïES EXISTENTES:")
    comissoes = ComissaoPromocao.objects.all()
    for comissao in comissoes:
        print(f"   üìã {comissao.nome} ({comissao.tipo})")
        print(f"      Status: {comissao.get_status_display()}")
        print(f"      Membros: {comissao.membros.count()}")
        print()
    
    # 2. Verificar militares com fun√ß√µes CPO
    print("\nüë• 2. MILITARES COM FUN√á√ïES CPO:")
    militares_cpo = Militar.objects.filter(
        situacao='AT',
        user__funcoes__cargo_funcao__nome__icontains='CPO'
    ).distinct()
    
    print(f"   üìä Total encontrados: {militares_cpo.count()}")
    for militar in militares_cpo[:5]:  # Mostrar apenas os primeiros 5
        funcoes = UsuarioFuncao.objects.filter(
            usuario=militar.user,
            status='ATIVO',
            cargo_funcao__nome__icontains='CPO'
        )
        print(f"   üë§ {militar.get_posto_graduacao_display()} {militar.nome_completo}")
        for funcao in funcoes:
            print(f"      üè∑Ô∏è  {funcao.cargo_funcao.nome} ({funcao.get_tipo_funcao_display()})")
        print()
    
    # 3. Verificar militares com fun√ß√µes CPP
    print("\nüë• 3. MILITARES COM FUN√á√ïES CPP:")
    militares_cpp = Militar.objects.filter(
        situacao='AT',
        user__funcoes__cargo_funcao__nome__icontains='CPP'
    ).distinct()
    
    print(f"   üìä Total encontrados: {militares_cpp.count()}")
    for militar in militares_cpp[:5]:  # Mostrar apenas os primeiros 5
        funcoes = UsuarioFuncao.objects.filter(
            usuario=militar.user,
            status='ATIVO',
            cargo_funcao__nome__icontains='CPP'
        )
        print(f"   üë§ {militar.get_posto_graduacao_display()} {militar.nome_completo}")
        for funcao in funcoes:
            print(f"      üè∑Ô∏è  {funcao.cargo_funcao.nome} ({funcao.get_tipo_funcao_display()})")
        print()
    
    # 4. Verificar fun√ß√µes relacionadas a comiss√µes
    print("\nüè∑Ô∏è  4. FUN√á√ïES RELACIONADAS A COMISS√ïES:")
    
    # Fun√ß√µes CPO
    funcoes_cpo = CargoFuncao.objects.filter(nome__icontains='CPO')
    print("   üìã Fun√ß√µes CPO:")
    for funcao in funcoes_cpo:
        usuarios_count = UsuarioFuncao.objects.filter(
            cargo_funcao=funcao,
            status='ATIVO'
        ).count()
        print(f"      - {funcao.nome} ({usuarios_count} usu√°rios)")
    
    # Fun√ß√µes CPP
    funcoes_cpp = CargoFuncao.objects.filter(nome__icontains='CPP')
    print("   üìã Fun√ß√µes CPP:")
    for funcao in funcoes_cpp:
        usuarios_count = UsuarioFuncao.objects.filter(
            cargo_funcao=funcao,
            status='ATIVO'
        ).count()
        print(f"      - {funcao.nome} ({usuarios_count} usu√°rios)")
    
    # 5. Estat√≠sticas finais
    print("\nüìä 5. ESTAT√çSTICAS:")
    total_militares = Militar.objects.filter(situacao='AT').count()
    militares_com_usuario = Militar.objects.filter(situacao='AT', user__isnull=False).count()
    militares_sem_usuario = Militar.objects.filter(situacao='AT', user__isnull=True).count()
    
    print(f"   üìã Total de militares ativos: {total_militares}")
    print(f"   üë§ Militares com usu√°rio: {militares_com_usuario}")
    print(f"   ‚ùå Militares sem usu√°rio: {militares_sem_usuario}")
    print(f"   üè∑Ô∏è  Militares com fun√ß√£o CPO: {militares_cpo.count()}")
    print(f"   üè∑Ô∏è  Militares com fun√ß√£o CPP: {militares_cpp.count()}")
    
    # 6. Recomenda√ß√µes
    print("\nüí° 6. RECOMENDA√á√ïES:")
    if militares_cpo.count() == 0:
        print("   ‚ö†Ô∏è  Nenhum militar encontrado com fun√ß√£o CPO")
        print("      ‚Üí Verifique se existem fun√ß√µes com 'CPO' no nome")
    
    if militares_cpp.count() == 0:
        print("   ‚ö†Ô∏è  Nenhum militar encontrado com fun√ß√£o CPP")
        print("      ‚Üí Verifique se existem fun√ß√µes com 'CPP' no nome")
    
    if militares_sem_usuario > 0:
        print(f"   ‚ö†Ô∏è  {militares_sem_usuario} militares n√£o possuem usu√°rio vinculado")
        print("      ‚Üí Esses militares n√£o aparecer√£o no filtro por fun√ß√£o")
    
    print("\n‚úÖ Teste conclu√≠do!")
    print("   O filtro por tipo de comiss√£o est√° funcionando.")
    print("   - CPO: mostra apenas militares com fun√ß√µes CPO")
    print("   - CPP: mostra apenas militares com fun√ß√µes CPP")

if __name__ == '__main__':
    testar_filtro_comissao_tipo() 