#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EXECUTOR SIMPLIFICADO DE MIGRA√á√ÉO SUPABASE
==========================================

Script simplificado para executar a migra√ß√£o no PowerShell.

Autor: Sistema de Promo√ß√µes CBMEPI
Data: 29/07/2025
"""

import os
import sys
import subprocess
import time
from datetime import datetime

def log(message):
    """Registra mensagem no log"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_message = f"[{timestamp}] {message}"
    
    # Salvar no arquivo de log
    with open('migracao_execucao.log', 'a', encoding='utf-8') as f:
        f.write(log_message + '\n')
    
    # Tentar imprimir (pode n√£o funcionar no PowerShell)
    try:
        print(log_message)
        sys.stdout.flush()
    except:
        pass

def executar_script(script, descricao):
    """Executa um script Python"""
    log(f"üöÄ Executando: {descricao}")
    
    try:
        # Executar com subprocess e capturar sa√≠da
        result = subprocess.run([sys.executable, script], 
                              capture_output=True, text=True, timeout=3600)
        
        # Salvar sa√≠da no log
        if result.stdout:
            log(f"Sa√≠da de {descricao}:")
            for linha in result.stdout.split('\n'):
                if linha.strip():
                    log(f"  {linha}")
        
        if result.stderr:
            log(f"Erros de {descricao}:")
            for linha in result.stderr.split('\n'):
                if linha.strip():
                    log(f"  ERRO: {linha}")
        
        if result.returncode == 0:
            log(f"‚úÖ {descricao} - Conclu√≠do com sucesso")
            return True
        else:
            log(f"‚ùå {descricao} - Falhou (c√≥digo: {result.returncode})")
            return False
            
    except subprocess.TimeoutExpired:
        log(f"‚è∞ {descricao} - Timeout (mais de 1 hora)")
        return False
    except Exception as e:
        log(f"‚ùå {descricao} - Erro: {e}")
        return False

def verificar_dependencias():
    """Verifica se as depend√™ncias est√£o instaladas"""
    log("üîç Verificando depend√™ncias...")
    
    try:
        import psycopg2
        log("‚úÖ psycopg2-binary instalado")
    except ImportError:
        log("‚ùå psycopg2-binary n√£o instalado")
        log("üì¶ Instalando psycopg2-binary...")
        try:
            subprocess.run([sys.executable, '-m', 'pip', 'install', 'psycopg2-binary'], 
                         check=True, capture_output=True)
            log("‚úÖ psycopg2-binary instalado")
        except:
            log("‚ùå Falha ao instalar psycopg2-binary")
            return False
    
    try:
        import dotenv
        log("‚úÖ python-dotenv instalado")
    except ImportError:
        log("‚ùå python-dotenv n√£o instalado")
        log("üì¶ Instalando python-dotenv...")
        try:
            subprocess.run([sys.executable, '-m', 'pip', 'install', 'python-dotenv'], 
                         check=True, capture_output=True)
            log("‚úÖ python-dotenv instalado")
        except:
            log("‚ùå Falha ao instalar python-dotenv")
            return False
    
    return True

def verificar_arquivos():
    """Verifica se os arquivos necess√°rios existem"""
    log("üîç Verificando arquivos necess√°rios...")
    
    arquivos_necessarios = [
        'migracao_supabase_3_etapas.py',
        'configurar_migracao.py',
        'backup_pre_migracao.py',
        'verificar_migracao.py'
    ]
    
    todos_ok = True
    for arquivo in arquivos_necessarios:
        if os.path.exists(arquivo):
            log(f"‚úÖ {arquivo}")
        else:
            log(f"‚ùå {arquivo} - N√ÉO ENCONTRADO")
            todos_ok = False
    
    return todos_ok

def executar_migracao():
    """Executa a migra√ß√£o completa"""
    log("üöÄ INICIANDO MIGRA√á√ÉO COMPLETA PARA SUPABASE")
    log("="*60)
    
    # Verifica√ß√µes iniciais
    if not verificar_dependencias():
        log("‚ùå Falha na verifica√ß√£o de depend√™ncias")
        return False
    
    if not verificar_arquivos():
        log("‚ùå Falha na verifica√ß√£o de arquivos")
        return False
    
    # Verificar se arquivo .env existe
    if not os.path.exists('.env'):
        log("üìÅ Arquivo .env n√£o encontrado")
        log("üîß Executando configura√ß√£o...")
        if not executar_script('configurar_migracao.py', 'Configura√ß√£o'):
            log("‚ùå Falha na configura√ß√£o")
            return False
    
    # Executar etapas
    etapas = [
        ('backup_pre_migracao.py', 'Backup pr√©-migra√ß√£o'),
        ('migracao_supabase_3_etapas.py', 'Migra√ß√£o em 3 etapas'),
        ('verificar_migracao.py', 'Verifica√ß√£o p√≥s-migra√ß√£o')
    ]
    
    resultados = []
    
    for i, (script, descricao) in enumerate(etapas):
        log(f"\nüéØ EXECUTANDO ETAPA {i+1}/3: {descricao}")
        
        resultado = executar_script(script, descricao)
        resultados.append(resultado)
        
        if not resultado:
            log(f"‚ùå Falha na etapa: {descricao}")
            log("üõë Processo interrompido")
            break
        
        if i < len(etapas) - 1:
            log(f"‚è∏Ô∏è Pausa de 10 segundos antes da pr√≥xima etapa...")
            time.sleep(10)
    
    # Relat√≥rio final
    log("="*60)
    log("üìã RELAT√ìRIO FINAL")
    log("="*60)
    
    etapas_nomes = ["Backup", "Migra√ß√£o", "Verifica√ß√£o"]
    
    for i, (nome, resultado) in enumerate(zip(etapas_nomes, resultados)):
        status = "‚úÖ OK" if resultado else "‚ùå FALHOU"
        log(f"Etapa {i+1}: {nome} - {status}")
    
    total_ok = sum(resultados)
    total_etapas = len(resultados)
    
    log(f"\nüìä RESUMO:")
    log(f"Etapas conclu√≠das: {total_ok}/{total_etapas}")
    
    if total_ok == total_etapas:
        log("üéâ MIGRA√á√ÉO COMPLETA CONCLU√çDA COM SUCESSO!")
        log("‚úÖ Sistema pronto para uso em produ√ß√£o")
    else:
        log("‚ö†Ô∏è MIGRA√á√ÉO PARCIALMENTE CONCLU√çDA")
        log("üîç Verifique os erros e execute novamente se necess√°rio")
    
    log(f"\nüìÅ Log completo salvo em: migracao_execucao.log")
    
    return all(resultados)

def main():
    """Fun√ß√£o principal"""
    log("üöÄ EXECUTOR SIMPLIFICADO DE MIGRA√á√ÉO SUPABASE")
    log("="*60)
    
    # Aviso importante
    log("‚ö†Ô∏è ATEN√á√ÉO: Este processo ir√°:")
    log("   - Fazer backup dos dados")
    log("   - Migrar todos os dados para o Supabase")
    log("   - Verificar a migra√ß√£o")
    log("‚è±Ô∏è Tempo estimado: 30-60 minutos")
    
    # Executar migra√ß√£o
    sucesso = executar_migracao()
    
    if sucesso:
        log("\nüéâ MIGRA√á√ÉO COMPLETA CONCLU√çDA!")
        log("üìã Verifique o arquivo migracao_execucao.log para detalhes")
    else:
        log("\n‚ùå MIGRA√á√ÉO FALHOU!")
        log("üìã Verifique o arquivo migracao_execucao.log para detalhes")

if __name__ == "__main__":
    main() 