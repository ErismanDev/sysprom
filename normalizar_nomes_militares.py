#!/usr/bin/env python
"""
Script para normalizar nomes dos militares no banco de dados
Remove diferen√ßas de mai√∫sculas/min√∫sculas e caracteres especiais
"""

import os
import sys
import django
import unicodedata
import re

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from militares.models import Militar

def normalizar_texto(texto):
    """
    Normaliza texto removendo acentos e convertendo para mai√∫sculas
    """
    if not texto:
        return texto
    
    # Converter para string se n√£o for
    texto = str(texto)
    
    # Normalizar caracteres Unicode (NFD = decomposi√ß√£o)
    texto = unicodedata.normalize('NFD', texto)
    
    # Remover acentos (diacr√≠ticos)
    texto = ''.join(char for char in texto if not unicodedata.combining(char))
    
    # Converter para mai√∫sculas
    texto = texto.upper()
    
    # Remover caracteres especiais, mantendo apenas letras, n√∫meros e espa√ßos
    texto = re.sub(r'[^A-Z0-9\s]', '', texto)
    
    # Remover espa√ßos m√∫ltiplos
    texto = re.sub(r'\s+', ' ', texto)
    
    # Remover espa√ßos no in√≠cio e fim
    texto = texto.strip()
    
    return texto

def verificar_nomes_nao_normalizados():
    """
    Verifica nomes que n√£o est√£o normalizados
    """
    print("üîç Verificando nomes n√£o normalizados...")
    
    militares = Militar.objects.all()
    problemas_encontrados = []
    
    for militar in militares:
        nome_original = militar.nome_completo
        nome_normalizado = normalizar_texto(nome_original)
        
        if nome_original != nome_normalizado:
            problemas_encontrados.append({
                'id': militar.id,
                'nome_original': nome_original,
                'nome_normalizado': nome_normalizado,
                'matricula': militar.matricula
            })
    
    return problemas_encontrados

def normalizar_nomes_militares():
    """
    Normaliza os nomes dos militares no banco de dados
    """
    print("üîß Normalizando nomes dos militares...")
    
    militares = Militar.objects.all()
    total_corrigidos = 0
    
    for militar in militares:
        alterado = False
        
        # Normalizar nome_completo
        nome_original = militar.nome_completo
        nome_normalizado = normalizar_texto(nome_original)
        
        if nome_original != nome_normalizado:
            militar.nome_completo = nome_normalizado
            alterado = True
            print(f"  ‚úÖ Militar ID {militar.id} ({militar.matricula}):")
            print(f"     Original: {nome_original}")
            print(f"     Normalizado: {nome_normalizado}")
        
        # Normalizar nome_guerra (se existir)
        if militar.nome_guerra:
            nome_guerra_original = militar.nome_guerra
            nome_guerra_normalizado = normalizar_texto(nome_guerra_original)
            
            if nome_guerra_original != nome_guerra_normalizado:
                militar.nome_guerra = nome_guerra_normalizado
                alterado = True
                print(f"     Nome Guerra:")
                print(f"       Original: {nome_guerra_original}")
                print(f"       Normalizado: {nome_guerra_normalizado}")
        
        if alterado:
            militar.save()
            total_corrigidos += 1
    
    return total_corrigidos

def criar_backup_antes_normalizacao():
    """
    Cria um backup dos nomes antes da normaliza√ß√£o
    """
    print("üíæ Criando backup dos nomes antes da normaliza√ß√£o...")
    
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = f"backups/backup_nomes_antes_normalizacao_{timestamp}.txt"
    
    try:
        # Criar diret√≥rio de backup se n√£o existir
        os.makedirs("backups", exist_ok=True)
        
        militares = Militar.objects.all()
        
        with open(backup_file, 'w', encoding='utf-8') as f:
            f.write("BACKUP DOS NOMES ANTES DA NORMALIZA√á√ÉO\n")
            f.write("=" * 50 + "\n")
            f.write(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")
            
            for militar in militares:
                f.write(f"ID: {militar.id}\n")
                f.write(f"Matr√≠cula: {militar.matricula}\n")
                f.write(f"Nome Completo: {militar.nome_completo}\n")
                f.write(f"Nome Guerra: {militar.nome_guerra}\n")
                f.write("-" * 30 + "\n")
        
        print(f"‚úÖ Backup criado: {backup_file}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar backup: {e}")
        return False

def mostrar_exemplos_normalizacao():
    """
    Mostra exemplos de como os nomes ser√£o normalizados
    """
    print("üìã Exemplos de normaliza√ß√£o:")
    print("=" * 50)
    
    exemplos = [
        "JAMMES Magalh√íes Silva",
        "Johnathan Patr√ùcio Cavalcante SEIXAS",
        "Mois√ös Andrade Fernandes CANTU‚î¥RIO",
        "Ant¬∂nio Jos√ö de Melo LIMA",
        "Jos√ö AUGUSTO Soares da Cruz",
        "Lu√ùs de Morais NUNES",
        "ODAIR Jos√ö da Silva Santos",
        "Vin√ùcius EDUARDO Santos Martins",
        "LUCIANA L√ùs de Souza e Santos",
        "K‚î¥CIA L√ùgia Silveira Linhares",
        "Jo√ío Bezerra NOVAES Neto",
        "Josu√ö FELICIANO de Melo",
        "Manoel Antonio de FRAN√ÉA J‚îåNIOR",
        "Albert Moreira de MENDON√ÉA",
        "APARISA Maria Co√õlho dos Santos",
        "Bruno GON√ÉALVES Costa",
        "Erida THAYNARA Assun√æ√ío Ara¬∑jo da Silva",
        "Fabr√ùcio de MOURA Medeiros",
        "James Rodrigues de FRAN√ÉA",
        "La√öcio WILSON Cordato Pereira",
        "R√àMULO Castelo Branco Bezerra Filho",
        "EM‚ïêDIO Jos√ö Medeiros de Oliveira",
        "Jos√ö VELOSO Soares",
        "Josu√ö Clementino de MOURA",
        "DI√àGO Martins Fonseca Neto",
        "Jos√ö EPIT‚î¥CIO da Silva Filho",
        "Jos√ö Francisco Alves da VERA CRUZ",
        "Jos√ö LIMA FILHO",
        "Jos√ö NILTON da Costa",
        "JUAREZ Jos√ö  de Sousa J¬∑nior",
        "MARCOS PAULO de Ar√õa Lira",
        "Sebasti√ío DOMINGOS de Carvalho Filho",
        "S√örgio Henrique Reis de ARAG‚îúO",
        "WILLIAM Borg√öa Lima",
        "Jos√ö ERISMAN de Sousa",
        "ABIMAEL HON√ãRIO CORREIA J‚îåNIOR",
        "ANT√àNIO MELO",
        "EDSON FRAN√ÉA SILVA DE SOUSA",
        "FRANCISCO SANTHIAGO HOLANDA FRAN√ÉA SILVA",
        "JO‚îúO MARCOS DE ARA‚îåJO ESC√ãRCIO",
        "MAR√ÉANIO ALVES MARQUES",
        "M√àNICA LET‚ïêCIA ALVES CARDOSO",
        "OZIAS GON√ÉALVES LIMA J‚îåNIOR",
        "‚ïîRICO Vin√ùcius Mendes da Silva",
        "ANT√àNIO CARLOS de Sousa Santos",
        "D√îmaro ST‚ï©NIO Melo Viana",
        "Jo√ío Batista NERY de Sousa",
        "Jo√ío de SOUSA Monteiro NETO",
        "Jos√ö Francisco de ARA‚îåJO Silva",
        "Jos√ö FRAZ‚îúO de Moura Filho",
        "Lu√ùz Alves da Vera CRUZ",
        "MARCIO Rog√örio Bernardes da Rocha",
        "Gl√öcio MENDES da Rocha"
    ]
    
    for exemplo in exemplos:
        normalizado = normalizar_texto(exemplo)
        print(f"Original: {exemplo}")
        print(f"Normalizado: {normalizado}")
        print("-" * 40)

if __name__ == '__main__':
    print("üîß Script de Normaliza√ß√£o de Nomes dos Militares")
    print("=" * 60)
    
    # Mostrar exemplos de normaliza√ß√£o
    mostrar_exemplos_normalizacao()
    
    print("\n" + "=" * 60)
    
    # Verificar nomes n√£o normalizados
    problemas = verificar_nomes_nao_normalizados()
    
    if problemas:
        print(f"\n‚ö†Ô∏è  Encontrados {len(problemas)} nomes n√£o normalizados")
        
        # Mostrar alguns exemplos
        print("\nüìã Exemplos de nomes que ser√£o normalizados:")
        for i, problema in enumerate(problemas[:10]):  # Mostrar apenas os primeiros 10
            print(f"  {i+1}. ID {problema['id']} ({problema['matricula']}):")
            print(f"     Original: {problema['nome_original']}")
            print(f"     Normalizado: {problema['nome_normalizado']}")
        
        if len(problemas) > 10:
            print(f"  ... e mais {len(problemas) - 10} nomes")
        
        # Perguntar se deve normalizar
        resposta = input("\nDeseja normalizar os nomes dos militares? (s/n): ").lower()
        
        if resposta in ['s', 'sim', 'y', 'yes']:
            # Criar backup antes da normaliza√ß√£o
            if criar_backup_antes_normalizacao():
                # Normalizar nomes
                total_corrigidos = normalizar_nomes_militares()
                print(f"\n‚úÖ Normaliza√ß√£o conclu√≠da! {total_corrigidos} militares corrigidos.")
            else:
                print("\n‚ùå Backup n√£o foi criado. Normaliza√ß√£o cancelada por seguran√ßa.")
        else:
            print("\n‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
    else:
        print("\n‚úÖ Todos os nomes j√° est√£o normalizados!") 