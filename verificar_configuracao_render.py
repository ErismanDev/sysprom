#!/usr/bin/env python3
"""
Script para verificar a configura√ß√£o do Render
"""

import os
import sys
import django

def verificar_variaveis_ambiente():
    """Verifica se as vari√°veis de ambiente est√£o configuradas"""
    print("üîç Verificando vari√°veis de ambiente...")
    
    # Vari√°veis importantes para o Render
    variaveis_importantes = [
        'DATABASE_URL',
        'DJANGO_SETTINGS_MODULE',
        'SECRET_KEY',
        'ALLOWED_HOSTS',
    ]
    
    for var in variaveis_importantes:
        valor = os.environ.get(var)
        if valor:
            if var == 'DATABASE_URL':
                # Mostrar apenas o in√≠cio da URL por seguran√ßa
                print(f"‚úÖ {var}: {valor[:50]}...")
            elif var == 'SECRET_KEY':
                # Mostrar apenas o in√≠cio da chave por seguran√ßa
                print(f"‚úÖ {var}: {valor[:20]}...")
            else:
                print(f"‚úÖ {var}: {valor}")
        else:
            print(f"‚ùå {var}: N√£o definida")
    
    return True

def testar_configuracao_render():
    """Testa a configura√ß√£o do Render"""
    print("\nüß™ Testando configura√ß√£o do Render...")
    
    try:
        # Configurar para usar settings_render
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings_render')
        
        # Configurar Django
        django.setup()
        
        # Importar configura√ß√µes
        from django.conf import settings
        
        print("‚úÖ Django configurado com settings_render")
        
        # Verificar configura√ß√µes importantes
        print(f"üìä DEBUG: {settings.DEBUG}")
        print(f"üåê ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}")
        print(f"üóÑÔ∏è DATABASE ENGINE: {settings.DATABASES['default']['ENGINE']}")
        print(f"üåê DATABASE HOST: {settings.DATABASES['default']['HOST']}")
        print(f"üìä DATABASE NAME: {settings.DATABASES['default']['NAME']}")
        print(f"üë§ DATABASE USER: {settings.DATABASES['default']['USER']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return False

def testar_conexao_banco():
    """Testa a conex√£o com o banco"""
    print("\nüîó Testando conex√£o com o banco...")
    
    try:
        from django.db import connection
        
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            
        if result and result[0] == 1:
            print("‚úÖ Conex√£o com banco estabelecida")
            return True
        else:
            print("‚ùå Conex√£o com banco falhou")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False

def verificar_arquivos_estaticos():
    """Verifica configura√ß√£o de arquivos est√°ticos"""
    print("\nüìÅ Verificando arquivos est√°ticos...")
    
    try:
        from django.conf import settings
        
        print(f"üìÇ STATIC_ROOT: {settings.STATIC_ROOT}")
        print(f"üåê STATIC_URL: {settings.STATIC_URL}")
        print(f"üì¶ STATICFILES_STORAGE: {settings.STATICFILES_STORAGE}")
        
        # Verificar se o diret√≥rio existe
        if os.path.exists(settings.STATIC_ROOT):
            print("‚úÖ STATIC_ROOT existe")
        else:
            print("‚ö†Ô∏è  STATIC_ROOT n√£o existe")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o de arquivos est√°ticos: {e}")
        return False

def verificar_dados_banco():
    """Verifica se h√° dados no banco"""
    print("\nüìä Verificando dados no banco...")
    
    try:
        from django.contrib.auth.models import User
        from militares.models import Militar, ComissaoPromocao
        
        # Contar registros
        total_usuarios = User.objects.count()
        total_militares = Militar.objects.count()
        total_comissoes = ComissaoPromocao.objects.count()
        
        print(f"üë• Usu√°rios: {total_usuarios}")
        print(f"üéñÔ∏è  Militares: {total_militares}")
        print(f"üèõÔ∏è  Comiss√µes: {total_comissoes}")
        
        if total_usuarios > 0:
            print("‚úÖ Dados encontrados no banco")
            return True
        else:
            print("‚ö†Ô∏è  Nenhum dado encontrado no banco")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar dados: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîß VERIFICA√á√ÉO DE CONFIGURA√á√ÉO DO RENDER")
    print("=" * 50)
    
    # Verificar vari√°veis de ambiente
    verificar_variaveis_ambiente()
    
    # Testar configura√ß√£o
    if not testar_configuracao_render():
        print("\n‚ùå Configura√ß√£o do Render falhou")
        return False
    
    # Testar conex√£o com banco
    if not testar_conexao_banco():
        print("\n‚ùå Conex√£o com banco falhou")
        print("üí° Verifique:")
        print("   - DATABASE_URL no painel do Render")
        print("   - Credenciais do Supabase")
        print("   - Conectividade de rede")
        return False
    
    # Verificar arquivos est√°ticos
    verificar_arquivos_estaticos()
    
    # Verificar dados
    verificar_dados_banco()
    
    print("\n" + "=" * 50)
    print("‚úÖ VERIFICA√á√ÉO CONCLU√çDA")
    print("=" * 50)
    print()
    print("üìã PR√ìXIMOS PASSOS:")
    print("1. Se tudo estiver OK, teste a aplica√ß√£o no Render")
    print("2. Se houver problemas, verifique os logs no painel do Render")
    print("3. Se necess√°rio, execute a migra√ß√£o de dados")
    print()
    print("üîß Para migrar dados:")
    print("   python migrar_dados_completos_supabase.py")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            print("\n‚ùå Verifica√ß√£o falhou. Verifique os erros acima.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Verifica√ß√£o interrompida pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1) 