#!/usr/bin/env python
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import Militar, UsuarioFuncao, CargoFuncao

def verificar_militar_clemilton():
    print("üîç VERIFICANDO MILITAR CLEMILTON")
    print("=" * 50)
    
    # 1. Buscar militar CLEMILTON
    militares_clemilton = Militar.objects.filter(
        nome_completo__icontains='CLEMILTON'
    )
    
    print(f"üìã Militares encontrados com 'CLEMILTON' ({militares_clemilton.count()}):")
    for militar in militares_clemilton:
        print(f"   - {militar.nome_completo}")
        print(f"     Posto: {militar.get_posto_graduacao_display()}")
        print(f"     Matr√≠cula: {militar.matricula}")
        print(f"     Situa√ß√£o: {militar.get_situacao_display()}")
        print(f"     Tem usu√°rio: {'‚úÖ' if hasattr(militar, 'user') and militar.user else '‚ùå'}")
        if hasattr(militar, 'user') and militar.user:
            print(f"     Usu√°rio: {militar.user.username}")
        print()
    
    # 2. Buscar usu√°rio CLEMILTON
    try:
        usuario_clemilton = User.objects.get(username='361.367.943-49')
        print(f"üë§ Usu√°rio CLEMILTON:")
        print(f"   - Nome: {usuario_clemilton.get_full_name()}")
        print(f"   - Username: {usuario_clemilton.username}")
        print(f"   - Email: {usuario_clemilton.email}")
        print(f"   - Ativo: {usuario_clemilton.is_active}")
        print(f"   - Tem militar: {'‚úÖ' if hasattr(usuario_clemilton, 'militar') and usuario_clemilton.militar else '‚ùå'}")
    except User.DoesNotExist:
        print("‚ùå Usu√°rio CLEMILTON n√£o encontrado!")
        return
    
    # 3. Verificar fun√ß√µes do usu√°rio
    funcoes = UsuarioFuncao.objects.filter(usuario=usuario_clemilton)
    print(f"\nüè∑Ô∏è  Fun√ß√µes do usu√°rio ({funcoes.count()}):")
    for funcao in funcoes:
        print(f"   - {funcao.cargo_funcao.nome} (Status: {funcao.get_status_display()})")
    
    # 4. Tentar criar v√≠nculo se militar existir
    if militares_clemilton.exists():
        militar_clemilton = militares_clemilton.first()
        print(f"\nüîó CRIANDO V√çNCULO:")
        print(f"   Militar: {militar_clemilton.nome_completo}")
        print(f"   Usu√°rio: {usuario_clemilton.get_full_name()}")
        
        # Verificar se j√° tem v√≠nculo
        if hasattr(militar_clemilton, 'user') and militar_clemilton.user:
            print(f"   ‚ö†Ô∏è  Militar j√° tem usu√°rio: {militar_clemilton.user.username}")
        else:
            # Criar v√≠nculo
            militar_clemilton.user = usuario_clemilton
            militar_clemilton.save()
            print(f"   ‚úÖ V√≠nculo criado com sucesso!")
            
            # Verificar novamente
            militar_clemilton.refresh_from_db()
            print(f"   ‚úÖ Militar agora tem usu√°rio: {militar_clemilton.user.username}")
    else:
        print(f"\n‚ùå Nenhum militar CLEMILTON encontrado!")
        print(f"   Buscando militares com nome similar...")
        
        # Buscar militares com nome similar
        militares_similares = Militar.objects.filter(
            nome_completo__icontains='CLEM'
        )
        print(f"   Militares com 'CLEM' ({militares_similares.count()}):")
        for militar in militares_similares:
            print(f"     - {militar.nome_completo} ({militar.get_posto_graduacao_display()})")

if __name__ == '__main__':
    verificar_militar_clemilton() 