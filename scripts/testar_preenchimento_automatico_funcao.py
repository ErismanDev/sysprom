#!/usr/bin/env python
"""
Script para testar a funcionalidade de preenchimento autom√°tico da fun√ß√£o do militar
"""
import os
import sys
import django

# Configurar Django
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import (
    Militar, UsuarioFuncao, CargoFuncao, CargoComissao
)

def testar_preenchimento_automatico_funcao():
    """Testa a funcionalidade de preenchimento autom√°tico da fun√ß√£o do militar"""
    
    print("üß™ TESTANDO PREENCHIMENTO AUTOM√ÅTICO DE FUN√á√ÉO")
    print("=" * 60)
    
    # 1. Verificar militares com usu√°rios vinculados
    print("\nüë• 1. MILITARES COM USU√ÅRIOS VINCULADOS:")
    militares_com_usuario = Militar.objects.filter(user__isnull=False).select_related('user')
    
    for militar in militares_com_usuario[:5]:  # Mostrar apenas os primeiros 5
        funcoes_usuario = UsuarioFuncao.objects.filter(
            usuario=militar.user,
            status='ATIVO'
        ).select_related('cargo_funcao')
        
        print(f"   üìã {militar.get_posto_graduacao_display()} {militar.nome_completo}")
        print(f"      üë§ Usu√°rio: {militar.user.username}")
        print(f"      üè∑Ô∏è  Fun√ß√µes ativas: {funcoes_usuario.count()}")
        
        for funcao in funcoes_usuario:
            print(f"         - {funcao.cargo_funcao.nome} ({funcao.get_tipo_funcao_display()})")
        print()
    
    # 2. Verificar militares sem usu√°rios vinculados
    print("\nüë• 2. MILITARES SEM USU√ÅRIOS VINCULADOS:")
    militares_sem_usuario = Militar.objects.filter(user__isnull=True)[:5]
    
    for militar in militares_sem_usuario:
        print(f"   üìã {militar.get_posto_graduacao_display()} {militar.nome_completo}")
        print(f"      ‚ùå Sem usu√°rio vinculado")
        print(f"      üè∑Ô∏è  Posto: {militar.posto_graduacao}")
        print()
    
    # 3. Testar mapeamento de postos para cargos
    print("\nüè∑Ô∏è  3. MAPEAMENTO DE POSTOS PARA CARGOS:")
    posto_cargo_map = {
        'CB': 'Coronel',
        'TC': 'Tenente Coronel', 
        'MJ': 'Major',
        'CP': 'Capit√£o',
        '1T': '1¬∫ Tenente',
        '2T': '2¬∫ Tenente',
        'AS': 'Aspirante a Oficial',
        'ST': 'Subtenente',
        '1S': '1¬∫ Sargento',
        '2S': '2¬∫ Sargento',
        '3S': '3¬∫ Sargento',
        'CAB': 'Cabo',
        'SD': 'Soldado'
    }
    
    for posto, cargo_nome in posto_cargo_map.items():
        cargo, created = CargoComissao.objects.get_or_create(
            nome=cargo_nome,
            defaults={
                'codigo': f'CARGO_{posto}',
                'descricao': f'Cargo padr√£o para posto {posto}',
                'ativo': True,
                'ordem': 100
            }
        )
        
        status = "‚úÖ Criado" if created else "üîÑ J√° existe"
        print(f"   {posto} ‚Üí {cargo_nome} ({status})")
    
    # 4. Simular busca de fun√ß√£o para diferentes cen√°rios
    print("\nüîç 4. SIMULA√á√ÉO DE BUSCA DE FUN√á√ÉO:")
    
    # Cen√°rio 1: Militar com usu√°rio e fun√ß√£o
    if militares_com_usuario.exists():
        militar_com_funcao = militares_com_usuario.first()
        print(f"   üìã Cen√°rio 1: Militar com fun√ß√£o")
        print(f"      Militar: {militar_com_funcao.nome_completo}")
        print(f"      Usu√°rio: {militar_com_funcao.user.username}")
        
        funcao_usuario = UsuarioFuncao.objects.filter(
            usuario=militar_com_funcao.user,
            status='ATIVO'
        ).select_related('cargo_funcao').first()
        
        if funcao_usuario:
            print(f"      ‚úÖ Fun√ß√£o encontrada: {funcao_usuario.cargo_funcao.nome}")
        else:
            print(f"      ‚ùå Nenhuma fun√ß√£o ativa encontrada")
    
    # Cen√°rio 2: Militar sem usu√°rio (usar posto/gradua√ß√£o)
    if militares_sem_usuario.exists():
        militar_sem_funcao = militares_sem_usuario.first()
        print(f"\n   üìã Cen√°rio 2: Militar sem usu√°rio")
        print(f"      Militar: {militar_sem_funcao.nome_completo}")
        print(f"      Posto: {militar_sem_funcao.posto_graduacao}")
        
        cargo_nome = posto_cargo_map.get(militar_sem_funcao.posto_graduacao, 'Militar')
        cargo, created = CargoComissao.objects.get_or_create(
            nome=cargo_nome,
            defaults={
                'codigo': f'CARGO_{militar_sem_funcao.posto_graduacao}',
                'descricao': f'Cargo padr√£o para {militar_sem_funcao.get_posto_graduacao_display()}',
                'ativo': True,
                'ordem': 100
            }
        )
        
        print(f"      ‚úÖ Cargo criado/encontrado: {cargo.nome}")
    
    # 5. Estat√≠sticas finais
    print("\nüìä 5. ESTAT√çSTICAS:")
    total_militares = Militar.objects.count()
    militares_com_usuario_count = Militar.objects.filter(user__isnull=False).count()
    militares_sem_usuario_count = Militar.objects.filter(user__isnull=True).count()
    total_cargos = CargoComissao.objects.count()
    
    print(f"   üìã Total de militares: {total_militares}")
    print(f"   üë§ Militares com usu√°rio: {militares_com_usuario_count}")
    print(f"   ‚ùå Militares sem usu√°rio: {militares_sem_usuario_count}")
    print(f"   üè∑Ô∏è  Total de cargos: {total_cargos}")
    
    # 6. Recomenda√ß√µes
    print("\nüí° 6. RECOMENDA√á√ïES:")
    if militares_sem_usuario_count > 0:
        print(f"   ‚ö†Ô∏è  {militares_sem_usuario_count} militares n√£o possuem usu√°rio vinculado")
        print(f"      ‚Üí Ser√£o usados cargos baseados no posto/gradua√ß√£o")
    
    if militares_com_usuario_count > 0:
        usuarios_sem_funcao = User.objects.filter(
            militar__isnull=False,
            funcoes__isnull=True
        ).count()
        
        if usuarios_sem_funcao > 0:
            print(f"   ‚ö†Ô∏è  {usuarios_sem_funcao} usu√°rios n√£o possuem fun√ß√£o ativa")
            print(f"      ‚Üí Ser√£o usados cargos baseados no posto/gradua√ß√£o")
    
    print("\n‚úÖ Teste conclu√≠do!")
    print("   A funcionalidade est√° pronta para uso.")
    print("   Quando um militar for selecionado no formul√°rio,")
    print("   a fun√ß√£o ser√° preenchida automaticamente.")

if __name__ == '__main__':
    testar_preenchimento_automatico_funcao() 