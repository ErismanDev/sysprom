#!/usr/bin/env python3
"""
Script para criar backup completo do sistema SEPROM CBMEPI
Inclui: banco de dados, arquivos de m√≠dia, configura√ß√µes e c√≥digo fonte
"""

import os
import sys
import json
import shutil
import zipfile
import datetime
import subprocess
from pathlib import Path
import django
from django.conf import settings
from django.core.management import execute_from_command_line

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

def criar_backup_completo():
    """Cria backup completo do sistema"""
    
    # Data e hora atual para nomear o backup
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = f"backups/backup_completo_{timestamp}"
    
    print(f"üöÄ Iniciando backup completo do sistema...")
    print(f"üìÅ Diret√≥rio de backup: {backup_dir}")
    
    # Criar diret√≥rio de backup
    os.makedirs(backup_dir, exist_ok=True)
    
    try:
        # 1. Backup do banco de dados
        print("\nüìä Fazendo backup do banco de dados...")
        backup_banco_dados(backup_dir, timestamp)
        
        # 2. Backup dos arquivos de m√≠dia
        print("\nüìÅ Fazendo backup dos arquivos de m√≠dia...")
        backup_arquivos_midia(backup_dir)
        
        # 3. Backup dos arquivos de configura√ß√£o
        print("\n‚öôÔ∏è Fazendo backup das configura√ß√µes...")
        backup_configuracoes(backup_dir)
        
        # 4. Backup do c√≥digo fonte
        print("\nüíª Fazendo backup do c√≥digo fonte...")
        backup_codigo_fonte(backup_dir)
        
        # 5. Backup dos scripts e documenta√ß√£o
        print("\nüìù Fazendo backup de scripts e documenta√ß√£o...")
        backup_scripts_documentacao(backup_dir)
        
        # 6. Criar arquivo de metadados do backup
        print("\nüìã Criando metadados do backup...")
        criar_metadados_backup(backup_dir, timestamp)
        
        # 7. Criar arquivo ZIP do backup completo
        print("\nüóúÔ∏è Criando arquivo ZIP do backup...")
        criar_zip_backup(backup_dir, timestamp)
        
        print(f"\n‚úÖ Backup completo criado com sucesso!")
        print(f"üìÇ Localiza√ß√£o: {backup_dir}")
        print(f"üì¶ Arquivo ZIP: {backup_dir}.zip")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro durante o backup: {str(e)}")
        return False

def backup_banco_dados(backup_dir, timestamp):
    """Faz backup do banco de dados"""
    
    # Backup usando dumpdata do Django
    db_backup_file = f"{backup_dir}/banco_dados_{timestamp}.json"
    
    try:
        # Backup de todos os modelos
        execute_from_command_line([
            'manage.py', 'dumpdata', 
            '--indent=2', 
            '--output', db_backup_file
        ])
        print(f"   ‚úÖ Banco de dados salvo em: {db_backup_file}")
        
        # Backup espec√≠fico de militares
        militares_backup_file = f"{backup_dir}/militares_{timestamp}.json"
        execute_from_command_line([
            'manage.py', 'dumpdata', 
            'militares', 
            '--indent=2', 
            '--output', militares_backup_file
        ])
        print(f"   ‚úÖ Militares salvos em: {militares_backup_file}")
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erro no backup do banco: {str(e)}")
        # Tentar backup alternativo
        backup_banco_alternativo(backup_dir, timestamp)

def backup_banco_alternativo(backup_dir, timestamp):
    """Backup alternativo do banco de dados"""
    try:
        # Verificar se √© PostgreSQL
        db_engine = settings.DATABASES['default']['ENGINE']
        if 'postgresql' in db_engine:
            db_name = settings.DATABASES['default']['NAME']
            db_user = settings.DATABASES['default']['USER']
            db_host = settings.DATABASES['default']['HOST']
            db_port = settings.DATABASES['default']['PORT']
            
            pg_dump_file = f"{backup_dir}/postgresql_backup_{timestamp}.sql"
            
            # Comando pg_dump
            cmd = [
                'pg_dump',
                f'--host={db_host}',
                f'--port={db_port}',
                f'--username={db_user}',
                f'--dbname={db_name}',
                '--no-password',
                '--verbose',
                '--clean',
                '--no-owner',
                '--no-privileges',
                f'--file={pg_dump_file}'
            ]
            
            subprocess.run(cmd, check=True)
            print(f"   ‚úÖ Backup PostgreSQL salvo em: {pg_dump_file}")
            
    except Exception as e:
        print(f"   ‚ùå Erro no backup alternativo: {str(e)}")

def backup_arquivos_midia(backup_dir):
    """Faz backup dos arquivos de m√≠dia"""
    
    media_dir = "media"
    if os.path.exists(media_dir):
        media_backup_dir = f"{backup_dir}/media"
        shutil.copytree(media_dir, media_backup_dir)
        print(f"   ‚úÖ Arquivos de m√≠dia copiados para: {media_backup_dir}")
    else:
        print("   ‚ö†Ô∏è Diret√≥rio de m√≠dia n√£o encontrado")

def backup_configuracoes(backup_dir):
    """Faz backup das configura√ß√µes"""
    
    config_files = [
        'sepromcbmepi/settings.py',
        'sepromcbmepi/urls.py',
        'sepromcbmepi/wsgi.py',
        'sepromcbmepi/asgi.py',
        '.pgpass'
    ]
    
    config_backup_dir = f"{backup_dir}/configuracoes"
    os.makedirs(config_backup_dir, exist_ok=True)
    
    for config_file in config_files:
        if os.path.exists(config_file):
            shutil.copy2(config_file, config_backup_dir)
            print(f"   ‚úÖ Configura√ß√£o copiada: {config_file}")
    
    # Backup de requirements se existir
    if os.path.exists('requirements.txt'):
        shutil.copy2('requirements.txt', config_backup_dir)
        print("   ‚úÖ requirements.txt copiado")

def backup_codigo_fonte(backup_dir):
    """Faz backup do c√≥digo fonte"""
    
    # Diret√≥rios do c√≥digo fonte
    source_dirs = [
        'militares',
        'sepromcbmepi',
        'templates',
        'static'
    ]
    
    source_backup_dir = f"{backup_dir}/codigo_fonte"
    os.makedirs(source_backup_dir, exist_ok=True)
    
    for source_dir in source_dirs:
        if os.path.exists(source_dir):
            shutil.copytree(source_dir, f"{source_backup_dir}/{source_dir}")
            print(f"   ‚úÖ C√≥digo fonte copiado: {source_dir}")

def backup_scripts_documentacao(backup_dir):
    """Faz backup de scripts e documenta√ß√£o"""
    
    # Arquivos de script
    script_files = [f for f in os.listdir('.') if f.endswith('.py') and f != 'backup_completo_sistema.py']
    
    # Diret√≥rios de documenta√ß√£o
    doc_dirs = ['docs', 'scripts']
    
    scripts_backup_dir = f"{backup_dir}/scripts_documentacao"
    os.makedirs(scripts_backup_dir, exist_ok=True)
    
    # Copiar scripts
    for script_file in script_files:
        shutil.copy2(script_file, scripts_backup_dir)
        print(f"   ‚úÖ Script copiado: {script_file}")
    
    # Copiar diret√≥rios de documenta√ß√£o
    for doc_dir in doc_dirs:
        if os.path.exists(doc_dir):
            shutil.copytree(doc_dir, f"{scripts_backup_dir}/{doc_dir}")
            print(f"   ‚úÖ Documenta√ß√£o copiada: {doc_dir}")

def criar_metadados_backup(backup_dir, timestamp):
    """Cria arquivo de metadados do backup"""
    
    metadados = {
        'timestamp': timestamp,
        'data_criacao': datetime.datetime.now().isoformat(),
        'sistema': 'SEPROM CBMEPI',
        'versao_django': django.get_version(),
        'python_version': sys.version,
        'conteudo_backup': {
            'banco_dados': True,
            'arquivos_midia': True,
            'configuracoes': True,
            'codigo_fonte': True,
            'scripts_documentacao': True
        },
        'tamanho_estimado': calcular_tamanho_backup(backup_dir),
        'instrucoes_restauracao': [
            "1. Extrair o arquivo ZIP do backup",
            "2. Restaurar o banco de dados usando: python manage.py loaddata banco_dados_*.json",
            "3. Copiar arquivos de m√≠dia para o diret√≥rio media/",
            "4. Verificar configura√ß√µes em configuracoes/",
            "5. Executar: python manage.py migrate",
            "6. Executar: python manage.py collectstatic"
        ]
    }
    
    metadados_file = f"{backup_dir}/metadados_backup.json"
    with open(metadados_file, 'w', encoding='utf-8') as f:
        json.dump(metadados, f, indent=2, ensure_ascii=False)
    
    print(f"   ‚úÖ Metadados salvos em: {metadados_file}")

def calcular_tamanho_backup(backup_dir):
    """Calcula o tamanho estimado do backup"""
    
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(backup_dir):
        for filename in filenames:
            filepath = os.path.join(dirpath, filename)
            total_size += os.path.getsize(filepath)
    
    # Converter para MB
    size_mb = total_size / (1024 * 1024)
    return f"{size_mb:.2f} MB"

def criar_zip_backup(backup_dir, timestamp):
    """Cria arquivo ZIP do backup completo"""
    
    zip_filename = f"{backup_dir}.zip"
    
    with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(backup_dir):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, backup_dir)
                zipf.write(file_path, arcname)
    
    print(f"   ‚úÖ Arquivo ZIP criado: {zip_filename}")
    
    # Remover diret√≥rio tempor√°rio
    shutil.rmtree(backup_dir)
    print(f"   üóëÔ∏è Diret√≥rio tempor√°rio removido")

def verificar_espaco_disco():
    """Verifica se h√° espa√ßo suficiente no disco"""
    
    # Verificar espa√ßo dispon√≠vel (aproximado)
    try:
        statvfs = os.statvfs('.')
        free_space = statvfs.f_frsize * statvfs.f_bavail
        free_space_gb = free_space / (1024**3)
        
        print(f"üíæ Espa√ßo livre dispon√≠vel: {free_space_gb:.2f} GB")
        
        if free_space_gb < 1.0:  # Menos de 1GB
            print("‚ö†Ô∏è Aviso: Pouco espa√ßo em disco dispon√≠vel!")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è N√£o foi poss√≠vel verificar espa√ßo em disco: {str(e)}")
        return True

if __name__ == "__main__":
    print("üîß Sistema de Backup Completo - SEPROM CBMEPI")
    print("=" * 50)
    
    # Verificar espa√ßo em disco
    if not verificar_espaco_disco():
        print("‚ùå Espa√ßo insuficiente para backup. Abortando...")
        sys.exit(1)
    
    # Executar backup
    sucesso = criar_backup_completo()
    
    if sucesso:
        print("\nüéâ Backup conclu√≠do com sucesso!")
        print("üìã Verifique o arquivo ZIP gerado na pasta backups/")
    else:
        print("\nüí• Falha no backup!")
        sys.exit(1) 