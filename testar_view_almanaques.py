#!/usr/bin/env python
"""
Script para testar se a view almanaque_list funciona para superusu√°rios
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.test import RequestFactory
from django.contrib.auth.models import User
from militares.views import almanaque_list
from militares.models import AlmanaqueMilitar

def testar_view_almanaques():
    """Testa se a view almanaque_list funciona para superusu√°rios"""
    
    print("üß™ TESTANDO VIEW ALMANAQUES")
    print("=" * 60)
    
    # Buscar usu√°rio admin
    try:
        user_admin = User.objects.get(username='erisman')
        print(f"‚úÖ Usu√°rio encontrado: {user_admin.username}")
    except User.DoesNotExist:
        print("‚ùå Usu√°rio 'erisman' n√£o encontrado")
        return
    
    # Verificar dados do usu√°rio
    print(f"üìä Dados do usu√°rio:")
    print(f"   ‚Ä¢ is_superuser: {user_admin.is_superuser}")
    print(f"   ‚Ä¢ is_staff: {user_admin.is_staff}")
    
    # Verificar fun√ß√µes
    from militares.models import UsuarioFuncao
    funcoes = UsuarioFuncao.objects.filter(usuario=user_admin, status='ATIVO')
    cargos_especiais = ['Diretor de Gest√£o de Pessoas', 'Chefe da Se√ß√£o de Promo√ß√µes', 'Administrador do Sistema', 'Administrador']
    funcoes_especiais = funcoes.filter(cargo_funcao__nome__in=cargos_especiais)
    
    print(f"   ‚Ä¢ Tem fun√ß√µes especiais: {funcoes_especiais.exists()}")
    if funcoes_especiais.exists():
        for funcao in funcoes_especiais:
            print(f"     - {funcao.cargo_funcao.nome}")
    
    # Verificar almanaques no banco
    print(f"\nüìã ALMANAQUES NO BANCO:")
    total_almanaques = AlmanaqueMilitar.objects.count()
    almanaques_ativos = AlmanaqueMilitar.objects.filter(ativo=True).count()
    
    print(f"   ‚Ä¢ Total de almanaques: {total_almanaques}")
    print(f"   ‚Ä¢ Almanaques ativos: {almanaques_ativos}")
    
    if almanaques_ativos > 0:
        almanaques = AlmanaqueMilitar.objects.filter(ativo=True)
        for almanaque in almanaques:
            print(f"     - {almanaque.titulo} ({almanaque.tipo})")
    
    # Testar a view
    print(f"\nüß™ TESTANDO VIEW:")
    factory = RequestFactory()
    request = factory.get('/militares/almanaques/')
    request.user = user_admin
    
    try:
        response = almanaque_list(request)
        print(f"   ‚Ä¢ Status da resposta: {response.status_code}")
        
        if response.status_code == 200:
            print("   ‚úÖ View funcionou corretamente!")
            
            # Verificar se o contexto tem almanaques
            if hasattr(response, 'context_data'):
                context = response.context_data
                almanaques_context = context.get('almanaques', [])
                total_context = context.get('total_almanaques', 0)
                
                print(f"   ‚Ä¢ Almanaques no contexto: {len(almanaques_context)}")
                print(f"   ‚Ä¢ Total no contexto: {total_context}")
                
                if len(almanaques_context) > 0:
                    print("   ‚úÖ Almanaques est√£o sendo passados para o template!")
                    for almanaque in almanaques_context:
                        print(f"     - {almanaque.titulo} ({almanaque.tipo})")
                else:
                    print("   ‚ùå Nenhum almanaque no contexto")
            else:
                print("   ‚ö†Ô∏è N√£o foi poss√≠vel verificar o contexto")
        else:
            print(f"   ‚ùå View retornou erro: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao testar view: {e}")
        import traceback
        traceback.print_exc()
    
    # Verificar l√≥gica da view
    print(f"\nüîç L√ìGICA DA VIEW:")
    
    # Simular a l√≥gica da view
    if user_admin.is_superuser or user_admin.is_staff or funcoes_especiais.exists():
        print("   ‚úÖ Usu√°rio tem acesso total (superusu√°rio/staff/fun√ß√µes especiais)")
        almanaques_esperados = AlmanaqueMilitar.objects.filter(ativo=True).count()
        print(f"   üìã Deveria ver: {almanaques_esperados} almanaques")
    else:
        print("   ‚ùå Usu√°rio n√£o tem acesso total")
        
        # Verificar membros de comiss√£o
        from militares.models import MembroComissao
        membros = MembroComissao.objects.filter(usuario=user_admin, ativo=True, comissao__status='ATIVA')
        
        if membros.exists():
            tem_cpo = membros.filter(comissao__tipo='CPO').exists()
            tem_cpp = membros.filter(comissao__tipo='CPP').exists()
            
            print(f"   ‚Ä¢ √â membro CPO: {tem_cpo}")
            print(f"   ‚Ä¢ √â membro CPP: {tem_cpp}")
            
            if tem_cpo and tem_cpp:
                print("   ‚úÖ Membro das duas comiss√µes - deveria ver TODOS")
            elif tem_cpo:
                print("   ‚úÖ Membro CPO - deveria ver OFICIAIS")
            elif tem_cpp:
                print("   ‚úÖ Membro CPP - deveria ver PRACAS")
        else:
            print("   ‚ùå N√£o √© membro de comiss√£o")

if __name__ == "__main__":
    testar_view_almanaques() 