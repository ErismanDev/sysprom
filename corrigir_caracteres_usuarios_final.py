#!/usr/bin/env python
"""
Script final para corrigir caracteres problem√°ticos restantes nos usu√°rios
"""

import os
import sys
import django
import unicodedata
import re
from datetime import datetime

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from django.db import connection

def normalizar_caracteres_avancado(texto):
    """
    Normaliza√ß√£o avan√ßada de caracteres especiais
    """
    if not texto:
        return texto
    
    # Converter para string se n√£o for
    texto = str(texto)
    
    # Normalizar caracteres Unicode (NFC = composi√ß√£o)
    texto = unicodedata.normalize('NFC', texto)
    
    # Mapeamento espec√≠fico de caracteres problem√°ticos encontrados
    substituicoes_especificas = {
        # Caracteres de acentua√ß√£o isolados (combining characters)
        '\u0300': '√†',  # grave accent
        '\u0301': '√°',  # acute accent
        '\u0302': '√¢',  # circumflex
        '\u0303': '√£',  # tilde
        '\u0308': '√§',  # diaeresis
        '\u0327': '√ß',  # cedilla
        
        # Caracteres corrompidos espec√≠ficos encontrados
        '√ü': 'ss',
        '√æ': 'th',
        '¬∑': ' ',
        '‚îú': 'a',
        '‚î¥': 'a',
        '‚ï©': 'a',
        '√í': 'O',
        '√ù': 'Y',
        '√ö': 'U',
        
        # Caracteres de controle e s√≠mbolos estranhos
        '\u00B7': ' ',  # middle dot
        '\u251C': 'a',  # box drawing
        '\u2534': 'a',  # box drawing
        '\u2569': 'a',  # box drawing
        '\u00FE': 'th', # thorn
        '\u00DD': 'Y',  # Y with acute
        '\u00DF': 'ss', # sharp s
    }
    
    # Aplicar substitui√ß√µes espec√≠ficas
    for char_antigo, char_novo in substituicoes_especificas.items():
        texto = texto.replace(char_antigo, char_novo)
    
    # Corrigir combina√ß√µes de caracteres de acentua√ß√£o
    # Padr√µes comuns de caracteres de acentua√ß√£o isolados
    padroes_acentuacao = [
        (r'a\u0300', '√†'),
        (r'a\u0301', '√°'),
        (r'a\u0302', '√¢'),
        (r'a\u0303', '√£'),
        (r'a\u0308', '√§'),
        (r'e\u0300', '√®'),
        (r'e\u0301', '√©'),
        (r'e\u0302', '√™'),
        (r'e\u0308', '√´'),
        (r'i\u0300', '√¨'),
        (r'i\u0301', '√≠'),
        (r'i\u0302', '√Æ'),
        (r'i\u0308', '√Ø'),
        (r'o\u0300', '√≤'),
        (r'o\u0301', '√≥'),
        (r'o\u0302', '√¥'),
        (r'o\u0303', '√µ'),
        (r'o\u0308', '√∂'),
        (r'u\u0300', '√π'),
        (r'u\u0301', '√∫'),
        (r'u\u0302', '√ª'),
        (r'u\u0308', '√º'),
        (r'c\u0327', '√ß'),
        (r'n\u0303', '√±'),
        (r'y\u0301', '√Ω'),
        (r'A\u0300', '√Ä'),
        (r'A\u0301', '√Å'),
        (r'A\u0302', '√Ç'),
        (r'A\u0303', '√É'),
        (r'A\u0308', '√Ñ'),
        (r'E\u0300', '√à'),
        (r'E\u0301', '√â'),
        (r'E\u0302', '√ä'),
        (r'E\u0308', '√ã'),
        (r'I\u0300', '√å'),
        (r'I\u0301', '√ç'),
        (r'I\u0302', '√é'),
        (r'I\u0308', '√è'),
        (r'O\u0300', '√í'),
        (r'O\u0301', '√ì'),
        (r'O\u0302', '√î'),
        (r'O\u0303', '√ï'),
        (r'O\u0308', '√ñ'),
        (r'U\u0300', '√ô'),
        (r'U\u0301', '√ö'),
        (r'U\u0302', '√õ'),
        (r'U\u0308', '√ú'),
        (r'C\u0327', '√á'),
        (r'N\u0303', '√ë'),
        (r'Y\u0301', '√ù'),
    ]
    
    # Aplicar padr√µes de acentua√ß√£o
    for padrao, substituicao in padroes_acentuacao:
        texto = re.sub(padrao, substituicao, texto)
    
    # Remover caracteres de controle restantes
    texto = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', texto)
    
    # Normalizar espa√ßos
    texto = re.sub(r'\s+', ' ', texto)
    texto = texto.strip()
    
    return texto

def corrigir_usuarios_especificos():
    """
    Corrige usu√°rios com problemas espec√≠ficos identificados
    """
    print("üîß Corrigindo usu√°rios com problemas espec√≠ficos...")
    
    # Lista de corre√ß√µes espec√≠ficas baseadas nos problemas encontrados
    correcoes_especificas = [
        # ID, campo, valor_corrigido
        (1031, 'first_name', 'Usu√°rio'),
        (32, 'last_name', 'Magalh√£es Silva'),
        (35, 'last_name', 'Patr√≠cio Cavalcante SEIXAS'),
        (39, 'first_name', 'Mois√©s'),
        (39, 'last_name', 'Andrade Fernandes CANTU√ÅRIO'),
        (52, 'last_name', 'Jos√© de Melo LIMA'),
        (78, 'first_name', 'Jos√©'),
        (79, 'first_name', 'Jos√©'),
        (80, 'first_name', 'Jos√©'),
        (82, 'first_name', 'Lu√≠s'),
        (87, 'last_name', 'Jos√© da Silva Santos'),
        (17, 'last_name', 'Super Usu√°rio'),  # superusuario
        (23, 'last_name', 'Alex Gon√ßalves ALMENDRA'),
        (24, 'last_name', 'CHARLES Ivonor de Sousa Ara√∫jo'),
        (27, 'last_name', 'Diego FREIRE de Ara√∫jo'),
        (34, 'last_name', 'Jardson Viana FALC√ÉO'),
        (37, 'last_name', 'Lamartine LAVOZIA Aborgazan Barreto'),
        (38, 'last_name', 'MAYLSON Damasceno Mariscal de Ara√∫jo'),
    ]
    
    total_corrigidos = 0
    erros = []
    
    for usuario_id, campo, valor_corrigido in correcoes_especificas:
        try:
            usuario = User.objects.get(id=usuario_id)
            
            if campo == 'first_name':
                usuario.first_name = valor_corrigido
            elif campo == 'last_name':
                usuario.last_name = valor_corrigido
            
            usuario.save()
            total_corrigidos += 1
            print(f"  ‚úÖ Usu√°rio ID {usuario_id} - {campo} corrigido para '{valor_corrigido}'")
            
        except User.DoesNotExist:
            erro_msg = f"Usu√°rio ID {usuario_id} n√£o encontrado"
            erros.append(erro_msg)
            print(f"  ‚ùå {erro_msg}")
        except Exception as e:
            erro_msg = f"Erro ao corrigir usu√°rio ID {usuario_id}: {e}"
            erros.append(erro_msg)
            print(f"  ‚ùå {erro_msg}")
    
    print(f"\n‚úÖ Corre√ß√µes espec√≠ficas conclu√≠das!")
    print(f"üìä Usu√°rios corrigidos: {total_corrigidos}")
    print(f"‚ùå Erros: {len(erros)}")
    
    return total_corrigidos

def corrigir_caracteres_automatico():
    """
    Corrige caracteres automaticamente usando normaliza√ß√£o avan√ßada
    """
    print("üîß Aplicando corre√ß√£o autom√°tica de caracteres...")
    
    usuarios = User.objects.all()
    total_corrigidos = 0
    erros = []
    
    for usuario in usuarios:
        try:
            alterado = False
            
            # Corrigir first_name
            if usuario.first_name:
                nome_original = usuario.first_name
                nome_corrigido = normalizar_caracteres_avancado(nome_original)
                if nome_original != nome_corrigido:
                    usuario.first_name = nome_corrigido
                    alterado = True
            
            # Corrigir last_name
            if usuario.last_name:
                nome_original = usuario.last_name
                nome_corrigido = normalizar_caracteres_avancado(nome_original)
                if nome_original != nome_corrigido:
                    usuario.last_name = nome_corrigido
                    alterado = True
            
            # Corrigir username (com cuidado para n√£o duplicar)
            if usuario.username:
                username_original = usuario.username
                username_corrigido = normalizar_caracteres_avancado(username_original)
                if username_original != username_corrigido:
                    # Verificar se o username corrigido j√° existe
                    if User.objects.filter(username=username_corrigido).exclude(id=usuario.id).exists():
                        print(f"  ‚ö†Ô∏è  Usu√°rio ID {usuario.id}: username '{username_corrigido}' j√° existe, mantendo original")
                    else:
                        usuario.username = username_corrigido
                        alterado = True
            
            # Corrigir email
            if usuario.email:
                email_original = usuario.email
                email_corrigido = normalizar_caracteres_avancado(email_original)
                if email_original != email_corrigido:
                    # Verificar se o email corrigido j√° existe
                    if User.objects.filter(email=email_corrigido).exclude(id=usuario.id).exists():
                        print(f"  ‚ö†Ô∏è  Usu√°rio ID {usuario.id}: email '{email_corrigido}' j√° existe, mantendo original")
                    else:
                        usuario.email = email_corrigido
                        alterado = True
            
            if alterado:
                usuario.save()
                total_corrigidos += 1
                print(f"  ‚úÖ Usu√°rio ID {usuario.id} ({usuario.username}) corrigido automaticamente")
                
        except Exception as e:
            erro_msg = f"Erro ao corrigir usu√°rio ID {usuario.id}: {e}"
            erros.append(erro_msg)
            print(f"  ‚ùå {erro_msg}")
            continue
    
    print(f"\n‚úÖ Corre√ß√£o autom√°tica conclu√≠da!")
    print(f"üìä Usu√°rios corrigidos: {total_corrigidos}")
    print(f"‚ùå Erros: {len(erros)}")
    
    return total_corrigidos

def verificar_resultado_final():
    """
    Verifica o resultado final ap√≥s todas as corre√ß√µes
    """
    print("üîç Verificando resultado final...")
    
    usuarios = User.objects.all()
    caracteres_problematicos = []
    
    for usuario in usuarios:
        nome_completo = usuario.get_full_name()
        
        # Verificar se h√° caracteres problem√°ticos
        for i, char in enumerate(nome_completo):
            if ord(char) > 127:  # Caracteres n√£o-ASCII
                # Verificar se √© um caractere v√°lido (acentos, cedilha, etc.)
                if char not in '√†√°√¢√£√§√•√ß√®√©√™√´√¨√≠√Æ√Ø√±√≤√≥√¥√µ√∂√π√∫√ª√º√Ω√ø√Ä√Å√Ç√É√Ñ√á√à√â√ä√ã√å√ç√é√è√ë√í√ì√î√ï√ñ√ô√ö√õ√ú√ù':
                    caracteres_problematicos.append({
                        'usuario_id': usuario.id,
                        'username': usuario.username,
                        'nome_completo': nome_completo,
                        'caractere_problematico': char,
                        'posicao': i
                    })
    
    print(f"üìä Total de usu√°rios verificados: {len(usuarios)}")
    print(f"‚ö†Ô∏è  Usu√°rios com caracteres problem√°ticos restantes: {len(caracteres_problematicos)}")
    
    if caracteres_problematicos:
        print("\nüìã Usu√°rios com problemas restantes:")
        for i, problema in enumerate(caracteres_problematicos[:10]):
            print(f"  {i+1}. ID {problema['usuario_id']} - {problema['username']}")
            print(f"     Nome: '{problema['nome_completo']}'")
            print(f"     Caractere problem√°tico: '{problema['caractere_problematico']}' na posi√ß√£o {problema['posicao']}")
    else:
        print("‚úÖ Nenhum caractere problem√°tico restante encontrado!")
    
    return caracteres_problematicos

def main():
    """
    Fun√ß√£o principal
    """
    print("üöÄ Iniciando corre√ß√£o final de caracteres na tabela de usu√°rios...")
    print("=" * 70)
    
    # Aplicar corre√ß√µes espec√≠ficas
    corrigir_usuarios_especificos()
    print()
    
    # Aplicar corre√ß√£o autom√°tica
    corrigir_caracteres_automatico()
    print()
    
    # Verificar resultado final
    problemas_restantes = verificar_resultado_final()
    print()
    
    print("=" * 70)
    print("üèÅ Processo de corre√ß√£o final conclu√≠do!")
    
    if not problemas_restantes:
        print("‚úÖ Todos os problemas de caracteres foram corrigidos com sucesso!")
    else:
        print(f"‚ö†Ô∏è  Ainda restam {len(problemas_restantes)} problemas de caracteres")
        print("üí° Recomenda√ß√£o: Verificar manualmente os casos restantes")

if __name__ == '__main__':
    main() 