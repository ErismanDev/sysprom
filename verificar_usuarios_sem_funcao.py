#!/usr/bin/env python
"""
Script para verificar usu√°rios sem fun√ß√µes vinculadas
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import CargoFuncao, UsuarioFuncao

def verificar_usuarios_sem_funcao():
    """
    Verifica usu√°rios que n√£o t√™m nenhuma fun√ß√£o vinculada
    """
    print("üîç Verificando usu√°rios sem fun√ß√µes vinculadas...")
    print("=" * 70)
    
    # Buscar todos os usu√°rios
    todos_usuarios = User.objects.all()
    
    # Buscar usu√°rios com fun√ß√µes (usando o relacionamento correto)
    usuarios_com_funcao = User.objects.filter(funcoes__isnull=False).distinct()
    
    # Buscar usu√°rios sem fun√ß√µes
    usuarios_sem_funcao = User.objects.filter(funcoes__isnull=True)
    
    print(f"üìä Estat√≠sticas gerais:")
    print(f"   ‚Ä¢ Total de usu√°rios: {todos_usuarios.count()}")
    print(f"   ‚Ä¢ Usu√°rios com fun√ß√µes: {usuarios_com_funcao.count()}")
    print(f"   ‚Ä¢ Usu√°rios sem fun√ß√µes: {usuarios_sem_funcao.count()}")
    print()
    
    if usuarios_sem_funcao.exists():
        print("‚ùå **USU√ÅRIOS SEM FUN√á√ïES VINCULADAS:**")
        print()
        
        for i, usuario in enumerate(usuarios_sem_funcao, 1):
            print(f"**{i}. {usuario.username.upper()}**")
            print(f"   ‚Ä¢ **Username**: `{usuario.username}`")
            print(f"   ‚Ä¢ **Nome completo**: {usuario.get_full_name()}")
            print(f"   ‚Ä¢ **Email**: {usuario.email}")
            print(f"   ‚Ä¢ **Status**: {'‚úÖ Ativo' if usuario.is_active else '‚ùå Inativo'}")
            print(f"   ‚Ä¢ **Superusu√°rio**: {'‚úÖ Sim' if usuario.is_superuser else '‚ùå N√£o'}")
            print(f"   ‚Ä¢ **Staff**: {'‚úÖ Sim' if usuario.is_staff else '‚ùå N√£o'}")
            
            # Verificar se tem militar vinculado
            if hasattr(usuario, 'militar') and usuario.militar:
                print(f"   ‚Ä¢ **Militar vinculado**: {usuario.militar.nome_completo}")
                print(f"   ‚Ä¢ **Posto**: {usuario.militar.posto_graduacao}")
            else:
                print(f"   ‚Ä¢ **Militar vinculado**: Nenhum")
            
            print()
    
    else:
        print("‚úÖ Todos os usu√°rios j√° t√™m fun√ß√µes vinculadas!")
    
    # Verificar fun√ß√µes dispon√≠veis
    print("üîß **FUN√á√ïES DISPON√çVEIS NO SISTEMA:**")
    print()
    
    funcoes_disponiveis = CargoFuncao.objects.all().order_by('nome')
    
    for i, funcao in enumerate(funcoes_disponiveis, 1):
        print(f"**{i}. {funcao.nome}**")
        print(f"   ‚Ä¢ **ID**: {funcao.id}")
        print(f"   ‚Ä¢ **Descri√ß√£o**: {funcao.descricao}")
        print(f"   ‚Ä¢ **Ativo**: {'‚úÖ Sim' if funcao.ativo else '‚ùå N√£o'}")
        print()
    
    return usuarios_sem_funcao, funcoes_disponiveis

def verificar_funcao_padrao():
    """
    Verifica se existe uma fun√ß√£o padr√£o para usu√°rios
    """
    print("üîç Verificando fun√ß√£o padr√£o para usu√°rios...")
    print("=" * 50)
    
    # Buscar fun√ß√µes que podem ser padr√£o
    funcoes_padrao = CargoFuncao.objects.filter(
        nome__icontains='padr√£o'
    ).order_by('nome')
    
    if funcoes_padrao.exists():
        print("‚úÖ **FUN√á√ïES PADR√ÉO ENCONTRADAS:**")
        print()
        
        for funcao in funcoes_padrao:
            print(f"**{funcao.nome}**")
            print(f"   ‚Ä¢ **ID**: {funcao.id}")
            print(f"   ‚Ä¢ **Descri√ß√£o**: {funcao.descricao}")
            print(f"   ‚Ä¢ **Ativo**: {'‚úÖ Sim' if funcao.ativo else '‚ùå N√£o'}")
            print()
        
        return funcoes_padrao.first()
    
    else:
        print("‚ùå Nenhuma fun√ß√£o padr√£o encontrada!")
        print("üí° Ser√° necess√°rio criar ou escolher uma fun√ß√£o padr√£o")
        return None

def main():
    """
    Fun√ß√£o principal
    """
    usuarios_sem_funcao, funcoes_disponiveis = verificar_usuarios_sem_funcao()
    print()
    funcao_padrao = verificar_funcao_padrao()
    
    print("=" * 70)
    print("üìã **RESUMO:**")
    print(f"‚Ä¢ Usu√°rios sem fun√ß√µes: {usuarios_sem_funcao.count()}")
    print(f"‚Ä¢ Fun√ß√µes dispon√≠veis: {funcoes_disponiveis.count()}")
    
    if funcao_padrao:
        print(f"‚Ä¢ Fun√ß√£o padr√£o sugerida: {funcao_padrao.nome}")
    else:
        print("‚Ä¢ Fun√ß√£o padr√£o: N√£o encontrada")

if __name__ == '__main__':
    main() 