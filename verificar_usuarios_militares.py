#!/usr/bin/env python
"""
Script para verificar usu√°rios com militar associado
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import Militar, UsuarioFuncao

def verificar_usuarios_militares():
    """Verifica usu√°rios com militar associado"""
    
    print("üîç VERIFICANDO USU√ÅRIOS COM MILITAR ASSOCIADO")
    print("=" * 60)
    
    # 1. Verificar todos os usu√°rios
    usuarios = User.objects.all()
    print(f"üìã Total de usu√°rios: {usuarios.count()}")
    
    # 2. Verificar usu√°rios com militar associado
    usuarios_com_militar = []
    usuarios_sem_militar = []
    
    for usuario in usuarios:
        try:
            militar = usuario.militar
            usuarios_com_militar.append((usuario, militar))
        except Militar.DoesNotExist:
            usuarios_sem_militar.append(usuario)
    
    print(f"\n‚úÖ USU√ÅRIOS COM MILITAR ASSOCIADO: {len(usuarios_com_militar)}")
    for usuario, militar in usuarios_com_militar:
        print(f"   ‚Ä¢ {usuario.username} - {militar.nome_completo} ({militar.get_posto_graduacao_display()})")
    
    print(f"\n‚ùå USU√ÅRIOS SEM MILITAR ASSOCIADO: {len(usuarios_sem_militar)}")
    for usuario in usuarios_sem_militar:
        print(f"   ‚Ä¢ {usuario.username}")
    
    # 3. Verificar militares sem usu√°rio associado
    militares_sem_usuario = Militar.objects.filter(user__isnull=True)
    print(f"\nüîç MILITARES SEM USU√ÅRIO ASSOCIADO: {militares_sem_usuario.count()}")
    for militar in militares_sem_usuario[:10]:  # Mostrar apenas os primeiros 10
        print(f"   ‚Ä¢ {militar.nome_completo} ({militar.get_posto_graduacao_display()}) - {militar.matricula}")
    
    if militares_sem_usuario.count() > 10:
        print(f"   ... e mais {militares_sem_usuario.count() - 10} militares")
    
    # 4. Sugerir associa√ß√£o
    if usuarios_com_militar and militares_sem_usuario.exists():
        print(f"\nüí° SUGEST√ÉO:")
        print(f"   Para testar a ficha pessoal, voc√™ pode:")
        print(f"   1. Associar um militar a um usu√°rio existente")
        print(f"   2. Ou criar um novo usu√°rio e associar a um militar")
        
        # Mostrar alguns militares dispon√≠veis
        print(f"\n   Militares dispon√≠veis para associa√ß√£o:")
        for militar in militares_sem_usuario[:5]:
            print(f"     ‚Ä¢ {militar.nome_completo} ({militar.get_posto_graduacao_display()}) - {militar.matricula}")
    
    # 5. Verificar se h√° usu√°rios com fun√ß√£o "Usu√°rio"
    usuarios_com_funcao_padrao = UsuarioFuncao.objects.filter(
        cargo_funcao__nome='Usu√°rio',
        status='ATIVO'
    ).select_related('usuario')
    
    print(f"\nüë§ USU√ÅRIOS COM FUN√á√ÉO 'USU√ÅRIO': {usuarios_com_funcao_padrao.count()}")
    for uf in usuarios_com_funcao_padrao:
        try:
            militar = uf.usuario.militar
            print(f"   ‚Ä¢ {uf.usuario.username} - {militar.nome_completo} ‚úÖ")
        except Militar.DoesNotExist:
            print(f"   ‚Ä¢ {uf.usuario.username} - SEM MILITAR ‚ùå")

if __name__ == "__main__":
    verificar_usuarios_militares() 