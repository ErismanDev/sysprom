#!/usr/bin/env python
"""
Script para alterar o username dos usu√°rios militares para usar o CPF
"""

import os
import sys
import django
import re
from django.utils import timezone

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from militares.models import Militar
from django.db import transaction

def limpar_cpf(cpf):
    """
    Remove pontua√ß√£o do CPF para usar como username
    """
    if not cpf:
        return ""
    
    # Remover caracteres n√£o num√©ricos
    return re.sub(r'[^\d]', '', cpf)

def alterar_username_para_cpf():
    """
    Altera o username dos usu√°rios militares para usar o CPF
    """
    print("üöÄ Iniciando altera√ß√£o de username para CPF...")
    
    # Buscar todos os militares com usu√°rio vinculado
    militares_com_usuario = Militar.objects.filter(user__isnull=False)
    
    print(f"üìä Total de militares com usu√°rio: {militares_com_usuario.count()}")
    
    alteracoes_realizadas = 0
    erros = []
    cpfs_duplicados = []
    
    for militar in militares_com_usuario:
        try:
            # Limpar CPF (remover pontua√ß√£o)
            cpf_limpo = limpar_cpf(militar.cpf)
            
            if not cpf_limpo:
                print(f"‚ö†Ô∏è  Militar {militar.matricula}: CPF vazio ou inv√°lido")
                continue
            
            # Verificar se j√° existe usu√°rio com este CPF
            usuario_existente = User.objects.filter(username=cpf_limpo).exclude(pk=militar.user.pk).first()
            
            if usuario_existente:
                print(f"‚ö†Ô∏è  CPF {cpf_limpo} j√° est√° em uso pelo usu√°rio {usuario_existente.username}")
                cpfs_duplicados.append({
                    'cpf': cpf_limpo,
                    'militar_atual': militar.matricula,
                    'usuario_conflitante': usuario_existente.username
                })
                continue
            
            # Verificar se o username atual j√° √© o CPF
            if militar.user.username == cpf_limpo:
                print(f"‚úÖ Militar {militar.matricula}: Username j√° √© o CPF")
                continue
            
            # Alterar username
            username_anterior = militar.user.username
            militar.user.username = cpf_limpo
            militar.user.save(update_fields=['username'])
            
            print(f"‚úÖ Militar {militar.matricula}: {username_anterior} ‚Üí {cpf_limpo}")
            alteracoes_realizadas += 1
            
        except Exception as e:
            print(f"‚ùå Erro ao alterar militar {militar.matricula}: {e}")
            erros.append(f"Militar {militar.matricula}: {e}")
    
    print("\n" + "="*60)
    print("üìä RESUMO DA ALTERA√á√ÉO")
    print("="*60)
    print(f"‚úÖ Altera√ß√µes realizadas: {alteracoes_realizadas}")
    print(f"‚ö†Ô∏è  CPFs duplicados encontrados: {len(cpfs_duplicados)}")
    print(f"‚ùå Erros encontrados: {len(erros)}")
    
    if cpfs_duplicados:
        print("\nüìã CPFs duplicados:")
        for duplicado in cpfs_duplicados[:10]:  # Mostrar apenas os primeiros 10
            print(f"  - CPF {duplicado['cpf']}: Militar {duplicado['militar_atual']} vs {duplicado['usuario_conflitante']}")
    
    if erros:
        print("\nüìã Primeiros 10 erros:")
        for erro in erros[:10]:
            print(f"  - {erro}")
    
    return alteracoes_realizadas, len(cpfs_duplicados), len(erros)

def verificar_alteracoes():
    """
    Verifica se as altera√ß√µes foram aplicadas corretamente
    """
    print("\nüîç Verificando altera√ß√µes...")
    
    militares_com_usuario = Militar.objects.filter(user__isnull=False)
    usuarios_com_cpf = 0
    usuarios_com_matricula = 0
    
    for militar in militares_com_usuario:
        cpf_limpo = limpar_cpf(militar.cpf)
        username_atual = militar.user.username
        
        if username_atual == cpf_limpo:
            usuarios_com_cpf += 1
        elif username_atual.startswith('militar_'):
            usuarios_com_matricula += 1
    
    print(f"üìä Usu√°rios com CPF como username: {usuarios_com_cpf}")
    print(f"üìä Usu√°rios ainda com matr√≠cula como username: {usuarios_com_matricula}")
    
    # Mostrar alguns exemplos
    print("\nüìã Exemplos de usernames:")
    for militar in militares_com_usuario[:5]:
        print(f"  - {militar.matricula}: {militar.user.username} ({militar.nome_completo})")

def criar_relatorio_usuarios():
    """
    Cria um relat√≥rio com os dados dos usu√°rios para facilitar o acesso
    """
    print("\nüìã Criando relat√≥rio de usu√°rios...")
    
    militares_com_usuario = Militar.objects.filter(user__isnull=False).order_by('matricula')
    
    relatorio = []
    relatorio.append("MATR√çCULA,CPF,USERNAME,NOME_COMPLETO,POSTO,EMAIL,SENHA")
    
    for militar in militares_com_usuario:
        cpf_limpo = limpar_cpf(militar.cpf)
        senha = cpf_limpo  # CPF sem pontua√ß√£o como senha
        
        linha = [
            militar.matricula,
            militar.cpf,
            militar.user.username,
            militar.nome_completo,
            militar.get_posto_graduacao_display(),
            militar.email or f"{militar.user.username}@cbmepi.pi.gov.br",
            senha
        ]
        
        # Escapar v√≠rgulas nos campos
        linha = [f'"{campo}"' if ',' in str(campo) else str(campo) for campo in linha]
        relatorio.append(','.join(linha))
    
    # Salvar relat√≥rio
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    arquivo_relatorio = f"relatorio_usuarios_{timestamp}.csv"
    
    with open(arquivo_relatorio, 'w', encoding='utf-8') as f:
        f.write('\n'.join(relatorio))
    
    print(f"‚úÖ Relat√≥rio salvo em: {arquivo_relatorio}")
    return arquivo_relatorio

def main():
    """
    Fun√ß√£o principal
    """
    print("üöÄ ALTERA√á√ÉO DE USERNAME PARA CPF")
    print("="*60)
    
    # Confirmar com o usu√°rio
    resposta = input("‚ö†Ô∏è  ATEN√á√ÉO: Este script ir√° alterar o username de todos os usu√°rios militares para usar o CPF!\nDeseja continuar? (s/N): ")
    
    if resposta.lower() != 's':
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
        return
    
    # Fazer backup antes de alterar
    print("\nüíæ Fazendo backup dos dados atuais...")
    from django.core import serializers
    from datetime import datetime
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = f"backups/backup_antes_alteracao_username_{timestamp}.json"
    
    try:
        # Backup de usu√°rios
        usuarios_data = serializers.serialize('json', User.objects.filter(militar__isnull=False))
        with open(backup_file, 'w', encoding='utf-8') as f:
            f.write(usuarios_data)
        print(f"‚úÖ Backup salvo em: {backup_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao fazer backup: {e}")
    
    # Executar altera√ß√µes
    with transaction.atomic():
        alteracoes, duplicados, erros = alterar_username_para_cpf()
    
    # Verificar altera√ß√µes
    verificar_alteracoes()
    
    # Criar relat√≥rio
    arquivo_relatorio = criar_relatorio_usuarios()
    
    print("\n" + "="*60)
    if alteracoes > 0:
        print("üéâ Altera√ß√£o realizada com sucesso!")
        print(f"üìä {alteracoes} usernames alterados para CPF")
        print(f"üìã Relat√≥rio dispon√≠vel em: {arquivo_relatorio}")
    else:
        print("‚ÑπÔ∏è  Nenhuma altera√ß√£o necess√°ria ou todos os usernames j√° s√£o CPF")
    
    if duplicados > 0:
        print(f"‚ö†Ô∏è  {duplicados} CPFs duplicados encontrados - verificar manualmente")

if __name__ == '__main__':
    main() 