#!/usr/bin/env python
"""
Script final para verificar todas as permiss√µes do sistema
"""
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sepromcbmepi.settings')
django.setup()

from django.contrib.auth.models import User
from django.test import RequestFactory
from militares.models import UsuarioFuncao, CargoFuncao
from militares.context_processors import menu_permissions_processor
from militares.permissoes_simples import *

def verificar_permissoes_finais():
    """Verifica todas as permiss√µes do sistema"""
    
    print("üîß VERIFICA√á√ÉO FINAL DE PERMISS√ïES")
    print("=" * 60)
    
    # 1. Verificar usu√°rio admin
    try:
        user_admin = User.objects.get(username='admin')
    except User.DoesNotExist:
        print("‚ùå Usu√°rio 'admin' n√£o encontrado!")
        return
    
    print(f"\n1Ô∏è‚É£ USU√ÅRIO ADMIN:")
    print(f"   ‚Ä¢ Username: {user_admin.username}")
    print(f"   ‚Ä¢ Nome: {user_admin.get_full_name()}")
    print(f"   ‚Ä¢ is_superuser: {user_admin.is_superuser}")
    print(f"   ‚Ä¢ is_staff: {user_admin.is_staff}")
    print(f"   ‚Ä¢ is_active: {user_admin.is_active}")
    
    # 2. Verificar fun√ß√µes ativas
    funcoes = UsuarioFuncao.objects.filter(usuario=user_admin, status='ATIVO')
    print(f"\n2Ô∏è‚É£ FUN√á√ïES ATIVAS:")
    for funcao in funcoes:
        print(f"   ‚Ä¢ {funcao.cargo_funcao.nome} (ID: {funcao.id})")
    
    # 3. Verificar fun√ß√µes especiais
    funcoes_especiais = funcoes.filter(
        cargo_funcao__nome__in=['Diretor de Gest√£o de Pessoas', 'Chefe da Se√ß√£o de Promo√ß√µes', 'Administrador do Sistema', 'Administrador']
    )
    print(f"\n3Ô∏è‚É£ FUN√á√ïES ESPECIAIS:")
    if funcoes_especiais.exists():
        for funcao in funcoes_especiais:
            print(f"   ‚úÖ {funcao.cargo_funcao.nome}")
    else:
        print("   ‚ùå Nenhuma fun√ß√£o especial encontrada")
    
    # 4. Testar permiss√µes espec√≠ficas
    print(f"\n4Ô∏è‚É£ PERMISS√ïES ESPEC√çFICAS:")
    print(f"   ‚Ä¢ pode_editar_militares: {pode_editar_militares(user_admin)}")
    print(f"   ‚Ä¢ pode_editar_fichas_conceito: {pode_editar_fichas_conceito(user_admin)}")
    print(f"   ‚Ä¢ pode_gerenciar_quadros_vagas: {pode_gerenciar_quadros_vagas(user_admin)}")
    print(f"   ‚Ä¢ pode_gerenciar_comissoes: {pode_gerenciar_comissoes(user_admin)}")
    print(f"   ‚Ä¢ pode_gerenciar_usuarios: {pode_gerenciar_usuarios(user_admin)}")
    print(f"   ‚Ä¢ pode_assinar_documentos: {pode_assinar_documentos(user_admin)}")
    print(f"   ‚Ä¢ pode_visualizar_tudo: {pode_visualizar_tudo(user_admin)}")
    
    # 5. Testar context processor
    print(f"\n5Ô∏è‚É£ CONTEXT PROCESSOR:")
    factory = RequestFactory()
    request = factory.get('/')
    request.user = user_admin
    
    context = menu_permissions_processor(request)
    menu_permissions = context.get('menu_permissions', {})
    
    print(f"   ‚Ä¢ show_dashboard: {menu_permissions.get('show_dashboard', False)}")
    print(f"   ‚Ä¢ show_efetivo: {menu_permissions.get('show_efetivo', False)}")
    print(f"   ‚Ä¢ show_usuarios: {menu_permissions.get('show_usuarios', False)}")
    print(f"   ‚Ä¢ show_permissoes: {menu_permissions.get('show_permissoes', False)}")
    print(f"   ‚Ä¢ show_fichas_oficiais: {menu_permissions.get('show_fichas_oficiais', False)}")
    print(f"   ‚Ä¢ show_fichas_pracas: {menu_permissions.get('show_fichas_pracas', False)}")
    print(f"   ‚Ä¢ show_quadros_acesso: {menu_permissions.get('show_quadros_acesso', False)}")
    print(f"   ‚Ä¢ show_quadros_fixacao: {menu_permissions.get('show_quadros_fixacao', False)}")
    print(f"   ‚Ä¢ show_promocoes: {menu_permissions.get('show_promocoes', False)}")
    print(f"   ‚Ä¢ show_calendarios: {menu_permissions.get('show_calendarios', False)}")
    print(f"   ‚Ä¢ show_comissoes: {menu_permissions.get('show_comissoes', False)}")
    print(f"   ‚Ä¢ show_meus_votos: {menu_permissions.get('show_meus_votos', False)}")
    print(f"   ‚Ä¢ show_administracao: {menu_permissions.get('show_administracao', False)}")
    print(f"   ‚Ä¢ is_special: {menu_permissions.get('is_special', False)}")
    
    # 6. Verificar acesso aos m√≥dulos principais
    principais = [
        menu_permissions.get('show_quadros_acesso', False),
        menu_permissions.get('show_quadros_fixacao', False),
        menu_permissions.get('show_comissoes', False)
    ]
    
    print(f"\n6Ô∏è‚É£ ACESSO AOS M√ìDULOS PRINCIPAIS:")
    print(f"   ‚Ä¢ Quadros de Acesso: {principais[0]}")
    print(f"   ‚Ä¢ Quadros de Fixa√ß√£o: {principais[1]}")
    print(f"   ‚Ä¢ Comiss√µes: {principais[2]}")
    
    # 7. Resultado final
    print(f"\n7Ô∏è‚É£ RESULTADO FINAL:")
    
    if all(principais):
        print("   ‚úÖ SUCESSO TOTAL! Usu√°rio admin tem acesso completo")
        print("   üéØ Agora voc√™ deve conseguir ver no navegador:")
        print("      ‚Ä¢ Quadros de Acesso")
        print("      ‚Ä¢ Quadros de Fixa√ß√£o de Vagas")
        print("      ‚Ä¢ Comiss√µes")
        print("      ‚Ä¢ Todos os outros m√≥dulos administrativos")
        print("   üí° Se ainda n√£o aparecer no navegador:")
        print("      ‚Ä¢ Limpe o cache do navegador (Ctrl+F5)")
        print("      ‚Ä¢ Fa√ßa logout e login novamente")
        print("      ‚Ä¢ Verifique se o servidor est√° rodando")
    else:
        print("   ‚ùå PROBLEMA! Usu√°rio admin ainda n√£o tem acesso total")
        print("   üîß Verificar configura√ß√µes novamente")
    
    print(f"\n" + "=" * 60)

if __name__ == "__main__":
    verificar_permissoes_finais() 